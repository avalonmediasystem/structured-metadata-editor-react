{"version":3,"sources":["data/utah_phillips_one.mp3","api/Utils.js","actions/types.js","actions/peaks-instance.js","actions/forms.js","components/Waveform.js","containers/AlertContainer.js","services/alert-status.js","containers/WaveformContainer.js","services/StructuralMetadataUtils.js","services/form-helper.js","components/HeadingForm.js","actions/sm-data.js","containers/HeadingFormContainer.js","services/WaveformDataUtils.js","components/TimespanForm.js","containers/TimespanFormContainer.js","components/ButtonSection.js","services/Constants.js","components/ListItemInlineEditControls.js","components/TimespanInlineForm.js","components/HeadingInlineForm.js","components/ListItemEditForm.js","components/ListItemControls.js","components/ListItem.js","components/PlaceholderItem.js","components/List.js","containers/StructureOutputContainer.js","App.js","reducers/forms.js","reducers/sm-data.js","reducers/peaks-instance.js","reducers/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BASE_URL","defaultHeaders","Headers","append","APIUtils","urlEndPoint","headers","arguments","length","undefined","url","concat","axios","get","data","post","ADD_HEADING","BUILD_SM_UI","DELETE_ITEM","ADD_DROP_TARGETS","REMOVE_DROP_TARGETS","SET_ACTIVE_DRAG_SOURCE","REMOVE_ACTIVE_DRAG_SOURCES","HANDLE_LIST_ITEM_DROP","INIT_PEAKS","INSERT_SEGMENT","DELETE_SEGMENT","ACTIVATE_SEGMENT","SAVE_SEGMENT","REVERT_SEGMENT","UPDATE_SEGMENT","DRAG_SEGMENT","TEMP_INSERT_SEGMENT","TEMP_DELETE_SEGMENT","initPeaksInstance","smData","options","dispatch","getState","type","types","initPeaks","peaksInstance","events","subscribe","segment","changeSegment","updateSegment","state","payload","handleEditingTimespans","code","handleStructureMasterFile","handleWaveformMasterFile","Waveform","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","zoomIn","peaks","zoom","zoomOut","seekTime","timeInSeconds","parseFloat","Number","isNaN","player","seek","waveformContainer","React","createRef","mediaPlayer","handleSubmit","bind","assertThisInitialized","handleChange","waveformRef","current","mediaPlayerRef","event","preventDefault","setState","target","value","react_default","a","createElement","id","ref","Row","Col","xs","md","controls","src","soundMP3","className","Form","inline","onSubmit","FormGroup","ButtonToolbar","Button","onClick","FormControl","onChange","placeholder","Component","connect","AlertContainer","show","handleDismiss","clearAlert","message","prevProps","prevState","nextProps","isEmpty","_this$props","alertStyle","Alert","bsStyle","onDismiss","UNAUTHORIZED_ACCESS","MASTERFILE_NOT_FOUND","SAVED_MASTERFILE_SUCCESS","NETWORK_ERROR","FETCH_STRUCTURED_DATA_ERROR","PEAKJS_INITIALIZE_ERROR","PEAKSJS_REACHED_END_OF_FILE","configureAlert","status","alertObj","apiUtils","peaksOptions","container","mediaElement","dataUri","dataUriDefaultFormat","keyboard","pointMarkerColor","showPlayheadTime","zoomWaveformColor","WaveformContainer","hasError","initializePeaks","error","console","log","response","request","getRequest","responseURL","handleWaveformFile","handleError","_context","t0","_this2","_this$state","forms","waveformRetrieved","containers_AlertContainer","components_Waveform","objectSpread","actions","peaksActions","StructuralMetadataUtils","dndHelper","addSpanBefore","allItems","wrapperSpanBefore","beforeParent","getParentDiv","beforeIndex","items","map","item","indexOf","splice","createDropZoneObject","addSpanAfter","wrapperSpanAfter","afterParent","afterIndex","stuckInMiddle","spanIndex","siblings","parentDiv","addSpanToEmptyHeader","wrapperParents","findWrapperHeaders","after","uuidv1","obj","label","timespanTitle","begin","beginTime","end","endTime","clonedItems","cloneDeep","findItem","indexToDelete","findIndex","dragSource","wrapperSpans","findWrapperSpans","getItemsOfType","sibling","push","unshift","grandParentDiv","parentIndex","before","time","allSpans","duration","MAX_SAFE_INTEGER","toMs","valid","i","spanBegin","spanEnd","filteredSpans","filter","span","foundItem","fn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","newSpan","spansBefore","spansAfter","wrapperHeadings","getItems","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","currentObj","child","foundDiv","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","currentChild","validHeadings","sortedHeadings","findSpanItem","targetSpan","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","childItem","cloneWOItems","objectWithoutProperties","allHeadings","validDivHeading","getValidHeadingForEmptySpans","forEach","key","found","heading","adjacentDiv","getWrapperDiv","currentParent","position","nestedHeadings","getNestedDivs","currentHeader","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_adjacentDiv","woItems","dropTarget","itemToMove","itemToMoveParent","itemToMoveItemIndex","dropTargetParent","dropTargetItemIndex","removeDropTargets","headingChildOf","headingTitle","timespanChildOf","spanObj","createSpanObject","insertIndex","childSpans","updatedData","removeActive","parent","active","removeFromTree","childTypeToRemove","strTime","moment","asMilliseconds","secTime","sec_num","parseInt","hours","Math","floor","minutes","seconds","round","hourStr","minStr","secStr","toFixed","split","structuralMetadataUtils","getExistingFormValues","clonedSegment","segments","getSegment","getValidationBeginState","validFormat","validTimeFormat","validBeginTime","doesTimeOverlap","getValidationEndState","getDuration","validEndTime","validOrdering","validateBeforeEndTimeOrder","doesTimespanOverlap","getValidationTitleState","title","isTitleValid","validTimespans","HeadingForm","childOfOptions","handleCancelClick","toggleHeading","handleChildOfChange","e","handleHeadingChange","submitItem","clearFormValues","processOptions","isEqual","rootHeader","divHeaders","header","getOptions","controlId","validationState","ControlLabel","Feedback","componentClass","cancelClick","disabled","formIsValid","buildSMUI","json","HeadingFormContainer","submit","values","updatedSmData","submittedItem","insertNewHeader","components_HeadingForm","smActions","COLOR_PALETTE","WaveformDataUtils","initSegments","count","createSegment","startTime","labelText","color","add","rangeEndTime","currentTime","roundOff","getCurrentTime","fileEndTime","rangeBeginTime","currentSegments","sortSegments","editable","deleteChildren","children","removeById","clonedSegments","removeAll","index","isOdd","_peaksInstance$segmen","removedSegment","slicedToArray","seg","_peaksInstance$segmen3","currentState","beginSeconds","endSeconds","_peaksInstance$segmen5","removed","_peaksInstance$segmen7","allSegments","wrapperSegments","findWrapperSegments","currentSegment","currentIndex","num","_strTime$split","_strTime$split2","sortBy","getSegments","sort","x","y","waveformDataUtils","TimespanForm","buildHeadingsOptions","getValidHeadings","clearHeadingOptions","handleInputChange","defineProperty","updateChildOfOptions","handleTimeChange","callback","isTyping","initSegment","localValidTimespans","timespanOpen","isInitializing","toHHmmss","updateInitialize","_waveformDataUtils$va","validateSegment","titleValid","childOfValid","timesValidResponse","_this$state2","_this$state3","sm","mapDispatchToProps","TimespanFormContainer","_structuralMetadataUt","insertNewTimespan","insertNewSegment","components_TimespanForm","assign","newspan","styles","section","margin","well","marginTop","ButtonSection","headingOpen","updateInitializeFlag","handleCancelHeadingClick","handleHeadingClick","deleteTempSegment","handleCancelTimespanClick","handleTimeSpanClick","createTempSegment","tempSegment","timespanFormProps","_this$props$forms","structureRetrieved","style","block","editingDisabled","Collapse","in","containers_HeadingFormContainer","containers_TimespanFormContainer","ItemTypes","tooltip","tip","Tooltip","ListItemInlineEditControls","OverlayTrigger","placement","overlay","handleSaveClick","index_es","icon","waveformUtils","formControl","TimespanInlineForm","revertSegment","cancelFn","saveSegment","saveFn","tempSmData","_this$props2","deleteListItem","activateSegment","_waveformUtils$valida","components_ListItemInlineEditControls","clone","width","HeadingInlineForm","ListItemEditForm","handleEditFormCancel","addUpdatedValues","components_TimespanInlineForm","components_HeadingInlineForm","buttonToolbar","display","justifyContent","popover","height","ListItemControls","deleteMessage","showDeleteConfirm","handleConfirmDelete","handleDelete","enableEditing","handleDeleteClick","_this$props$item","childrenCount","cancelDeleteClick","handleShowDropTargetsClick","handleEditClick","Fragment","Overlay","Popover","dangerouslySetInnerHTML","__html","bsSize","ListItem","editing","deleteItem","deleteSegment","addDropTargets","removeActiveDragSources","setActiveDragSource","connectDragSource","connectDropTarget","subMenu","components_List","itemProp","components_ListItemEditForm","components_ListItemControls","DragConnected","DropTarget","canDrop","monitor","isOver","isOverCurrent","shallow","itemType","getItemType","ConnectedDropTarget","DragSource","beginDrag","isDragging","ConnectedDragSource","li","border","opacity","liHovered","PlaceholderItem","hover","component","drop","dragItem","getItem","handleListItemDrop","dropItem","List","components_PlaceholderItem","components_ListItem","StructureOutputContainer","handleSaveItClick","postData","postRequest","then","catch","handleSaveError","addIds","markRootElement","handleStructureFile","handleFetchError","structureJS","structureWithIds","_this$props$smData","library","faDotCircle","faMinusCircle","faPen","faSave","faTrash","App","lib","backend","HTML5Backend","containers_WaveformContainer","components_ButtonSection","containers_StructureOutputContainer","initialState","action","stateClone","determineDropTargets","newPeaks","Peaks","init","fromEvent","rebuildPeaks","deleteSegments","deactivateSegment","rebuiltPeaks","insertTempSegment","combineReducers","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6f95d8b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/utah_phillips_one.786f6474.mp3\";","import axios from 'axios';\n\n// Config flag to change the source of data retrieval endpoint\nconst useLocalData = false;\n\nexport const BASE_URL = useLocalData\n  ? 'http://localhost:3123/data/mock-response-'\n  : 'https://spruce.dlib.indiana.edu';\n\n// Masterfile ID on the server\nexport const masterFileID = 'd791sg30j';\n\n// Default headers for API calls\nexport const defaultHeaders = new Headers();\ndefaultHeaders.append('Content-Type', 'application/json');\n\nexport default class APIUtils {\n  /**\n   * Construct GET request with parameters,\n   * @param {String} urlEndPoint\n   * @param {Headers} headers\n   */\n  getRequest(urlEndPoint, headers = defaultHeaders) {\n    const url = useLocalData\n      ? `${BASE_URL}${urlEndPoint}`\n      : `${BASE_URL}/master_files/${masterFileID}/${urlEndPoint}`;\n    return axios.get(url, {\n      headers: headers\n    });\n  }\n\n  /**\n   * Construct POST request with parameters,\n   * @param {String} urlEndPoint\n   * @param {JSON} data - JSON data posting to the server\n   * @param {Headers} headers\n   */\n  postRequest(urlEndPoint, data, headers = defaultHeaders) {\n    const url = useLocalData\n      ? `${BASE_URL}${urlEndPoint}`\n      : `${BASE_URL}/master_files/${masterFileID}/${urlEndPoint}`;\n    return axios.post(url, data, {\n      headers: headers\n    });\n  }\n}\n","export const ADD_HEADING = 'ADD_HEADING';\nexport const EDIT_HEADING = 'EDIT_HEADING';\nexport const ADD_TIME_SPAN = 'ADD_TIME_SPAN';\nexport const EDIT_TIME_SPAN = 'EDIT_TIME_SPAN';\nexport const BUILD_SM_UI = 'BUILD_SM_UI';\n\nexport const DELETE_ITEM = 'DELETE_ITEM';\n\nexport const ADD_DROP_TARGETS = 'ADD_DROP_TARGETS';\nexport const REMOVE_DROP_TARGETS = 'REMOVE_DROP_TARGETS';\nexport const SET_ACTIVE_DRAG_SOURCE = 'SET_ACTIVE_DRAG_SOURCE';\nexport const REMOVE_ACTIVE_DRAG_SOURCES = 'REMOVE_ACTIVE_DRAG_SOURCES';\nexport const HANDLE_LIST_ITEM_DROP = 'HANDLE_LIST_ITEM_DROP';\n\nexport const IS_EDITING_TIMESPAN = 'IS_EDITING_TIMESPAN';\nexport const RETRIEVED_WAVEFORM = 'RETRIEVED_WAVEFORM';\nexport const RETRIEVED_STRUCTURE = 'RETRIEVED_STRUCTURE';\n\nexport const INIT_PEAKS = 'INIT_PEAKS';\nexport const INSERT_SEGMENT = 'INSERT_SEGMENT';\nexport const DELETE_SEGMENT = 'DELETE_SEGMENT';\nexport const ACTIVATE_SEGMENT = 'ACTIVATE_SEGMENT';\nexport const SAVE_SEGMENT = 'SAVE_SEGMENT';\nexport const REVERT_SEGMENT = 'REVERT_SEGMENT';\nexport const UPDATE_SEGMENT = 'UPDATE_SEGMENT';\nexport const DRAG_SEGMENT = 'DRAG_SEGMENT';\n\nexport const TEMP_INSERT_SEGMENT = 'TEMP_INSERT_SEGMENT';\nexport const TEMP_DELETE_SEGMENT = 'TEMP_DELETE_SEGMENT';\n","import * as types from './types';\n\nexport function initPeaksInstance(smData, options) {\n  return (dispatch, getState) => {\n    dispatch(initPeaks(smData, options));\n\n    const { peaksInstance } = getState();\n\n    if (peaksInstance.events !== undefined) {\n      peaksInstance.events.subscribe(segment => {\n        dispatch(changeSegment(segment));\n      });\n    }\n  };\n}\n\nexport function initPeaks(smData, options) {\n  return {\n    type: types.INIT_PEAKS,\n    smData,\n    options\n  };\n}\n\nexport function insertNewSegment(span) {\n  return {\n    type: types.INSERT_SEGMENT,\n    payload: span\n  };\n}\n\nexport function deleteSegment(item) {\n  return {\n    type: types.DELETE_SEGMENT,\n    payload: item\n  };\n}\n\nexport function activateSegment(id) {\n  return {\n    type: types.ACTIVATE_SEGMENT,\n    payload: id\n  };\n}\n\nexport function revertSegment(clone) {\n  return {\n    type: types.REVERT_SEGMENT,\n    payload: clone\n  };\n}\n\nexport function saveSegment(state) {\n  return {\n    type: types.SAVE_SEGMENT,\n    payload: state\n  };\n}\n\nexport function updateSegment(segment, state) {\n  return {\n    type: types.UPDATE_SEGMENT,\n    segment,\n    state\n  };\n}\n\nexport function changeSegment(segment) {\n  return {\n    type: types.DRAG_SEGMENT,\n    payload: segment\n  };\n}\n\nexport function insertTempSegment() {\n  return {\n    type: types.TEMP_INSERT_SEGMENT\n  };\n}\n\nexport function deleteTempSegment(id) {\n  return {\n    type: types.TEMP_DELETE_SEGMENT,\n    payload: id\n  };\n}\n","import * as types from './types';\n\nexport const handleEditingTimespans = code => ({\n  type: types.IS_EDITING_TIMESPAN,\n  code\n});\n\nexport const handleStructureMasterFile = code => ({\n  type: types.RETRIEVED_STRUCTURE,\n  code\n});\n\nexport const handleWaveformMasterFile = code => ({\n  type: types.RETRIEVED_WAVEFORM,\n  code\n});\n","import React, { Component } from 'react';\nimport {\n  Button,\n  ButtonToolbar,\n  FormControl,\n  FormGroup,\n  Form,\n  Row,\n  Col\n} from 'react-bootstrap';\nimport soundMP3 from '../data/utah_phillips_one.mp3';\nimport { connect } from 'react-redux';\n\nclass Waveform extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seekTime: ''\n    };\n\n    // Create `refs`\n    this.waveformContainer = React.createRef();\n    this.mediaPlayer = React.createRef();\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    // Grab the React `refs` now the component is mounted\n    this.props.waveformRef(this.waveformContainer.current);\n    this.props.mediaPlayerRef(this.mediaPlayer.current);\n  }\n\n  zoomIn = () => {\n    this.props.peaksInstance.peaks.zoom.zoomIn();\n  };\n\n  zoomOut = () => {\n    this.props.peaksInstance.peaks.zoom.zoomOut();\n  };\n\n  handleSubmit(event) {\n    this.seekTime();\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.setState({\n      seekTime: event.target.value\n    });\n  }\n\n  seekTime = () => {\n    const timeInSeconds = parseFloat(this.state.seekTime);\n    if (!Number.isNaN(timeInSeconds)) {\n      this.props.peaksInstance.peaks.player.seek(timeInSeconds);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"waveform-container\" ref={this.waveformContainer} />\n        <Row>\n          <Col xs={12} md={6}>\n            <audio\n              controls\n              ref={this.mediaPlayer}\n              src={soundMP3}\n              type=\"audio/mp3\"\n            >\n              Your browser does not support the audio element.\n            </audio>\n          </Col>\n          <Col xs={12} md={6} className=\"text-right\">\n            <Form inline onSubmit={this.handleSubmit}>\n              <FormGroup>\n                <ButtonToolbar>\n                  <Button\n                    className=\"glyphicon glyphicon-zoom-in\"\n                    onClick={this.zoomIn}\n                  />\n                  <Button\n                    className=\"glyphicon glyphicon-zoom-out\"\n                    onClick={this.zoomOut}\n                  />\n                </ButtonToolbar>\n              </FormGroup>{' '}\n              <FormControl\n                className=\"form-control\"\n                type=\"text\"\n                value={this.state.seekTime}\n                onChange={this.handleChange}\n                placeholder=\"0\"\n              />{' '}\n              <Button onClick={this.seekTime}>Seek</Button>\n            </Form>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\n// To use in tests as a disconnected component (to access state)\nexport { Waveform as PureWaveform };\n\nconst mapStateToProps = state => ({\n  peaksInstance: state.peaksInstance\n});\n// To use in the app\nexport default connect(mapStateToProps)(Waveform);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert } from 'react-bootstrap';\nimport { isEmpty } from 'lodash';\n\nclass AlertContainer extends Component {\n  static propTypes = {\n    message: PropTypes.string,\n    alertStyle: PropTypes.oneOf(['success', 'warning', 'danger', 'info']),\n    clearAlert: PropTypes.func\n  };\n\n  state = {\n    show: false\n  };\n\n  componentDidMount() {\n    if (this.props.message) {\n      this.setState({ show: true });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.message && !prevState.show) {\n      this.setState({ show: true });\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (isEmpty(nextProps)) {\n      this.setState({ show: false });\n    }\n  }\n\n  handleDismiss = () => {\n    this.setState({ show: false });\n    this.props.clearAlert();\n  };\n\n  render() {\n    const { alertStyle, message } = this.props;\n\n    if (!this.state.show) {\n      return null;\n    }\n\n    return (\n      <Alert bsStyle={alertStyle} onDismiss={this.handleDismiss}>\n        <p>{message}</p>\n      </Alert>\n    );\n  }\n}\n\nexport default AlertContainer;\n","export const UNAUTHORIZED_ACCESS = 'Unauthorized to access the masterfile';\nexport const MASTERFILE_NOT_FOUND = 'Requested masterfile not found';\nexport const SAVED_MASTERFILE_SUCCESS = 'Successfully saved to masterfile';\nexport const NETWORK_ERROR = 'Network error, please try again';\nexport const FETCH_STRUCTURED_DATA_ERROR =\n  'There was an error fetching the Structured Metadata from server';\nexport const PEAKJS_INITIALIZE_ERROR =\n  'There was an error initializing the PeakJS waveform';\nexport const PEAKSJS_REACHED_END_OF_FILE =\n  'Time ahead has timespans reaching the end of media file, there is no available time to insert a new timespan';\n\n/**\n * Helper function which prepares a configuration object to feed the AlertContainer component\n * @param {number} status Code for response\n * @param {function} clearAlert A function defined in the hosting component to clear the alert object in component's state\n */\nexport function configureAlert(status, clearAlert) {\n  let alertObj = { alertStyle: 'danger', clearAlert: clearAlert };\n\n  if (status === 401) {\n    alertObj.message = UNAUTHORIZED_ACCESS;\n  } else if (status === 404) {\n    alertObj.message = MASTERFILE_NOT_FOUND;\n  } else if (status >= 200 && status < 300) {\n    alertObj.alertStyle = 'success';\n    alertObj.message = SAVED_MASTERFILE_SUCCESS;\n  } else if (status === -2) {\n    alertObj.message = FETCH_STRUCTURED_DATA_ERROR;\n  } else if (status === -3) {\n    alertObj.message = PEAKJS_INITIALIZE_ERROR;\n  } else if (status === -4) {\n    alertObj.alertStyle = 'warning';\n    alertObj.message = PEAKSJS_REACHED_END_OF_FILE;\n  } else {\n    alertObj.message = NETWORK_ERROR;\n  }\n  return alertObj;\n}\n","import React, { Component } from 'react';\nimport APIUtils from '../api/Utils';\nimport { connect } from 'react-redux';\nimport * as peaksActions from '../actions/peaks-instance';\nimport * as actions from '../actions/forms';\nimport Waveform from '../components/Waveform';\nimport AlertContainer from '../containers/AlertContainer';\nimport { configureAlert } from '../services/alert-status';\nimport { handleWaveformMasterFile } from '../actions/forms';\n\nconst apiUtils = new APIUtils();\n\n// Peaks options\nconst peaksOptions = {\n  container: null,\n  mediaElement: null,\n  dataUri: null,\n  dataUriDefaultFormat: 'json',\n  keyboard: true,\n  pointMarkerColor: '#006eb0',\n  showPlayheadTime: true,\n  zoomWaveformColor: 'rgba(217, 217, 217, 1)'\n};\n\nclass WaveformContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.waveformContainer = null;\n    this.mediaPlayer = null;\n  }\n\n  state = {\n    alertObj: null,\n    hasError: false\n  };\n\n  componentDidMount() {\n    peaksOptions.container = this.waveformContainer;\n    peaksOptions.mediaElement = this.mediaPlayer;\n    this.initializePeaks();\n  }\n\n  clearAlert = () => {\n    this.setState({\n      alertObj: null\n    });\n  };\n\n  handleError(error) {\n    console.log('TCL: WaveformContainer -> handleError -> error', error);\n    let status = null;\n\n    // Pull status code out of error response/request\n    if (error.response !== undefined) {\n      status = error.response.status;\n    } else if (error.request !== undefined) {\n      status = -3;\n    }\n\n    const alertObj = configureAlert(status, this.clearAlert);\n    this.setState({ alertObj, hasError: true });\n  }\n\n  async initializePeaks() {\n    try {\n      const response = await apiUtils.getRequest('waveform.json');\n      // Set the masterfile URL as the URI for the waveform data file\n      peaksOptions.dataUri = response.request.responseURL;\n\n      // Initialize Peaks\n      this.props.initPeaks(this.props.smData, peaksOptions);\n\n      // Update redux-store flag for waveform file retrieval\n      this.props.handleWaveformFile(0);\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n\n  render() {\n    const { alertObj, hasError } = this.state;\n    const { forms } = this.props;\n\n    return (\n      <section className=\"waveform-section\">\n        {!forms.waveformRetrieved && hasError ? (\n          <AlertContainer {...alertObj} />\n        ) : (\n          <Waveform\n            waveformRef={ref => (this.waveformContainer = ref)}\n            mediaPlayerRef={ref => (this.mediaPlayer = ref)}\n          />\n        )}\n      </section>\n    );\n  }\n}\n\n// For testing purposes\nexport { WaveformContainer as PureWaveformContainer };\n\nconst mapStateToProps = state => ({\n  smData: state.smData,\n  forms: state.forms\n});\n\nconst mapDispatchToProps = dispatch => ({\n  ...actions,\n  initPeaks: (smData, options) =>\n    dispatch(peaksActions.initPeaksInstance(smData, options)),\n  handleWaveformFile: code => dispatch(handleWaveformMasterFile(code))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WaveformContainer);\n","import { findIndex, cloneDeep } from 'lodash';\nimport moment from 'moment';\nimport uuidv1 from 'uuid/v1';\n\n/**\n * Rules - https://github.com/avalonmediasystem/avalon/issues/3022\n *\n * a timespan does not allow overlap.\n * a timepan can not be out of order.\n * a timespan can not be demoted from a parent unless it is the last item in the relationship (last child), as it would create an out of order item.\n * Timespans can only be moved ONE parent- level up or down.\n * Use an arrow and handle click.\n * Only first and last time-spans can be moved. Middle Children are stuck.\n * Headings are ordered by the children they have.\n * If when creating a timespan, you butt against the start or end of another timespan, you have to change the other timepan first.\n * Labels can be edited at will.\n */\n\nexport default class StructuralMetadataUtils {\n  /**\n   * Helper function to create a dropZone object for drag and drop\n   * @returns {Object}\n   */\n  createDropZoneObject() {\n    return {\n      type: 'optional',\n      id: uuidv1()\n    };\n  }\n\n  /**\n   * Helper function which creates an object with the shape our data structure requires\n   * @param {Object} obj\n   * @return {Object}\n   */\n  createSpanObject(obj) {\n    return {\n      id: uuidv1(),\n      type: 'span',\n      label: obj.timespanTitle,\n      begin: obj.beginTime,\n      end: obj.endTime\n    };\n  }\n\n  /**\n   * Remove a targeted list item object from data structure\n   * @param {String} id - list item id\n   * @param {Array} allItems array of items, usually all current items in the data structure\n   * @return {Array}\n   */\n  deleteListItem(id, allItems) {\n    let clonedItems = cloneDeep(allItems);\n    let item = this.findItem(id, allItems);\n    let parentDiv = this.getParentDiv(item, clonedItems);\n    let indexToDelete = findIndex(parentDiv.items, { id: item.id });\n\n    parentDiv.items.splice(indexToDelete, 1);\n\n    return clonedItems;\n  }\n\n  /**\n   * Update the data structure to represent all possible dropTargets for the provided dragSource\n   * @param {Object} dragSource\n   * @param {Object} allItems\n   * @returns {Array} - new computed items\n   */\n  determineDropTargets(dragSource, allItems) {\n    const clonedItems = cloneDeep(allItems);\n\n    if (dragSource.type === 'span') {\n      let wrapperSpans = this.findWrapperSpans(\n        dragSource,\n        this.getItemsOfType('span', clonedItems)\n      );\n      let parentDiv = this.getParentDiv(dragSource, clonedItems);\n      let siblings = parentDiv ? parentDiv.items : [];\n      let spanIndex = siblings\n        .map(sibling => sibling.id)\n        .indexOf(dragSource.id);\n      let stuckInMiddle = this.dndHelper.stuckInMiddle(\n        spanIndex,\n        siblings,\n        parentDiv\n      );\n\n      // If span falls in the middle of other spans, it can't be moved\n      if (stuckInMiddle) {\n        return clonedItems;\n      }\n\n      // Sibling before is a div?\n      if (spanIndex !== 0 && siblings[spanIndex - 1].type === 'div') {\n        let sibling = siblings[spanIndex - 1];\n        if (sibling.items) {\n          sibling.items.push(this.createDropZoneObject());\n        } else {\n          sibling.items = [this.createDropZoneObject()];\n        }\n      }\n\n      // Sibling after is a div?\n      if (\n        spanIndex !== siblings.length - 1 &&\n        siblings[spanIndex + 1].type === 'div'\n      ) {\n        let sibling = siblings[spanIndex + 1];\n        if (sibling.items) {\n          sibling.items.unshift(this.createDropZoneObject());\n        } else {\n          sibling.items = [this.createDropZoneObject()];\n        }\n      }\n\n      let grandParentDiv = this.getParentDiv(parentDiv, clonedItems);\n      let parentIndex = grandParentDiv\n        ? grandParentDiv.items.map(item => item.id).indexOf(parentDiv.id)\n        : null;\n      // A first child of siblings, or an only child\n      if (spanIndex === 0) {\n        // Can't move up\n        if (parentIndex === null) {\n          return clonedItems;\n        }\n\n        if (grandParentDiv) {\n          // Insert directly before the parent div\n          grandParentDiv.items.splice(\n            parentIndex,\n            0,\n            this.createDropZoneObject()\n          );\n\n          // Insert after the \"before\" wrapper span (if one exists)\n          if (wrapperSpans.before) {\n            this.dndHelper.addSpanBefore(clonedItems, wrapperSpans.before);\n          }\n        }\n      }\n\n      // Insert relative to the span after the active span\n      if (wrapperSpans.after) {\n        this.dndHelper.addSpanAfter(clonedItems, wrapperSpans.after);\n      }\n      // Insert when there is no wrapper span after active span, but empty headers\n      if (!wrapperSpans.after) {\n        this.dndHelper.addSpanToEmptyHeader(parentDiv, clonedItems);\n      }\n    }\n\n    return clonedItems;\n  }\n\n  /**\n   * Helper object for drag and drop data structure manipulations\n   * This mutates the state of the data structure\n   */\n  dndHelper = {\n    addSpanBefore: (allItems, wrapperSpanBefore) => {\n      let beforeParent = this.getParentDiv(wrapperSpanBefore, allItems);\n      let beforeIndex = beforeParent.items\n        .map(item => item.id)\n        .indexOf(wrapperSpanBefore.id);\n      // Before the insert, check that the dropTarget index doesn't already exist\n      if (\n        beforeParent.items[beforeIndex + 1] &&\n        beforeParent.items[beforeIndex + 1].type !== 'optional'\n      ) {\n        beforeParent.items.splice(\n          beforeIndex + 1,\n          0,\n          this.createDropZoneObject()\n        );\n      }\n    },\n    addSpanAfter: (allItems, wrapperSpanAfter) => {\n      let afterParent = this.getParentDiv(wrapperSpanAfter, allItems);\n      let afterIndex = afterParent.items\n        .map(item => item.id)\n        .indexOf(wrapperSpanAfter.id);\n\n      afterParent.items.splice(afterIndex, 0, this.createDropZoneObject());\n    },\n    stuckInMiddle: (spanIndex, siblings, parentDiv) => {\n      return (\n        spanIndex !== 0 &&\n        spanIndex !== siblings.length - 1 &&\n        parentDiv.items[spanIndex - 1].type === 'span' &&\n        parentDiv.items[spanIndex + 1].type === 'span'\n      );\n    },\n    addSpanToEmptyHeader: (parentDiv, allItems) => {\n      let wrapperParents = this.findWrapperHeaders(parentDiv, allItems);\n      if (wrapperParents.after) {\n        wrapperParents.after.items.splice(0, 0, this.createDropZoneObject());\n      }\n    }\n  };\n\n  /**\n   * Determine whether a time overlaps (or falls between), an existing timespan's range\n   * @param {String} time - form input value\n   * @param {*} allSpans - all timespans in the data structure\n   * @return {Boolean}\n   */\n  doesTimeOverlap(time, allSpans, duration = Number.MAX_SAFE_INTEGER) {\n    const { toMs } = this;\n    let valid = true;\n    time = toMs(time);\n\n    // Loop through all spans\n    for (let i in allSpans) {\n      let spanBegin = toMs(allSpans[i].begin);\n      let spanEnd = toMs(allSpans[i].end);\n\n      // Illegal time (falls between existing start/end times)\n      if (time >= spanBegin && time < spanEnd) {\n        valid = false;\n        break;\n      }\n      // Time exceeds the end time of the media file\n      if (time / 1000 > duration) {\n        valid = false;\n        break;\n      }\n    }\n    return valid;\n  }\n\n  doesTimespanOverlap(beginTime, endTime, allSpans) {\n    const { toMs } = this;\n    // Filter out only spans where new begin time is before an existing begin time\n    let filteredSpans = allSpans.filter(span => {\n      return toMs(beginTime) < toMs(span.begin);\n    });\n    // Return whether new end time overlaps the next begin time, if there are timespans after the current timespan\n    if (filteredSpans.length !== 0) {\n      return toMs(endTime) > toMs(filteredSpans[0].begin);\n    }\n    return false;\n  }\n\n  /**\n   * Find an item by it's id\n   * @param {String} id - string value to match against\n   * @param {Array} items - Array of nested structured metadata objects containing headings and time spans\n   * @return {Object} - Object found, or null if none\n   */\n  findItem(id, items) {\n    let foundItem = null;\n    let fn = items => {\n      for (let item of items) {\n        if (item.id === id) {\n          foundItem = item;\n        }\n        if (item.items && item.items.length > 0) {\n          fn(item.items);\n        }\n      }\n    };\n    fn(items);\n\n    return foundItem;\n  }\n\n  /**\n   * @param {String} label - string value to match against\n   * @param {Array} items - Array of nested structured metadata objects containing headings and time spans\n   * @return {Object} - Object found, or null if none\n   */\n  findItemByLabel(label, items) {\n    let foundItem = null;\n    let findItem = items => {\n      for (let item of items) {\n        if (item.label === label) {\n          foundItem = item;\n        }\n        if (item.items) {\n          findItem(item.items);\n        }\n      }\n    };\n    findItem(items);\n\n    return foundItem;\n  }\n\n  /**\n   * Find the <span>s which come before and after new span\n   * @param {Object} newSpan - new span object\n   * @param {Array} allSpans - all type <span> objects in current structured metadata\n   * @returns {Object} - wrapper <span>s object: { before: spanObject, after: spanObject }\n   */\n  findWrapperSpans(newSpan, allSpans) {\n    const { toMs } = this;\n    let wrapperSpans = {\n      before: null,\n      after: null\n    };\n    let spansBefore = allSpans.filter(\n      span => toMs(newSpan.begin) >= toMs(span.end)\n    );\n    let spansAfter = allSpans.filter(\n      span => toMs(newSpan.end) <= toMs(span.begin)\n    );\n\n    wrapperSpans.before =\n      spansBefore.length > 0 ? spansBefore[spansBefore.length - 1] : null;\n    wrapperSpans.after = spansAfter.length > 0 ? spansAfter[0] : null;\n\n    return wrapperSpans;\n  }\n\n  /**\n   * Find the <div>s wrapping the current active timespan (either in editing or in drag-n-drop)\n   * @param {Object} parentDiv - parent header of the active timespan\n   * @param {Array} allItems - all the items in the structured metadata\n   */\n  findWrapperHeaders(parentDiv, allItems) {\n    const wrapperHeadings = {\n      before: null,\n      after: null\n    };\n    let grandParentDiv = this.getParentDiv(parentDiv, allItems);\n    let parentIndex = grandParentDiv\n      ? grandParentDiv.items.map(item => item.label).indexOf(parentDiv.label)\n      : null;\n\n    wrapperHeadings.before =\n      grandParentDiv.items[parentIndex - 1] !== undefined\n        ? grandParentDiv.items[parentIndex - 1]\n        : null;\n    wrapperHeadings.after =\n      grandParentDiv.items[parentIndex + 1] !== undefined\n        ? grandParentDiv.items[parentIndex + 1]\n        : null;\n    return wrapperHeadings;\n  }\n\n  /**\n   * Get all items in data structure of type 'div' or 'span'\n   * @param {Array} json\n   * @returns {Array} - all stripped down objects of type in the entire structured metadata collection\n   */\n  getItemsOfType(type = 'div', items = []) {\n    let options = [];\n\n    // Recursive function to search the whole data structure\n    let getItems = items => {\n      for (let item of items) {\n        if (item.type === type) {\n          let currentObj = { ...item };\n          delete currentObj.items;\n          options.push(currentObj);\n        }\n        if (item.items) {\n          getItems(item.items);\n        }\n      }\n    };\n    getItems(items);\n\n    return options;\n  }\n\n  getParentDiv(child, allItems) {\n    let foundDiv = null;\n\n    let findItem = (child, items) => {\n      for (let item of items) {\n        if (item.items) {\n          let childItem = item.items.filter(\n            currentChild => child.id === currentChild.id\n          );\n          // Found it\n          if (childItem.length > 0) {\n            foundDiv = item;\n            break;\n          }\n          findItem(child, item.items);\n        }\n      }\n    };\n    findItem(child, allItems);\n    return foundDiv;\n  }\n\n  /**\n   * Overall logic is to find existing before and after spans for the new object (time flow), and then\n   * their parent 'divs' would be valid headings.\n   * @param {Object} wrapperSpans Object representing before and after spans of newSpan (if they exist)\n   * @param {Array} allItems - All structural metadata items in tree\n   * @return {Array} - of valid <div> objects in structural metadata tree\n   */\n  getValidHeadings(wrapperSpans, allItems) {\n    let validHeadings = [];\n    let sortedHeadings = [];\n\n    let findSpanItem = (targetSpan, items) => {\n      for (let item of items) {\n        // Children items exist\n        if (item.items) {\n          // Check for a target span match\n          let targetSpanMatch = item.items.filter(\n            childItem => childItem.id === targetSpan.id\n          );\n          // Match found\n          if (targetSpanMatch.length > 0) {\n            let { items, ...cloneWOItems } = item;\n            // Add parent div to valid array\n            validHeadings.push(cloneWOItems);\n          }\n          // Try deeper in list\n          findSpanItem(targetSpan, item.items);\n        }\n      }\n    };\n\n    // Get all headings in the metada structure\n    let allHeadings = this.getItemsOfType('div', allItems);\n\n    // There are currently no spans, ALL headings are valid\n    if (!wrapperSpans.before && !wrapperSpans.after) {\n      validHeadings = allHeadings;\n    }\n\n    if (wrapperSpans.before) {\n      findSpanItem(wrapperSpans.before, allItems);\n    }\n    if (wrapperSpans.after) {\n      findSpanItem(wrapperSpans.after, allItems);\n    }\n    // Get valid headings when either of wrapping timespan is null\n    if (\n      (!wrapperSpans.before && wrapperSpans.after) ||\n      (wrapperSpans.before && !wrapperSpans.after)\n    ) {\n      let validDivHeading = this.getValidHeadingForEmptySpans(\n        wrapperSpans,\n        allItems\n      );\n      validHeadings = validHeadings.concat(validDivHeading);\n    }\n\n    // Sort valid headings to comply with the order in the metadata structure\n    allHeadings.forEach(key => {\n      let found = false;\n      validHeadings = validHeadings.filter(heading => {\n        if (!found && heading.label === key.label) {\n          sortedHeadings.push(heading);\n          found = true;\n          return false;\n        } else {\n          return true;\n        }\n      });\n    });\n\n    return sortedHeadings;\n  }\n\n  /**\n   * Find valid headings when either wrapping timespan before or after is null\n   * @param {Object} wrapperSpans - spans wrapping the current active timespan\n   * @param {Array} allItems - all the items in structured metadata\n   */\n  getValidHeadingForEmptySpans(wrapperSpans, allItems) {\n    let adjacentDiv = null;\n\n    let getWrapperDiv = (currentParent, position) => {\n      let wrapperParents = this.findWrapperHeaders(currentParent, allItems);\n      switch (position) {\n        case 'before':\n          return !wrapperParents.before ? currentParent : wrapperParents.before;\n        case 'after':\n          return !wrapperParents.after ? currentParent : wrapperParents.after;\n        default:\n          return currentParent;\n      }\n    };\n\n    let nestedHeadings = [];\n    let getNestedDivs = (currentHeader, currentParent) => {\n      if (currentHeader !== currentParent) {\n        let items = currentHeader.items;\n        if (items) {\n          for (let item of items) {\n            if (item.type === 'div') {\n              let { items, ...cloneWOItems } = item;\n              nestedHeadings.push(cloneWOItems);\n            }\n            getNestedDivs(item, currentParent);\n          }\n        }\n      }\n    };\n    if (!wrapperSpans.after && wrapperSpans.before) {\n      let currentParent = this.getParentDiv(wrapperSpans.before, allItems);\n      adjacentDiv = getWrapperDiv(currentParent, 'after');\n      getNestedDivs(adjacentDiv, currentParent);\n    }\n    if (!wrapperSpans.before && wrapperSpans.after) {\n      let currentParent = this.getParentDiv(wrapperSpans.after, allItems);\n      adjacentDiv = getWrapperDiv(currentParent, 'before');\n      getNestedDivs(adjacentDiv, currentParent);\n    }\n    let { items, ...woItems } = adjacentDiv;\n    nestedHeadings.push(woItems);\n    return nestedHeadings;\n  }\n\n  /**\n   * Helper function which handles React Dnd's dropping of a dragSource onto a dropTarget\n   * It needs to re-arrange the data structure to reflect the new positions\n   * @param {Object} dragSource - a minimal object React DnD uses with only the id value\n   * @param {Object} dropTarget\n   * @param {Array} allItems\n   * @returns {Array}\n   */\n  handleListItemDrop(dragSource, dropTarget, allItems) {\n    let clonedItems = cloneDeep(allItems);\n    let itemToMove = this.findItem(dragSource.id, clonedItems);\n\n    // Slice out previous position of itemToMove\n    let itemToMoveParent = this.getParentDiv(itemToMove, clonedItems);\n    let itemToMoveItemIndex = itemToMoveParent.items\n      .map(item => item.id)\n      .indexOf(itemToMove.id);\n    itemToMoveParent.items.splice(itemToMoveItemIndex, 1);\n\n    // Place itemToMove right after the placeholder array position\n    let dropTargetParent = this.getParentDiv(dropTarget, clonedItems);\n    let dropTargetItemIndex = dropTargetParent.items\n      .map(item => item.id)\n      .indexOf(dropTarget.id);\n    dropTargetParent.items.splice(dropTargetItemIndex, 0, itemToMove);\n\n    // Get rid of all placeholder elements\n    return this.removeDropTargets(clonedItems);\n  }\n\n  /**\n   * Insert a new heading as child of an existing heading\n   * @param {Object} obj - new heading object to insert\n   * @param {Array} allItems - The entire structured metadata collection\n   * @returns {Array} - The updated structured metadata collection, with new object inserted\n   */\n  insertNewHeader(obj, allItems) {\n    let clonedItems = cloneDeep(allItems);\n    let foundDiv =\n      this.findItem(obj.headingChildOf, clonedItems) || clonedItems[0];\n\n    // If children exist, add to list\n    if (foundDiv) {\n      foundDiv.items.unshift({\n        id: uuidv1(),\n        type: 'div',\n        label: obj.headingTitle,\n        items: []\n      });\n    }\n\n    return clonedItems;\n  }\n\n  /**\n   * Insert a new timespan as child of an existing heading\n   * @param {Object} obj - object of form values submitted\n   * @param {Array} allItems - The entire structured metadata collection\n   * @returns ({Object}, {Array}) - (New span, The updated structured metadata collection, with new object inserted)\n   */\n  insertNewTimespan(obj, allItems) {\n    let clonedItems = cloneDeep(allItems);\n    let foundDiv = this.findItem(obj.timespanChildOf, clonedItems);\n    const spanObj = this.createSpanObject(obj);\n    let insertIndex = 0;\n\n    // If children exist, add to list\n    if (foundDiv) {\n      let childSpans = foundDiv.items.filter(item => item.type === 'span');\n\n      // Get before and after sibling spans\n      let wrapperSpans = this.findWrapperSpans(spanObj, childSpans);\n\n      if (wrapperSpans.before) {\n        insertIndex =\n          findIndex(foundDiv.items, { id: wrapperSpans.before.id }) + 1;\n      }\n      // Insert new span at appropriate index\n      foundDiv.items.splice(insertIndex, 0, spanObj);\n    }\n\n    return { newSpan: spanObj, updatedData: clonedItems };\n  }\n\n  /**\n   * Recursive function to clean out any 'active' drag item property in the data structure\n   * @param {Array} allItems\n   * @returns {Array}\n   */\n  removeActiveDragSources(allItems) {\n    let removeActive = parent => {\n      if (!parent.items) {\n        if (parent.active) {\n          parent.active = false;\n        }\n        return parent;\n      }\n      parent.items = parent.items.map(child => removeActive(child));\n\n      return parent;\n    };\n    let cleanItems = removeActive(allItems[0]);\n\n    return [cleanItems];\n  }\n\n  /**\n   * Recursive function to remove all temporary Drop Target objects from the structured metadata items\n   * @param {Array} allItems\n   */\n  removeDropTargets(allItems) {\n    const clonedItems = cloneDeep(allItems);\n    let removeFromTree = (parent, childTypeToRemove) => {\n      if (!parent.items) {\n        return parent;\n      }\n\n      parent.items = parent.items\n        .filter(child => child.type !== childTypeToRemove)\n        .map(child => removeFromTree(child, childTypeToRemove));\n\n      return parent;\n    };\n    let cleanItems = removeFromTree(clonedItems[0], 'optional');\n\n    return [cleanItems];\n  }\n\n  /**\n   * Moment.js helper millisecond converter to make calculations consistent\n   * @param {String} strTime form input value\n   */\n  toMs(strTime) {\n    return moment.duration(strTime).asMilliseconds();\n  }\n\n  /**\n   * Convert seconds to string format hh:mm:ss\n   * @param {Number} secTime - time in seconds\n   */\n  toHHmmss(secTime) {\n    let sec_num = parseInt('' + secTime * 100) / 100;\n    let hours = Math.floor(sec_num / 3600);\n    let minutes = Math.floor(sec_num / 60);\n    let seconds = Math.round((sec_num % 60) * 100) / 100;\n\n    let hourStr = hours < 10 ? `0${hours}` : `${hours}`;\n    let minStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    let secStr = seconds.toFixed(2);\n    secStr = seconds < 10 ? `0${secStr}` : `${secStr}`;\n\n    return `${hourStr}:${minStr}:${secStr}`;\n  }\n\n  /**\n   * Update an existing heading object\n   * @param {Object} heading - updated form object\n   * @param {Array} allItems - the data structure\n   */\n  updateHeading(heading, allItems) {\n    const clonedItems = cloneDeep(allItems);\n    let item = this.findItem(heading.id, clonedItems);\n    item.label = heading.headingTitle;\n\n    // TODO: Figure out how to handle \"Child Of\" when this becomes inline.\n\n    return clonedItems;\n  }\n\n  /**\n   * Does 'before' time start prior to 'end' time?\n   * @param {String} begin form intput value\n   * @param {String} end form input value\n   * @return {Boolean}\n   */\n  validateBeforeEndTimeOrder(begin, end) {\n    if (!begin || !end) {\n      return true;\n    }\n    if (this.toMs(begin) >= this.toMs(end)) {\n      return false;\n    }\n    return true;\n  }\n\n  validTimeFormat(value) {\n    return value && value.split(':').length === 3;\n  }\n}\n","import StructuralMetadataUtils from './StructuralMetadataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\n/**\n * Load existing form values to state, if in 'EDIT' mode\n */\nexport function getExistingFormValues(id, smData, peaks = {}) {\n  let item = structuralMetadataUtils.findItem(id, smData);\n\n  // Heading\n  if (item.type === 'div' || item.type === 'root') {\n    return {\n      headingTitle: item.label\n    };\n  }\n\n  // Timespan\n  if (item.type === 'span') {\n    let parentDiv = structuralMetadataUtils.getParentDiv(item, smData);\n\n    return {\n      beginTime: item.begin,\n      endTime: item.end,\n      timespanChildOf: parentDiv ? parentDiv.id : '',\n      timespanTitle: item.label,\n      clonedSegment: peaks.segments.getSegment(id)\n    };\n  }\n}\n\nexport function getValidationBeginState(beginTime, allSpans) {\n  if (!beginTime || beginTime.indexOf(':') === -1) {\n    return null;\n  }\n\n  const validFormat = structuralMetadataUtils.validTimeFormat(beginTime);\n  const validBeginTime = structuralMetadataUtils.doesTimeOverlap(\n    beginTime,\n    allSpans\n  );\n\n  if (validFormat && validBeginTime) {\n    return 'success';\n  }\n  if (!validFormat || !validBeginTime) {\n    return 'error';\n  }\n  return null;\n}\n\nexport function getValidationEndState(\n  beginTime,\n  endTime,\n  allSpans,\n  peaksInstance\n) {\n  let duration;\n  if (peaksInstance !== undefined) {\n    if (peaksInstance.player !== undefined) {\n      duration = Math.round(peaksInstance.player.getDuration() * 100) / 100;\n    }\n  }\n\n  if (!endTime || endTime.indexOf(':') === -1) {\n    return null;\n  }\n\n  const validFormat = structuralMetadataUtils.validTimeFormat(endTime);\n  const validEndTime = structuralMetadataUtils.doesTimeOverlap(\n    endTime,\n    allSpans,\n    duration\n  );\n  const validOrdering = structuralMetadataUtils.validateBeforeEndTimeOrder(\n    beginTime,\n    endTime\n  );\n  const doesTimespanOverlap = structuralMetadataUtils.doesTimespanOverlap(\n    beginTime,\n    endTime,\n    allSpans\n  );\n\n  if (validFormat && validEndTime && validOrdering && !doesTimespanOverlap) {\n    return 'success';\n  }\n  if (!validFormat || !validEndTime || !validOrdering || doesTimespanOverlap) {\n    return 'error';\n  }\n  return null;\n}\n\nexport function getValidationTitleState(title) {\n  if (title.length > 2) {\n    return 'success';\n  }\n  if (title.length > 0) {\n    return 'error';\n  }\n  return null;\n}\n\n/**\n * Validation logic for a valid title here\n * @param {String} title\n */\nexport function isTitleValid(title) {\n  return title.length > 2;\n}\n\n/**\n * Validates that the begin and end time span values are valid separately, and together\n * in the region which they will create.\n *\n * This function also preps handy feedback messages we might want to display to the user\n */\nexport function validTimespans(beginTime, endTime, allSpans, peaksInstance) {\n  let duration;\n  if (peaksInstance !== undefined) {\n    if (peaksInstance.player !== undefined) {\n      duration = Math.round(peaksInstance.player.getDuration() * 100) / 100;\n    }\n  }\n  // Valid formats?\n  if (!structuralMetadataUtils.validTimeFormat(beginTime)) {\n    return {\n      valid: false,\n      message: 'Invalid begin time format'\n    };\n  }\n  if (!structuralMetadataUtils.validTimeFormat(endTime)) {\n    return {\n      valid: false,\n      message: 'Invalid end time format'\n    };\n  }\n  // Any individual overlapping?\n  if (!structuralMetadataUtils.doesTimeOverlap(beginTime, allSpans)) {\n    return {\n      valid: false,\n      message: 'Begin time overlaps an existing timespan region'\n    };\n  }\n  if (!structuralMetadataUtils.doesTimeOverlap(endTime, allSpans)) {\n    return {\n      valid: false,\n      message: 'End time overlaps an existing timespan region'\n    };\n  }\n  // Begin comes before end?\n  if (!structuralMetadataUtils.validateBeforeEndTimeOrder(beginTime, endTime)) {\n    return {\n      valid: false,\n      message: 'Begin time must start before end time'\n    };\n  }\n  // Timespan range overlaps an existing timespan?\n  if (\n    structuralMetadataUtils.doesTimespanOverlap(beginTime, endTime, allSpans)\n  ) {\n    return {\n      valid: false,\n      message: 'New timespan region overlaps an existing timespan region'\n    };\n  }\n  // Timespan end time is greater than end time of the media file\n  if (duration < structuralMetadataUtils.toMs(endTime) / 1000) {\n    return {\n      valid: false,\n      message: 'End time overlaps duration of the media file'\n    };\n  }\n\n  // Success!\n  return { valid: true };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport {\n  Button,\n  ButtonToolbar,\n  Col,\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  Row\n} from 'react-bootstrap';\nimport * as actions from '../actions/forms';\nimport PropTypes from 'prop-types';\nimport { isEqual } from 'lodash';\nimport { getValidationTitleState } from '../services/form-helper';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nclass HeadingForm extends Component {\n  state = {\n    headingTitle: '',\n    headingChildOf: '',\n    childOfOptions: []\n  };\n\n  componentDidMount() {\n    if (this.props.smData.length > 0) {\n      this.processOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.smData, prevProps.smData)) {\n      this.processOptions();\n    }\n  }\n\n  clearFormValues() {\n    this.setState({\n      headingTitle: '',\n      headingChildOf: '',\n      childOfOptions: []\n    });\n  }\n\n  formIsValid() {\n    const { headingTitle } = this.state;\n    const titleValid = headingTitle && headingTitle.length > 0;\n\n    return titleValid;\n  }\n\n  getOptions() {\n    const rootHeader = structuralMetadataUtils.getItemsOfType(\n      'root',\n      this.props.smData\n    );\n    const divHeaders = structuralMetadataUtils.getItemsOfType(\n      'div',\n      this.props.smData\n    );\n    const allHeaders = rootHeader.concat(divHeaders);\n    const options = allHeaders.map(header => (\n      <option value={header.id} key={header.id}>\n        {header.label}\n      </option>\n    ));\n\n    return options;\n  }\n\n  handleCancelClick = () => {\n    this.props.toggleHeading();\n  };\n\n  handleChildOfChange = e => {\n    this.setState({ headingChildOf: e.target.value });\n  };\n\n  handleHeadingChange = e => {\n    this.setState({ headingTitle: e.target.value });\n  };\n\n  handleSubmit = e => {\n    const { headingChildOf, headingTitle } = this.state;\n    let submitItem = { headingChildOf, headingTitle };\n\n    e.preventDefault();\n\n    this.props.onSubmit(submitItem);\n\n    // Clear form\n    this.clearFormValues();\n  };\n\n  processOptions() {\n    const options = this.getOptions();\n    this.setState({ childOfOptions: options });\n  }\n\n  render() {\n    const { headingTitle } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <FormGroup\n          controlId=\"headingTitle\"\n          validationState={getValidationTitleState(headingTitle)}\n        >\n          <ControlLabel>Title</ControlLabel>\n          <FormControl\n            type=\"text\"\n            value={headingTitle}\n            onChange={this.handleHeadingChange}\n          />\n          <FormControl.Feedback />\n        </FormGroup>\n\n        <FormGroup controlId=\"headingChildOf\">\n          <ControlLabel>Child Of</ControlLabel>\n          <FormControl\n            componentClass=\"select\"\n            placeholder=\"select\"\n            onChange={this.handleChildOfChange}\n            value={this.state.headingChildOf}\n          >\n            <option value=\"\">Select...</option>\n            {this.state.childOfOptions}\n          </FormControl>\n        </FormGroup>\n        <Row>\n          <Col xs={12}>\n            <ButtonToolbar className=\"pull-right\">\n              <Button onClick={this.props.cancelClick}>Cancel</Button>\n              <Button\n                bsStyle=\"primary\"\n                type=\"submit\"\n                disabled={!this.formIsValid()}\n              >\n                Save\n              </Button>\n            </ButtonToolbar>\n          </Col>\n        </Row>\n      </form>\n    );\n  }\n}\n\nHeadingForm.propTypes = {\n  cancelClick: PropTypes.func,\n  onSubmit: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(HeadingForm);\n","import * as types from './types';\n\nexport function addHeading(values) {\n  return {\n    type: types.ADD_HEADING,\n    payload: values\n  };\n}\n\nexport function buildSMUI(json) {\n  return {\n    type: types.BUILD_SM_UI,\n    payload: json\n  };\n}\n\nexport function deleteItem(id) {\n  return {\n    type: types.DELETE_ITEM,\n    id\n  };\n}\n\nexport function addDropTargets(item) {\n  return {\n    type: types.ADD_DROP_TARGETS,\n    payload: item\n  };\n}\n\nexport function removeDropTargets() {\n  return {\n    type: types.REMOVE_DROP_TARGETS\n  };\n}\n\nexport function setActiveDragSource(id) {\n  return {\n    type: types.SET_ACTIVE_DRAG_SOURCE,\n    id\n  };\n}\n\nexport function removeActiveDragSources() {\n  return {\n    type: types.REMOVE_ACTIVE_DRAG_SOURCES\n  };\n}\n\nexport function handleListItemDrop(dragSource, dropTarget) {\n  return {\n    type: types.HANDLE_LIST_ITEM_DROP,\n    dragSource,\n    dropTarget\n  };\n}\n","import React, { Component } from 'react';\nimport HeadingForm from '../components/HeadingForm';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\nclass HeadingFormContainer extends Component {\n  state = {\n    message: null\n  };\n\n  submit = values => {\n    const { smData } = this.props;\n    let submittedItem = {\n      headingChildOf: values.headingChildOf,\n      headingTitle: values.headingTitle\n    };\n    let updatedSmData = null;\n\n    // Update the data structure with new heading\n    updatedSmData = structuralMetadataUtils.insertNewHeader(\n      submittedItem,\n      smData\n    );\n\n    // Update redux store\n    this.props.buildSMUI(updatedSmData);\n\n    // Close the form\n    this.props.cancelClick();\n  };\n\n  render() {\n    return <HeadingForm onSubmit={this.submit} cancelClick={this.props.cancelClick} />;\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: data => dispatch(smActions.buildSMUI(data))\n});\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HeadingFormContainer);\n","// Colors for segments from Avalon branding pallette\nconst COLOR_PALETTE = ['#80A590', '#2A5459', '#FBB040'];\n\nexport default class WaveformDataUtils {\n  /**\n   * Initialize Peaks instance for the app\n   * @param {Array} smData - current structured metadata from the server masterfile\n   */\n  initSegments(smData) {\n    let initSegments = [];\n    let count = 0;\n\n    // Recursively build segments for timespans in the structure\n    let createSegment = items => {\n      for (let item of items) {\n        if (item.type === 'span') {\n          count = count > 1 ? 0 : count;\n          const { begin, end, label, id } = item;\n          initSegments.push({\n            startTime: this.toMs(begin),\n            endTime: this.toMs(end),\n            labelText: label,\n            id: id,\n            color: COLOR_PALETTE[count]\n          });\n          count++;\n        }\n        if (item.items && item.items.length > 0) {\n          createSegment(item.items);\n        }\n      }\n    };\n\n    // Build segments from initial metadata structure\n    createSegment(smData);\n\n    return initSegments;\n  }\n\n  /**\n   * Add a new segment to Peaks when a new timespan is created\n   * @param {Object} newSpan - new span created for the user input\n   * @param {Object} peaksInstance - peaks instance for the waveform\n   */\n  insertNewSegment(newSpan, peaksInstance) {\n    const { begin, end, label, id } = newSpan;\n    peaksInstance.segments.add({\n      startTime: this.toMs(begin),\n      endTime: this.toMs(end),\n      labelText: label,\n      id: id\n    });\n\n    return peaksInstance;\n  }\n\n  /**\n   * Add a temporary segment to be edited when adding a new timespan to structure\n   * @param {Object} peaksInstance - peaks instance for the current waveform\n   */\n  insertTempSegment(peaksInstance) {\n    // Current time of the playhead\n    const currentTime = this.roundOff(peaksInstance.player.getCurrentTime());\n    // End time of the media file\n    const fileEndTime = this.roundOff(peaksInstance.player.getDuration());\n\n    let rangeEndTime,\n      rangeBeginTime = currentTime;\n\n    const currentSegments = this.sortSegments(peaksInstance, 'startTime');\n\n    // Validate start time of the temporary segment\n    currentSegments.map(segment => {\n      if (\n        rangeBeginTime >= segment.startTime &&\n        rangeBeginTime <= segment.endTime\n      ) {\n        // adds 0.01 to check consecutive segments with only a 0.01s difference\n        rangeBeginTime = segment.endTime + 0.01;\n      }\n      return rangeBeginTime;\n    });\n\n    // Set the default end time of the temporary segment\n    rangeEndTime = rangeBeginTime + 60;\n\n    // Validate end time of the temporary segment\n    currentSegments.map(segment => {\n      if (rangeBeginTime < segment.startTime) {\n        const segmentLength = segment.endTime - segment.startTime;\n        if (segmentLength < 60 && rangeEndTime >= segment.endTime) {\n          rangeEndTime = segment.startTime - 0.01;\n        }\n        if (\n          rangeEndTime >= segment.startTime &&\n          rangeEndTime < segment.endTime\n        ) {\n          rangeEndTime = segment.startTime - 0.01;\n        }\n      }\n      if (rangeEndTime > fileEndTime) {\n        rangeEndTime = fileEndTime;\n      }\n      return rangeEndTime;\n    });\n\n    if (rangeBeginTime < fileEndTime && rangeEndTime > rangeBeginTime) {\n      // Move playhead to start of the temporary segment\n      peaksInstance.player.seek(rangeBeginTime);\n\n      peaksInstance.segments.add({\n        startTime: rangeBeginTime,\n        endTime: rangeEndTime,\n        editable: true,\n        color: COLOR_PALETTE[2],\n        id: 'temp-segment'\n      });\n    }\n\n    return peaksInstance;\n  }\n\n  /**\n   * Delete the corresponding segment when a timespan is deleted\n   * @param {Object} item - item to be deleted\n   * @param {Object} peaksInstance - peaks instance for the current waveform\n   */\n  deleteSegments(item, peaksInstance) {\n    let deleteChildren = item => {\n      let children = item.items;\n      for (let child of children) {\n        if (child.type === 'span') {\n          peaksInstance.segments.removeById(child.id);\n        }\n        if (child.items && child.items.length > 0) {\n          deleteChildren(child);\n        }\n      }\n    };\n\n    if (item.type === 'div') {\n      deleteChildren(item);\n    }\n\n    peaksInstance.segments.removeById(item.id);\n    return peaksInstance;\n  }\n\n  /**\n   * Update the colors of the segment to alternate between colors in Avalon color pallette\n   * @param {Object} peaksInstance - current peaks instance for the waveform\n   */\n  rebuildPeaks(peaksInstance) {\n    let clonedSegments = this.sortSegments(peaksInstance, 'startTime');\n    peaksInstance.segments.removeAll();\n    clonedSegments.forEach((segment, index) => {\n      segment.color = this.isOdd(index) ? COLOR_PALETTE[1] : COLOR_PALETTE[0];\n      peaksInstance.segments.add(segment);\n    });\n\n    return peaksInstance;\n  }\n\n  /**\n   * Change color and add handles for editing the segment in the waveform\n   * @param {String} id - ID of the segment to be edited\n   * @param {Object} peaksInstance - current peaks instance for the waveform\n   */\n  activateSegment(id, peaksInstance) {\n    // Remove the current segment\n    const [removedSegment] = peaksInstance.segments.removeById(id);\n\n    // Create a new segment with the same properties and set editable to true\n    peaksInstance.segments.add({\n      ...removedSegment,\n      editable: true,\n      color: COLOR_PALETTE[2]\n    });\n\n    let startTime = peaksInstance.segments.getSegment(id).startTime;\n    // Move play head to the start time of the selected segment\n    peaksInstance.player.seek(startTime);\n\n    return peaksInstance;\n  }\n\n  /**\n   * Revert color and remove handles for editing of the segment\n   * @param {String} id - ID of the segment being saved\n   * @param {Object} peaksInstance - current peaks instance for the waveform\n   */\n  deactivateSegment(id, peaksInstance) {\n    // Sorted segments by start time\n    let segments = this.sortSegments(peaksInstance, 'startTime');\n\n    let index = segments.map(seg => seg.id).indexOf(id);\n\n    // Remove the current segment\n    const [removedSegment] = peaksInstance.segments.removeById(id);\n\n    // Create a new segment and revert to its original color\n    peaksInstance.segments.add({\n      ...removedSegment,\n      editable: false,\n      color: this.isOdd(index) ? COLOR_PALETTE[1] : COLOR_PALETTE[0]\n    });\n\n    return peaksInstance;\n  }\n\n  /**\n   * Save the segment into the Peaks\n   * @param {Object} currentState - current values for the timespan to be saved\n   * @param {Object} peaksInstance - current peaks instance for waveform\n   */\n  saveSegment(currentState, peaksInstance) {\n    const { beginTime, endTime, clonedSegment } = currentState;\n    peaksInstance.segments.removeById(clonedSegment.id);\n    peaksInstance.segments.add({\n      ...clonedSegment,\n      startTime: this.toMs(beginTime),\n      endTime: this.toMs(endTime)\n    });\n    return peaksInstance;\n  }\n\n  /**\n   * Reverse the changes made in peaks waveform when changes are cancelled\n   * @param {Object} clonedSegment - cloned segment before changing peaks waveform\n   * @param {Object} peaksInstance - current peaks instance for wavefrom\n   */\n  revertSegment(clonedSegment, peaksInstance) {\n    peaksInstance.segments.removeById(clonedSegment.id);\n    peaksInstance.segments.add(clonedSegment);\n    return peaksInstance;\n  }\n\n  /**\n   * Update Peaks instance when user changes the start and end times from the edit forms\n   * @param {Object} segment - segment related to timespan\n   * @param {Object} currentState - current begin and end times from the input form\n   * @param {Object} peaksInstance - current peaks instance for waveform\n   */\n  updateSegment(segment, currentState, peaksInstance) {\n    const { beginTime, endTime } = currentState;\n    let beginSeconds = this.toMs(beginTime);\n    let endSeconds = this.toMs(endTime);\n\n    if (beginSeconds < segment.endTime && segment.startTime !== beginSeconds) {\n      let [removed] = peaksInstance.segments.removeById(segment.id);\n      peaksInstance.segments.add({\n        ...removed,\n        startTime: beginSeconds\n      });\n      return peaksInstance;\n    }\n    if (endSeconds > segment.startTime && segment.endTime !== endSeconds) {\n      let [removed] = peaksInstance.segments.removeById(segment.id);\n      peaksInstance.segments.add({\n        ...removed,\n        endTime: endSeconds\n      });\n      return peaksInstance;\n    }\n    return peaksInstance;\n  }\n\n  /**\n   * Prevent the times of segment being edited overlapping with the existing segments\n   * @param {Object} segment - segement being edited in the waveform\n   * @param {Object} peaksInstance - current peaks instance for waveform\n   */\n  validateSegment(segment, peaksInstance) {\n    const allSegments = this.sortSegments(peaksInstance, 'startTime');\n    const wrapperSegments = this.findWrapperSegments(segment, allSegments);\n    const duration = this.roundOff(peaksInstance.player.getDuration());\n    const startTime = this.roundOff(segment.startTime);\n    const endTime = this.roundOff(segment.endTime);\n\n    if (\n      wrapperSegments.before !== null &&\n      startTime <= wrapperSegments.before.endTime\n    ) {\n      segment.startTime = wrapperSegments.before.endTime + 0.01;\n    }\n    if (\n      wrapperSegments.after !== null &&\n      endTime >= wrapperSegments.after.startTime\n    ) {\n      segment.endTime = wrapperSegments.after.startTime - 0.01;\n    }\n    if (wrapperSegments.after === null && endTime > duration) {\n      segment.endTime = duration;\n    }\n    return segment;\n  }\n\n  /**\n   * Find the before and after segments of a given segment\n   * @param {Object} currentSegment - current segment being added/edited\n   * @param {Array} allSegments - segments in the current peaks instance\n   */\n  findWrapperSegments(currentSegment, allSegments) {\n    let wrapperSegments = {\n      before: null,\n      after: null\n    };\n\n    let currentIndex = allSegments\n      .map(segment => segment.id)\n      .indexOf(currentSegment.id);\n\n    wrapperSegments.before =\n      currentIndex > 0 ? allSegments[currentIndex - 1] : null;\n    wrapperSegments.after =\n      currentIndex < allSegments.length - 1\n        ? allSegments[currentIndex + 1]\n        : null;\n\n    return wrapperSegments;\n  }\n\n  isOdd(num) {\n    return num % 2;\n  }\n\n  toMs(strTime) {\n    let [hours, minutes, seconds] = strTime.split(':');\n    let hoursAndMins = parseInt(hours) * 3600 + parseInt(minutes) * 60;\n    let secondsIn = seconds === '' ? 0.0 : parseFloat(seconds);\n    return hoursAndMins + secondsIn;\n  }\n\n  sortSegments(peaksInstance, sortBy) {\n    let allSegments = peaksInstance.segments.getSegments();\n    return allSegments.sort((x, y) => x[sortBy] - y[sortBy]);\n  }\n\n  roundOff(value) {\n    return Math.round(value * 100) / 100;\n  }\n}\n","import React, { Component } from 'react';\nimport {\n  Button,\n  ButtonToolbar,\n  Col,\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  Row\n} from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport {\n  getValidationBeginState,\n  getValidationEndState,\n  getValidationTitleState,\n  isTitleValid,\n  validTimespans\n} from '../services/form-helper';\nimport * as peaksActions from '../actions/peaks-instance';\nimport WaveformDataUtils from '../services/WaveformDataUtils';\nimport { isEqual } from 'lodash';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nconst waveformDataUtils = new WaveformDataUtils();\n\nclass TimespanForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      beginTime: '',\n      endTime: '',\n      timespanChildOf: '',\n      timespanTitle: '',\n      validHeadings: [],\n      isTyping: false\n    };\n    this.allSpans = null;\n  }\n\n  componentDidMount() {\n    const { smData } = this.props;\n    this.allSpans = structuralMetadataUtils.getItemsOfType('span', smData);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { smData } = this.props;\n    if (!isEqual(smData, prevProps.smData)) {\n      this.allSpans = structuralMetadataUtils.getItemsOfType('span', smData);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.timespanOpen && !this.state.isTyping) {\n      const { initSegment, isInitializing, peaksInstance, segment } = nextProps;\n\n      // Set state to get initial begin and end times from temporary segment\n      if (initSegment !== this.props.initSegment && isInitializing) {\n        const { startTime, endTime } = initSegment;\n        this.setState({\n          beginTime: structuralMetadataUtils.toHHmmss(startTime),\n          endTime: structuralMetadataUtils.toHHmmss(endTime)\n        });\n        this.props.updateInitialize(false);\n      }\n\n      // Update state when segment handles are dragged in the waveform\n      if (this.props.peaksInstance !== peaksInstance && !isInitializing) {\n        // Prevent from overlapping when dragging the handles\n        const { startTime, endTime } = waveformDataUtils.validateSegment(\n          segment,\n          peaksInstance.peaks\n        );\n        this.setState(\n          {\n            beginTime: structuralMetadataUtils.toHHmmss(startTime),\n            endTime: structuralMetadataUtils.toHHmmss(endTime)\n          },\n          this.updateChildOfOptions()\n        );\n      }\n    }\n  }\n\n  buildHeadingsOptions = () => {\n    const { smData } = this.props;\n    let newSpan = {\n      begin: this.state.beginTime,\n      end: this.state.endTime\n    };\n\n    // Get spans in overall span list which fall before and after the new span\n    let wrapperSpans = structuralMetadataUtils.findWrapperSpans(\n      newSpan,\n      this.allSpans\n    );\n\n    // Get all valid div headings\n    let validHeadings = structuralMetadataUtils.getValidHeadings(\n      wrapperSpans,\n      smData\n    );\n\n    // Update state with valid headings\n    this.setState({ validHeadings });\n  };\n\n  clearHeadingOptions = () => {\n    this.setState({\n      validHeadings: []\n    });\n  };\n\n  clearFormValues() {\n    this.setState({\n      beginTime: '',\n      endTime: '',\n      timespanChildOf: '',\n      timespanTitle: '',\n      validHeadings: [],\n      isTyping: false\n    });\n  }\n\n  formIsValid() {\n    const titleValid = isTitleValid(this.state.timespanTitle);\n    const childOfValid = this.state.timespanChildOf.length > 0;\n    const timesValidResponse = this.localValidTimespans();\n\n    return titleValid && childOfValid && timesValidResponse.valid;\n  }\n\n  handleInputChange = e => {\n    this.setState(\n      { [e.target.id]: e.target.value },\n      this.updateChildOfOptions()\n    );\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { beginTime, endTime, timespanChildOf, timespanTitle } = this.state;\n\n    this.props.cancelClick();\n    this.props.onSubmit({\n      beginTime,\n      endTime,\n      timespanChildOf,\n      timespanTitle\n    });\n\n    // Clear form values\n    this.clearFormValues();\n  };\n\n  handleTimeChange = (e, callback) => {\n    // Update waveform segment with user inputs in the form\n    this.setState({ isTyping: true });\n\n    this.setState({ [e.target.id]: e.target.value }, () => {\n      callback();\n      this.updateChildOfOptions();\n      const { initSegment, peaksInstance } = this.props;\n      let segment = peaksInstance.peaks.segments.getSegment(initSegment.id);\n      if (this.localValidTimespans().valid) {\n        this.props.updateSegment(segment, this.state);\n      }\n    });\n  };\n\n  handleCancelClick = () => {\n    this.props.cancelClick();\n  };\n\n  handleChildOfChange = e => {\n    this.setState({ timespanChildOf: e.target.value });\n  };\n\n  updateChildOfOptions() {\n    const timesValidResponse = this.localValidTimespans();\n\n    if (timesValidResponse.valid) {\n      this.buildHeadingsOptions();\n    } else {\n      this.clearHeadingOptions();\n    }\n  }\n\n  /**\n   * A local wrapper for the reusable function 'validTimespans'\n   */\n  localValidTimespans() {\n    const { beginTime, endTime } = this.state;\n    const { allSpans } = this;\n\n    return validTimespans(\n      beginTime,\n      endTime,\n      allSpans,\n      this.props.peaksInstance.peaks\n    );\n  }\n\n  render() {\n    const { beginTime, endTime, timespanChildOf, timespanTitle } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <FormGroup\n          controlId=\"timespanTitle\"\n          validationState={getValidationTitleState(timespanTitle)}\n        >\n          <ControlLabel>Title</ControlLabel>\n          <FormControl\n            type=\"text\"\n            value={timespanTitle}\n            onChange={this.handleInputChange}\n          />\n          <FormControl.Feedback />\n        </FormGroup>\n\n        <Row>\n          <Col sm={6}>\n            <FormGroup\n              controlId=\"beginTime\"\n              validationState={getValidationBeginState(\n                beginTime,\n                this.allSpans\n              )}\n            >\n              <ControlLabel>Begin Time</ControlLabel>\n              <FormControl\n                type=\"text\"\n                value={beginTime}\n                placeholder=\"00:00:00\"\n                onChange={e => {\n                  this.handleTimeChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n              <FormControl.Feedback />\n            </FormGroup>\n          </Col>\n          <Col sm={6}>\n            <FormGroup\n              controlId=\"endTime\"\n              validationState={getValidationEndState(\n                beginTime,\n                endTime,\n                this.allSpans,\n                this.props.peaksInstance.peaks\n              )}\n            >\n              <ControlLabel>End Time</ControlLabel>\n              <FormControl\n                type=\"text\"\n                value={endTime}\n                placeholder=\"00:00:00\"\n                onChange={e => {\n                  this.handleTimeChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n              <FormControl.Feedback />\n            </FormGroup>\n          </Col>\n        </Row>\n\n        <FormGroup controlId=\"timespanChildOf\">\n          <ControlLabel>Child Of</ControlLabel>\n          <FormControl\n            componentClass=\"select\"\n            placeholder=\"select\"\n            onChange={this.handleChildOfChange}\n            value={timespanChildOf}\n          >\n            <option value=\"\">Select...</option>\n            {this.state.validHeadings.map(item => (\n              <option value={item.id} key={item.id}>\n                {item.label}\n              </option>\n            ))}\n          </FormControl>\n        </FormGroup>\n\n        <Row>\n          <Col xs={12}>\n            <ButtonToolbar className=\"pull-right\">\n              <Button onClick={this.handleCancelClick}>Cancel</Button>\n              <Button\n                bsStyle=\"primary\"\n                type=\"submit\"\n                disabled={!this.formIsValid()}\n              >\n                Save\n              </Button>\n            </ButtonToolbar>\n          </Col>\n        </Row>\n      </form>\n    );\n  }\n}\n\n// For testing purposes\nexport { TimespanForm as PureTimespanForm };\n\nconst mapStateToProps = state => ({\n  smData: state.smData,\n  peaksInstance: state.peaksInstance,\n  segment: state.peaksInstance.segment\n});\n\nconst mapDispatchToProps = {\n  updateSegment: peaksActions.updateSegment\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimespanForm);\n","import React, { Component } from 'react';\nimport TimespanForm from '../components/TimespanForm';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport * as smActions from '../actions/sm-data';\nimport * as peaksActions from '../actions/peaks-instance';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nclass TimespanFormContainer extends Component {\n  state = {\n    message: null\n  };\n\n  submit = values => {\n    // Update the data structure with new heading\n    const { newSpan, updatedData } = structuralMetadataUtils.insertNewTimespan(\n      values,\n      this.props.smData\n    );\n\n    // Update the waveform segments with new timespan\n    this.props.insertNewSegment(newSpan);\n\n    // Update redux store\n    this.props.buildSMUI(updatedData);\n\n    // Close the form\n    this.props.cancelClick();\n  };\n\n  render() {\n    return <TimespanForm {...this.props} onSubmit={this.submit} />;\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: data => dispatch(smActions.buildSMUI(data)),\n  insertNewSegment: newspan => dispatch(peaksActions.insertNewSegment(newspan))\n});\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimespanFormContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Collapse, Row } from 'react-bootstrap';\nimport HeadingFormContainer from '../containers/HeadingFormContainer';\nimport TimespanFormContainer from '../containers/TimespanFormContainer';\nimport * as peaksActions from '../actions/peaks-instance';\nimport { configureAlert } from '../services/alert-status';\nimport AlertContainer from '../containers/AlertContainer';\nimport { handleEditingTimespans } from '../actions/forms';\n\nconst styles = {\n  section: {\n    margin: '4rem 0'\n  },\n  well: {\n    marginTop: '1rem'\n  }\n};\n\nclass ButtonSection extends Component {\n  state = {\n    headingOpen: false,\n    timespanOpen: false,\n    initSegment: null,\n    isInitializing: true,\n    alertObj: null,\n    disabled: true\n  };\n\n  updateInitializeFlag = value => {\n    this.setState({\n      isInitializing: value\n    });\n  };\n\n  clearAlert = () => {\n    this.setState({\n      alertObj: null,\n      disabled: true\n    });\n    // Clear the redux-store flag when closing the alert from AlertContainer\n    this.props.handleEditingTimespans(1);\n  };\n\n  handleCancelHeadingClick = () => {\n    this.setState({ headingOpen: false });\n    this.clearAlert();\n  };\n\n  handleHeadingClick = () => {\n    this.props.handleEditingTimespans(0);\n    // When opening heading form, delete if a temporary segment exists\n    this.deleteTempSegment();\n    this.setState({\n      alertObj: null,\n      headingOpen: true,\n      timespanOpen: false,\n      disabled: false\n    });\n  };\n\n  handleCancelTimespanClick = () => {\n    this.deleteTempSegment();\n    this.setState({ timespanOpen: false });\n    this.clearAlert();\n  };\n\n  handleTimeSpanClick = () => {\n    // Disable editing other items in structure\n    this.props.handleEditingTimespans(0);\n\n    // Create a temporary segment if timespan form is closed\n    if (!this.state.timespanOpen) {\n      this.props.createTempSegment();\n    }\n    const tempSegment = this.props.peaksInstance.peaks.segments.getSegment(\n      'temp-segment'\n    );\n    if (tempSegment === null) {\n      this.setState({\n        alertObj: configureAlert(-4, this.clearAlert),\n        headingOpen: false,\n        disabled: false\n      });\n    } else {\n      this.props.handleEditingTimespans(0);\n      this.setState({\n        initSegment: tempSegment,\n        headingOpen: false,\n        timespanOpen: true,\n        isInitializing: true,\n        disabled: false\n      });\n    }\n  };\n\n  // Delete if a temporary segment exists\n  deleteTempSegment = () => {\n    if (this.state.initSegment !== null) {\n      this.props.deleteTempSegment(this.state.initSegment.id);\n    }\n  };\n\n  render() {\n    const timespanFormProps = {\n      cancelClick: this.handleCancelTimespanClick,\n      initSegment: this.state.initSegment,\n      isInitializing: this.state.isInitializing,\n      timespanOpen: this.state.timespanOpen,\n      updateInitialize: this.updateInitializeFlag\n    };\n\n    const { structureRetrieved, waveformRetrieved } = this.props.forms;\n    const waveformAndStructureValid = structureRetrieved && waveformRetrieved;\n\n    return waveformAndStructureValid ? (\n      <section style={styles.section}>\n        <AlertContainer {...this.state.alertObj} />\n        <Row>\n          <Col xs={6}>\n            <Button\n              block\n              onClick={this.handleHeadingClick}\n              disabled={this.state.disabled && this.props.forms.editingDisabled}\n            >\n              Add a Heading\n            </Button>\n          </Col>\n          <Col xs={6}>\n            <Button\n              block\n              onClick={this.handleTimeSpanClick}\n              disabled={this.state.disabled && this.props.forms.editingDisabled}\n            >\n              Add a Timespan\n            </Button>\n          </Col>\n        </Row>\n\n        <Collapse in={this.state.headingOpen}>\n          <div className=\"well\" style={styles.well}>\n            <HeadingFormContainer cancelClick={this.handleCancelHeadingClick} />\n          </div>\n        </Collapse>\n        <Collapse in={this.state.timespanOpen}>\n          <div className=\"well\" style={styles.well}>\n            <TimespanFormContainer {...timespanFormProps} />\n          </div>\n        </Collapse>\n      </section>\n    ) : null;\n  }\n}\n\n// To use in tests as a disconnected component (to access state)\nexport { ButtonSection as PureButtonSection };\n\nconst mapStateToProps = state => ({\n  smData: state.smData,\n  peaksInstance: state.peaksInstance,\n  forms: state.forms\n});\n\nconst mapDispatchToProps = {\n  createTempSegment: peaksActions.insertTempSegment,\n  deleteTempSegment: peaksActions.deleteTempSegment,\n  handleEditingTimespans: handleEditingTimespans\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ButtonSection);\n","export const ItemTypes = {\n  SPAN: 'span'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst tooltip = tip => <Tooltip id=\"tooltip\">{tip}</Tooltip>;\n\nconst ListItemInlineEditControls = props => {\n  return (\n    <div className=\"edit-controls-wrapper\">\n      <OverlayTrigger placement=\"left\" overlay={tooltip('Save')}>\n        <Button\n          bsStyle=\"link\"\n          disabled={!props.formIsValid}\n          onClick={props.handleSaveClick}\n        >\n          <FontAwesomeIcon icon=\"save\" />\n        </Button>\n      </OverlayTrigger>\n      <OverlayTrigger\n        placement=\"right\"\n        overlay={tooltip('Cancel')}\n        onClick={props.handleCancelClick}\n      >\n        <Button bsStyle=\"link\">\n          <FontAwesomeIcon icon=\"minus-circle\" />\n        </Button>\n      </OverlayTrigger>\n    </div>\n  );\n};\n\nListItemInlineEditControls.propTypes = {\n  formIsValid: PropTypes.bool,\n  handleSaveClick: PropTypes.func,\n  handleCancelClick: PropTypes.func\n};\n\nexport default ListItemInlineEditControls;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ControlLabel, Form, FormControl, FormGroup } from 'react-bootstrap';\nimport {\n  getExistingFormValues,\n  getValidationBeginState,\n  getValidationEndState,\n  getValidationTitleState,\n  isTitleValid,\n  validTimespans\n} from '../services/form-helper';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport { cloneDeep } from 'lodash';\nimport ListItemInlineEditControls from './ListItemInlineEditControls';\nimport * as peaksActions from '../actions/peaks-instance';\nimport WaveformDataUtils from '../services/WaveformDataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nconst waveformUtils = new WaveformDataUtils();\n\nconst styles = {\n  formControl: {\n    margin: '0 5px'\n  }\n};\n\nclass TimespanInlineForm extends Component {\n  constructor(props) {\n    super(props);\n\n    // To implement validation logic on begin and end times, we need to remove the current item\n    // from the stored data\n    this.tempSmData = undefined;\n  }\n\n  static propTypes = {\n    item: PropTypes.object,\n    cancelFn: PropTypes.func,\n    saveFn: PropTypes.func\n  };\n\n  state = {\n    beginTime: '',\n    endTime: '',\n    timespanTitle: '',\n    clonedSegment: {},\n    isTyping: false\n  };\n\n  componentDidMount() {\n    const { smData, item, peaksInstance } = this.props;\n\n    // Get a fresh copy of store data\n    this.tempSmData = cloneDeep(smData);\n\n    // Load existing form values\n    this.setState(\n      getExistingFormValues(item.id, this.tempSmData, peaksInstance.peaks)\n    );\n\n    // Remove current list item from the data we're doing validation against in this form\n    this.tempSmData = structuralMetadataUtils.deleteListItem(\n      item.id,\n      this.tempSmData\n    );\n\n    // Save a reference to all the spans for future calculations\n    this.allSpans = structuralMetadataUtils.getItemsOfType(\n      'span',\n      this.tempSmData\n    );\n\n    // Make segment related to timespan editable\n    this.props.activateSegment(item.id);\n\n    this.props.changeSegment();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.peaksInstance !== nextProps.peaksInstance) {\n      if (nextProps.segment && !this.state.isTyping) {\n        const { segment, peaksInstance } = nextProps;\n        // Prevent from overlapping when dragging the handles\n        const { startTime, endTime } = waveformUtils.validateSegment(\n          segment,\n          peaksInstance.peaks\n        );\n        this.setState({\n          beginTime: structuralMetadataUtils.toHHmmss(startTime),\n          endTime: structuralMetadataUtils.toHHmmss(endTime)\n        });\n      }\n    }\n  }\n\n  formIsValid() {\n    const { beginTime, endTime } = this.state;\n    const titleValid = isTitleValid(this.state.timespanTitle);\n    const timesValidResponse = validTimespans(\n      beginTime,\n      endTime,\n      this.allSpans,\n      this.props.peaksInstance.peaks\n    );\n\n    return titleValid && timesValidResponse.valid;\n  }\n\n  handleCancelClick = () => {\n    // Revert to segment to the state before\n    this.props.revertSegment(this.state.clonedSegment);\n    this.props.cancelFn();\n  };\n\n  handleInputChange = (e, callback) => {\n    this.setState({ isTyping: true });\n    this.setState({ [e.target.id]: e.target.value }, () => {\n      callback();\n      const { item, peaksInstance } = this.props;\n      let segment = peaksInstance.peaks.segments.getSegment(item.id);\n      if (this.formIsValid()) {\n        this.props.updateSegment(segment, this.state);\n      }\n    });\n  };\n\n  handleSaveClick = () => {\n    this.props.saveSegment(this.state);\n    const { beginTime, endTime, timespanTitle } = this.state;\n    this.props.saveFn(this.props.item.id, {\n      beginTime,\n      endTime,\n      timespanTitle\n    });\n  };\n\n  render() {\n    const { beginTime, endTime, timespanTitle } = this.state;\n\n    return (\n      <Form inline>\n        <div className=\"row-wrapper\">\n          <div>\n            <FormGroup\n              controlId=\"timespanTitle\"\n              validationState={getValidationTitleState(timespanTitle)}\n            >\n              <ControlLabel>Title</ControlLabel>\n              <FormControl\n                type=\"text\"\n                style={styles.formControl}\n                value={timespanTitle}\n                onChange={e => {\n                  this.handleInputChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n            </FormGroup>\n            <FormGroup\n              controlId=\"beginTime\"\n              validationState={getValidationBeginState(\n                beginTime,\n                this.allSpans\n              )}\n            >\n              <ControlLabel>Begin Time</ControlLabel>\n              <FormControl\n                type=\"text\"\n                style={styles.formControl}\n                value={beginTime}\n                onChange={e => {\n                  this.handleInputChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n            </FormGroup>\n            <FormGroup\n              controlId=\"endTime\"\n              validationState={getValidationEndState(\n                beginTime,\n                endTime,\n                this.allSpans,\n                this.props.peaksInstance.peaks\n              )}\n            >\n              <ControlLabel>End Time</ControlLabel>\n              <FormControl\n                type=\"text\"\n                style={styles.formControl}\n                value={endTime}\n                onChange={e => {\n                  this.handleInputChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n            </FormGroup>\n          </div>\n          <ListItemInlineEditControls\n            formIsValid={this.formIsValid()}\n            handleSaveClick={this.handleSaveClick}\n            handleCancelClick={this.handleCancelClick}\n          />\n        </div>\n      </Form>\n    );\n  }\n}\n\n// For testing purposes\nexport { TimespanInlineForm as PureTimespanInlineForm };\n\nconst mapStateToProps = state => ({\n  smData: state.smData,\n  peaksInstance: state.peaksInstance,\n  segment: state.peaksInstance.segment\n});\n\nconst mapDispatchToProps = {\n  activateSegment: peaksActions.activateSegment,\n  revertSegment: peaksActions.revertSegment,\n  saveSegment: peaksActions.saveSegment,\n  updateSegment: peaksActions.updateSegment,\n  changeSegment: peaksActions.changeSegment\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimespanInlineForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ControlLabel, Form, FormControl, FormGroup } from 'react-bootstrap';\nimport {\n  getExistingFormValues,\n  getValidationTitleState,\n  isTitleValid\n} from '../services/form-helper';\nimport { connect } from 'react-redux';\nimport { cloneDeep } from 'lodash';\nimport ListItemInlineEditControls from './ListItemInlineEditControls';\n\nconst styles = {\n  formControl: {\n    margin: '0 5px',\n    width: '300px'\n  }\n};\n\nclass HeadingInlineForm extends Component {\n  constructor(props) {\n    super(props);\n\n    // To implement validation logic on begin and end times, we need to remove the current item\n    // from the stored data\n    this.tempSmData = undefined;\n  }\n\n  static propTypes = {\n    item: PropTypes.object,\n    cancelFn: PropTypes.func,\n    saveFn: PropTypes.func\n  };\n\n  state = {\n    headingTitle: ''\n  };\n\n  componentDidMount() {\n    const { smData } = this.props;\n\n    // Get a fresh copy of store data\n    this.tempSmData = cloneDeep(smData);\n\n    // Load existing form values\n    this.setState(getExistingFormValues(this.props.item.id, this.tempSmData));\n  }\n\n  formIsValid() {\n    return isTitleValid(this.state.headingTitle);\n  }\n\n  handleCancelClick = () => {\n    this.props.cancelFn();\n  };\n\n  handleInputChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  handleSaveClick = () => {\n    const { headingTitle } = this.state;\n    this.props.saveFn(this.props.item.id, {\n      headingTitle\n    });\n  };\n\n  render() {\n    const { headingTitle } = this.state;\n\n    return (\n      <Form inline>\n        <div className=\"row-wrapper\">\n          <div>\n            <FormGroup\n              controlId=\"headingTitle\"\n              validationState={getValidationTitleState(headingTitle)}\n            >\n              <ControlLabel>Title</ControlLabel>\n              <FormControl\n                type=\"text\"\n                style={styles.formControl}\n                value={headingTitle}\n                onChange={this.handleInputChange}\n              />\n            </FormGroup>\n          </div>\n          <ListItemInlineEditControls\n            formIsValid={this.formIsValid()}\n            handleSaveClick={this.handleSaveClick}\n            handleCancelClick={this.handleCancelClick}\n          />\n        </div>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(mapStateToProps)(HeadingInlineForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TimespanInlineForm from './TimespanInlineForm';\nimport HeadingInlineForm from './HeadingInlineForm';\nimport { buildSMUI } from '../actions/sm-data';\nimport { cloneDeep } from 'lodash';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\nclass ListItemEditForm extends Component {\n  constructor(props) {\n    super(props);\n    this.type = this.props.item.type;\n    this.id = this.props.item.id;\n  }\n\n  static propTypes = {\n    handleEditFormCancel: PropTypes.func,\n    item: PropTypes.object.isRequired\n  };\n\n  addUpdatedValues(item, payload) {\n    if (item.type === 'div' || item.type === 'root') {\n      item.label = payload.headingTitle;\n    } else if (item.type === 'span') {\n      item.label = payload.timespanTitle;\n      item.begin = payload.beginTime;\n      item.end = payload.endTime;\n    }\n    return item;\n  }\n\n  handleCancelClick = e => {\n    this.props.handleEditFormCancel();\n  };\n\n  handleSaveClick = (id, payload) => {\n    // Clone smData\n    let clonedItems = cloneDeep(this.props.smData);\n\n    // Get the original item\n    /* eslint-disable */\n    let item = structuralMetadataUtils.findItem(id, clonedItems);\n    /* eslint-enable */\n\n    // Update item values\n    item = this.addUpdatedValues(item, payload);\n\n    // Send updated smData back to redux\n    this.props.buildSMUI(clonedItems);\n\n    // Turn off editing state\n    this.props.handleEditFormCancel();\n  };\n\n  render() {\n    const { item } = this.props;\n\n    if (item.type === 'span') {\n      return (\n        <TimespanInlineForm\n          item={item}\n          cancelFn={this.handleCancelClick}\n          saveFn={this.handleSaveClick}\n        />\n      );\n    }\n\n    if (item.type === 'div' || item.type === 'root') {\n      return (\n        <HeadingInlineForm\n          item={item}\n          cancelFn={this.handleCancelClick}\n          saveFn={this.handleSaveClick}\n        />\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nconst mapDispathToProps = dispatch => ({\n  buildSMUI: json => dispatch(buildSMUI(json))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispathToProps\n)(ListItemEditForm);\n","import React, { Component } from 'react';\nimport { Button, ButtonToolbar, Overlay, Popover } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { connect } from 'react-redux';\nimport { handleEditingTimespans } from '../actions/forms';\n\nconst styles = {\n  buttonToolbar: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  popover: {\n    width: '250px',\n    height: 'auto'\n  }\n};\n\nclass ListItemControls extends Component {\n  static propTypes = {\n    handleShowDropTargetsClick: PropTypes.func,\n    handleEditClick: PropTypes.func,\n    handleDelete: PropTypes.func,\n    item: PropTypes.shape({\n      childrenCount: PropTypes.number,\n      label: PropTypes.string.isRequired,\n      type: PropTypes.string\n    })\n  };\n\n  state = {\n    deleteMessage: '',\n    showDeleteConfirm: false,\n    target: null\n  };\n\n  enableEditing() {\n    // Enable editing of other list items\n    this.props.handleEditingTimespans(1);\n  }\n\n  handleConfirmDelete = () => {\n    this.props.handleDelete();\n    this.enableEditing();\n    this.setState({ deleteMessage: '', showDeleteConfirm: false });\n  };\n\n  handleDeleteClick = e => {\n    const { childrenCount, label } = this.props.item;\n    let deleteMessage = `Are you sure you'd like to delete <strong>${label}</strong>`;\n\n    if (childrenCount > 0) {\n      deleteMessage += ` and it's <strong>${childrenCount}</strong> child items`;\n    }\n    deleteMessage += `?`;\n\n    // Disable editing of other list items\n    this.props.handleEditingTimespans(0);\n\n    this.setState({\n      deleteMessage,\n      showDeleteConfirm: true,\n      target: e.target\n    });\n  };\n\n  cancelDeleteClick = e => {\n    this.enableEditing();\n    this.setState({\n      showDeleteConfirm: false\n    });\n  };\n\n  render() {\n    const {\n      handleShowDropTargetsClick,\n      handleEditClick,\n      item,\n      forms\n    } = this.props;\n    const { deleteMessage, showDeleteConfirm } = this.state;\n\n    return (\n      <div className=\"edit-controls-wrapper\">\n        {item.type === 'span' && (\n          <Button\n            bsStyle=\"link\"\n            disabled={forms.editingDisabled}\n            onClick={handleShowDropTargetsClick}\n          >\n            <FontAwesomeIcon icon=\"dot-circle\" />\n          </Button>\n        )}\n        <Button\n          bsStyle=\"link\"\n          onClick={handleEditClick}\n          disabled={forms.editingDisabled}\n        >\n          <FontAwesomeIcon icon=\"pen\" />\n        </Button>\n\n        {item.type !== 'root' && (\n          <>\n            <Button\n              bsStyle=\"link\"\n              onClick={this.handleDeleteClick}\n              disabled={forms.editingDisabled}\n            >\n              <FontAwesomeIcon icon=\"trash\" />\n            </Button>\n            <Overlay\n              show={showDeleteConfirm}\n              target={this.state.target}\n              placement=\"left\"\n              container={this}\n            >\n              <Popover\n                id=\"popover-contained\"\n                title=\"Confirm delete?\"\n                style={styles.popover}\n              >\n                <p dangerouslySetInnerHTML={{ __html: deleteMessage }} />\n                <ButtonToolbar style={styles.buttonToolbar}>\n                  <Button\n                    bsStyle=\"danger\"\n                    bsSize=\"xsmall\"\n                    onClick={this.handleConfirmDelete}\n                  >\n                    Delete\n                  </Button>\n                  <Button bsSize=\"xsmall\" onClick={this.cancelDeleteClick}>\n                    Cancel\n                  </Button>\n                </ButtonToolbar>\n              </Popover>\n            </Overlay>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  handleEditingTimespans: code => dispatch(handleEditingTimespans(code))\n});\n\nconst mapStateToProps = state => ({\n  forms: state.forms\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ListItemControls);\n","import React, { Component } from 'react';\nimport List from './List';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\nimport * as peaksActions from '../actions/peaks-instance';\nimport * as forms from '../actions/forms';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../services/Constants';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport ListItemEditForm from './ListItemEditForm';\nimport ListItemControls from './ListItemControls';\n\nconst spanSource = {\n  beginDrag(props) {\n    return { id: props.item.id };\n  }\n};\n\nconst spanTarget = {\n  canDrop(props, monitor) {\n    // You can disallow drop based on props or item\n    return true;\n  }\n};\n\nfunction collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    // You can ask the monitor about the current drag state:\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({ shallow: true }),\n    canDrop: monitor.canDrop(),\n    itemType: monitor.getItemType()\n  };\n}\n\nclass ListItem extends Component {\n  static propTypes = {\n    item: PropTypes.shape({\n      active: PropTypes.bool,\n      begin: PropTypes.string,\n      end: PropTypes.string,\n      items: PropTypes.array,\n      id: PropTypes.string,\n      type: PropTypes.string,\n      editing: PropTypes.bool\n    })\n  };\n\n  state = {\n    editing: false\n  };\n\n  handleDelete = () => {\n    const { item } = this.props;\n    this.props.deleteItem(item.id);\n    this.props.deleteSegment(item);\n  };\n\n  handleEditClick = () => {\n    // Disable the edit buttons of other list items\n    this.props.handleEditingTimespans(0);\n\n    this.setState({ editing: true });\n  };\n\n  handleEditFormCancel = () => {\n    this.setState({ editing: false });\n\n    // Enable the edit buttons of other list items\n    this.props.handleEditingTimespans(1);\n  };\n\n  handleShowDropTargetsClick = () => {\n    const {\n      addDropTargets,\n      item,\n      removeActiveDragSources,\n      removeDropTargets,\n      setActiveDragSource\n    } = this.props;\n\n    // Clear out any current drop targets\n    removeDropTargets();\n\n    // Handle closing of current drag source drop targets, and exit with a clean UI.\n    if (item.active === true) {\n      // Clear out any active drag sources\n      removeActiveDragSources();\n      return;\n    }\n    // Clear out any active drag sources\n    removeActiveDragSources();\n\n    // Calculate possible drop targets\n    addDropTargets(item);\n\n    // Redux way of setting active drag list item\n    setActiveDragSource(item.id);\n  };\n\n  render() {\n    const {\n      item,\n      item: { begin },\n      item: { end },\n      item: { items },\n      item: { label },\n      item: { type },\n      item: { active },\n      connectDragSource,\n      connectDropTarget\n    } = this.props;\n\n    const subMenu = items && items.length > 0 ? <List items={items} /> : null;\n    const itemProp = {\n      childrenCount: item.items ? item.items.length : 0,\n      label: item.label,\n      type: item.type\n    };\n\n    return connectDragSource(\n      connectDropTarget(\n        <li className={active ? 'active' : ''}>\n          {this.state.editing && (\n            <ListItemEditForm\n              item={item}\n              handleEditFormCancel={this.handleEditFormCancel}\n            />\n          )}\n\n          {!this.state.editing && (\n            <div className=\"row-wrapper\">\n              {type === 'span' && (\n                <span className=\"structure-title\">\n                  {label} ({begin} - {end})\n                </span>\n              )}\n              {(type === 'div' || type === 'root') && (\n                <div className=\"structure-title heading\">{label}</div>\n              )}\n              <ListItemControls\n                handleDelete={this.handleDelete}\n                handleEditClick={this.handleEditClick}\n                item={itemProp}\n                handleShowDropTargetsClick={this.handleShowDropTargetsClick}\n              />\n            </div>\n          )}\n\n          {subMenu}\n        </li>\n      )\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteItem: smActions.deleteItem,\n  addDropTargets: smActions.addDropTargets,\n  removeDropTargets: smActions.removeDropTargets,\n  removeActiveDragSources: smActions.removeActiveDragSources,\n  setActiveDragSource: smActions.setActiveDragSource,\n  deleteSegment: peaksActions.deleteSegment,\n  handleEditingTimespans: forms.handleEditingTimespans\n};\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nconst ConnectedDropTarget = DropTarget(ItemTypes.SPAN, spanTarget, collectDrop);\nconst ConnectedDragSource = DragSource(ItemTypes.SPAN, spanSource, collectDrag);\nconst DragConnected = ConnectedDropTarget(ConnectedDragSource(ListItem));\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DragConnected);\n","import React, { Component } from 'react';\nimport { DropTarget } from 'react-dnd';\nimport { ItemTypes } from '../services/Constants';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\n\nconst styles = {\n  li: {\n    border: '2px #999 dashed',\n    opacity: 0.3\n  },\n  liHovered: {\n    border: '5px #999 dashed',\n    opacity: 0.5\n  }\n};\n\nconst optionalTarget = {\n  hover(props, monitor, component) {\n    //console.log('hover over drop target');\n  },\n\n  drop(props, monitor, component) {\n    let dragItem = monitor.getItem();\n\n    props.handleListItemDrop(dragItem, props.item);\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDropTarget: connect.dropTarget(),\n    // You can ask the monitor about the current drag state:\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({ shallow: true }),\n    canDrop: monitor.canDrop(),\n    itemType: monitor.getItemType()\n  };\n}\n\nclass PlaceholderItem extends Component {\n  render() {\n    const { isOver, connectDropTarget } = this.props;\n\n    return connectDropTarget(\n      <li className=\"row-wrapper\" style={isOver ? styles.liHovered : styles.li}>\n        Drop here\n      </li>\n    );\n  }\n}\n\nconst ConnectedDropTarget = DropTarget(ItemTypes.SPAN, optionalTarget, collect)(\n  PlaceholderItem\n);\n\nconst mapDispatchToProps = dispatch => ({\n  handleListItemDrop: (dragItem, dropItem) =>\n    dispatch(smActions.handleListItemDrop(dragItem, dropItem))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ConnectedDropTarget);\n","import React from 'react';\nimport ListItem from './ListItem';\nimport PlaceholderItem from './PlaceholderItem';\n\nconst List = props => {\n  return (\n    <ul className=\"structure-list\">\n      {props.items.map((item, i) => {\n        if (!item) {\n          return null;\n        }\n        if (item.type === 'optional') {\n          return <PlaceholderItem key={i} item={item} />;\n        }\n        return <ListItem key={item.id} item={item} />;\n      })}\n    </ul>\n  );\n};\n\nexport default List;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport List from '../components/List';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport APIUtils from '../api/Utils';\nimport AlertContainer from './AlertContainer';\nimport { configureAlert } from '../services/alert-status';\nimport uuidv1 from 'uuid/v1';\nimport { cloneDeep } from 'lodash';\nimport { buildSMUI } from '../actions/sm-data';\nimport { handleStructureMasterFile } from '../actions/forms';\n\nclass StructureOutputContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.apiUtils = new APIUtils();\n  }\n  state = {\n    alertObj: {}\n  };\n\n  async componentDidMount() {\n    try {\n      const response = await this.apiUtils.getRequest('structure.json');\n\n      // Add unique ids to every object\n      let smData = this.addIds([response.data]);\n\n      // Tag the root element\n      this.markRootElement(smData);\n\n      // Update the redux store\n      this.props.buildSMUI(smData);\n\n      // Update redux-store flag for structure file retrieval\n      this.props.handleStructureFile(0);\n    } catch (error) {\n      console.log('TCL: StructureOutputContainer -> }catch -> error', error);\n      this.handleFetchError(error);\n    }\n  }\n\n  /**\n   * This function adds a unique, front-end only id, to every object in the data structure\n   * @param {Array} structureJS\n   * @returns {Array}\n   */\n  addIds(structureJS) {\n    let structureWithIds = cloneDeep(structureJS);\n\n    // Recursively loop through data structure\n    let fn = items => {\n      for (let item of items) {\n        // Create and add an id\n        item.id = uuidv1();\n\n        // Send child items back into the function\n        if (item.items && item.items.length > 0) {\n          fn(item.items);\n        }\n      }\n    };\n\n    fn(structureWithIds);\n\n    return structureWithIds;\n  }\n\n  markRootElement(smData) {\n    if (smData.length > 0) {\n      smData[0].type = 'root';\n    }\n  }\n\n  clearAlert = () => {\n    this.setState({\n      alertObj: null\n    });\n  };\n\n  handleFetchError(error) {\n    let status = error.response !== undefined ? error.response.status : -2;\n    const alertObj = configureAlert(status, this.clearAlert);\n\n    this.setState({ alertObj });\n  }\n\n  handleSaveError(error) {\n    console.log('TCL: handleSaveError -> error', error);\n    let status =\n      error.response !== undefined\n        ? error.response.status\n        : error.request.status;\n    const alertObj = configureAlert(status, this.clearAlert);\n\n    this.setState({ alertObj });\n  }\n\n  handleSaveItClick = () => {\n    let postData = { json: this.props.smData[0] };\n    this.apiUtils\n      .postRequest('structure.json', postData)\n      .then(response => {\n        const { status } = response;\n        const alertObj = configureAlert(status, this.clearAlert);\n\n        this.setState({ alertObj });\n      })\n      .catch(error => {\n        this.handleSaveError(error);\n      });\n  };\n\n  render() {\n    const { smData = [], forms } = this.props;\n    const { alertObj } = this.state;\n\n    return (\n      <section>\n        {!forms.structureRetrieved ? (\n          <AlertContainer {...alertObj} />\n        ) : (\n          <div>\n            <h3>HTML Structure Tree from a masterfile in server</h3>\n            <AlertContainer {...alertObj} />\n            <br />\n            <List items={smData} />\n            <Row>\n              <Col xs={12} className=\"text-right\">\n                <Button bsStyle=\"primary\" onClick={this.handleSaveItClick}>\n                  Save Structure\n                </Button>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\n// For testing purposes\nexport { StructureOutputContainer as PureStructureOutputContainer };\n\nconst mapStateToProps = state => ({\n  smData: state.smData,\n  forms: state.forms\n});\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: smData => dispatch(buildSMUI(smData)),\n  handleStructureFile: code => dispatch(handleStructureMasterFile(code))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StructureOutputContainer);\n","import React, { Component } from 'react';\nimport './App.css';\nimport WaveformContainer from './containers/WaveformContainer';\nimport ButtonSection from './components/ButtonSection';\nimport StructureOutputContainer from './containers/StructureOutputContainer';\nimport { DragDropContextProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\n// Font Awesome Imports\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faDotCircle,\n  faMinusCircle,\n  faPen,\n  faSave,\n  faTrash\n} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faDotCircle, faMinusCircle, faPen, faSave, faTrash);\n\nclass App extends Component {\n  render() {\n    return (\n      <DragDropContextProvider backend={HTML5Backend}>\n        <div className=\"container\">\n          <h1>Test Structural Metadata Editor</h1>\n          <WaveformContainer />\n          <ButtonSection />\n          <StructureOutputContainer />\n        </div>\n      </DragDropContextProvider>\n    );\n  }\n}\n\nexport default App;\n","import * as types from '../actions/types';\n\nconst initialState = {\n  editingDisabled: false,\n  structureRetrieved: false,\n  waveformRetrieved: false\n};\n\nconst forms = (state = initialState, action) => {\n  switch (action.type) {\n    case types.IS_EDITING_TIMESPAN:\n      if (action.code === 0) {\n        return Object.assign({}, state, {\n          editingDisabled: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        editingDisabled: false\n      });\n\n    case types.RETRIEVED_STRUCTURE:\n      if (action.code === 0) {\n        return Object.assign({}, state, {\n          structureRetrieved: true\n        });\n      }\n      break;\n\n    case types.RETRIEVED_WAVEFORM:\n      if (action.code === 0) {\n        return Object.assign({}, state, {\n          waveformRetrieved: true\n        });\n      }\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default forms;\n","import * as types from '../actions/types';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport { cloneDeep } from 'lodash';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nconst initialState = [];\nlet stateClone = null;\nlet newState = null;\n\nconst smData = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_HEADING:\n      stateClone = cloneDeep(state);\n      stateClone.push(action.payload);\n      return stateClone;\n\n    case types.BUILD_SM_UI:\n      return action.payload;\n\n    case types.DELETE_ITEM:\n      return structuralMetadataUtils.deleteListItem(action.id, state);\n\n    case types.ADD_DROP_TARGETS:\n      newState = structuralMetadataUtils.determineDropTargets(\n        action.payload,\n        state\n      );\n      return newState;\n\n    case types.REMOVE_DROP_TARGETS:\n      let noDropTargetsState = structuralMetadataUtils.removeDropTargets(state);\n      return noDropTargetsState;\n\n    case types.SET_ACTIVE_DRAG_SOURCE:\n      stateClone = cloneDeep(state);\n      let target = structuralMetadataUtils.findItem(action.id, stateClone);\n      // Put an active flag on list item\n      target.active = true;\n      return stateClone;\n\n    case types.REMOVE_ACTIVE_DRAG_SOURCES:\n      let noActiveDragSourcesState = structuralMetadataUtils.removeActiveDragSources(\n        state\n      );\n      return noActiveDragSourcesState;\n\n    case types.HANDLE_LIST_ITEM_DROP:\n      newState = structuralMetadataUtils.handleListItemDrop(\n        action.dragSource,\n        action.dropTarget,\n        state\n      );\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default smData;\n","import * as types from '../actions/types';\nimport WaveformDataUtils from '../services/WaveformDataUtils';\nimport Peaks from 'peaks.js';\nimport { fromEvent } from 'rxjs';\n\nconst waveformUtils = new WaveformDataUtils();\nconst initialState = {\n  peaks: {},\n  events: null,\n  segment: null\n};\nlet newPeaks = null;\n\nconst peaksInstance = (state = initialState, action) => {\n  switch (action.type) {\n    case types.INIT_PEAKS:\n      let segments = waveformUtils.initSegments(action.smData);\n      let peaksInstance = Peaks.init({\n        ...action.options,\n        segments: segments\n      });\n      return {\n        peaks: peaksInstance,\n        events: fromEvent(peaksInstance, 'segments.dragged'),\n        segment: { ...state.segment }\n      };\n\n    case types.INSERT_SEGMENT:\n      newPeaks = waveformUtils.insertNewSegment(action.payload, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: waveformUtils.rebuildPeaks(newPeaks)\n      };\n\n    case types.DELETE_SEGMENT:\n      newPeaks = waveformUtils.deleteSegments(action.payload, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: waveformUtils.rebuildPeaks(newPeaks)\n      };\n\n    case types.ACTIVATE_SEGMENT:\n      newPeaks = waveformUtils.activateSegment(action.payload, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: newPeaks\n      };\n\n    case types.SAVE_SEGMENT:\n      newPeaks = waveformUtils.deactivateSegment(\n        action.payload.clonedSegment.id,\n        {\n          ...state.peaks\n        }\n      );\n      let rebuiltPeaks = waveformUtils.saveSegment(action.payload, {\n        ...newPeaks\n      });\n      return {\n        ...state,\n        peaks: rebuiltPeaks\n      };\n\n    case types.REVERT_SEGMENT:\n      newPeaks = waveformUtils.deactivateSegment(action.payload.id, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: waveformUtils.revertSegment(action.payload, {\n          ...newPeaks\n        })\n      };\n\n    case types.UPDATE_SEGMENT:\n      newPeaks = waveformUtils.updateSegment(action.segment, action.state, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: { ...newPeaks }\n      };\n\n    case types.DRAG_SEGMENT:\n      return {\n        ...state,\n        segment: action.payload\n      };\n\n    case types.TEMP_INSERT_SEGMENT:\n      newPeaks = waveformUtils.insertTempSegment({ ...state.peaks });\n      return {\n        ...state,\n        peaks: { ...newPeaks }\n      };\n\n    case types.TEMP_DELETE_SEGMENT:\n      state.peaks.segments.removeById(action.payload);\n      return { ...state };\n\n    default:\n      return state;\n  }\n};\n\nexport default peaksInstance;\n","import { combineReducers } from 'redux';\nimport forms from './forms';\nimport smData from './sm-data';\nimport peaksInstance from './peaks-instance';\n\nexport default combineReducers({\n  forms,\n  smData,\n  peaksInstance\n});\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport registerServiceWorker from './registerServiceWorker';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}