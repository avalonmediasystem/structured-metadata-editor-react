{"version":3,"sources":["data/utah_phillips_one.mp3","api/Utils.js","actions/types.js","actions/peaks-instance.js","actions/show-forms.js","components/Waveform.js","components/WaveformErrorBoundary.js","containers/WaveformContainer.js","components/AlertDismissable.js","containers/AlertContainer.js","services/StructuralMetadataUtils.js","services/form-helper.js","components/HeadingForm.js","actions/sm-data.js","containers/HeadingFormContainer.js","components/TimespanForm.js","containers/TimespanFormContainer.js","components/ButtonSection.js","services/Constants.js","components/ListItemInlineEditControls.js","components/TimespanInlineForm.js","components/HeadingInlineForm.js","components/ListItemEditForm.js","components/ListItemControls.js","components/ListItem.js","components/PlaceholderItem.js","components/List.js","containers/GenerateStructureContainer.js","containers/StructureOutputContainer.js","App.js","reducers/show-forms.js","reducers/sm-data.js","services/WaveformDataUtils.js","reducers/peaks-instance.js","reducers/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BASE_URL","defaultHeaders","Headers","append","APIUtils","urlEndPoint","headers","arguments","length","undefined","url","concat","axios","get","data","post","ADD_HEADING","BUILD_SM_UI","DELETE_ITEM","ADD_DROP_TARGETS","REMOVE_DROP_TARGETS","SET_ACTIVE_DRAG_SOURCE","REMOVE_ACTIVE_DRAG_SOURCES","HANDLE_LIST_ITEM_DROP","INIT_PEAKS","INSERT_SEGMENT","DELETE_SEGMENT","ACTIVATE_SEGMENT","SAVE_SEGMENT","REVERT_SEGMENT","UPDATE_SEGMENT","DRAG_SEGMENT","TEMP_INSERT_SEGMENT","TEMP_DELETE_SEGMENT","initPeaksInstance","smData","options","dispatch","getState","type","types","initPeaks","peaksInstance","events","subscribe","segment","changeSegment","updateSegment","state","payload","handleResponse","code","closeAlert","handleEditingTimespans","Waveform","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","zoomIn","peaks","zoom","zoomOut","seekTime","timeInSeconds","parseFloat","Number","isNaN","player","seek","waveformContainer","React","createRef","mediaPlayer","handleSubmit","bind","assertThisInitialized","handleChange","waveformRef","current","mediaPlayerRef","event","preventDefault","setState","target","value","react_default","a","createElement","id","ref","Row","Col","xs","md","controls","src","soundMP3","className","Form","inline","onSubmit","FormGroup","ButtonToolbar","Button","onClick","FormControl","onChange","placeholder","Component","connect","WaveformErrorBoundary","error","errorInfo","Alert","bsStyle","children","apiUtils","peaksOptions","container","mediaElement","dataUri","dataUriDefaultFormat","keyboard","pointMarkerColor","showPlayheadTime","zoomWaveformColor","WaveformContainer","initializePeaks","getRequest","response","request","responseURL","_context","t0","status","_this2","components_WaveformErrorBoundary","components_Waveform","objectSpread","actions","peaksActions","AlertDismissable","handleDismiss","showForms","statusCode","onDismiss","createAlert","showFormActions","AlertContainer","alert","components_AlertDismissable","StructuralMetadataUtils","dndHelper","addSpanBefore","allItems","wrapperSpanBefore","beforeParent","getParentDiv","beforeIndex","items","map","item","indexOf","splice","createDropZoneObject","addSpanAfter","wrapperSpanAfter","afterParent","afterIndex","stuckInMiddle","spanIndex","siblings","parentDiv","addSpanToEmptyHeader","wrapperParents","findWrapperHeaders","after","uuidv1","obj","label","timespanTitle","begin","beginTime","end","endTime","clonedItems","cloneDeep","findItem","indexToDelete","findIndex","dragSource","wrapperSpans","findWrapperSpans","getItemsOfType","sibling","push","unshift","grandParentDiv","parentIndex","before","time","allSpans","toMs","valid","i","spanBegin","spanEnd","filteredSpans","filter","span","foundItem","fn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","newSpan","spansBefore","spansAfter","wrapperHeadings","getItems","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","currentObj","child","foundDiv","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","currentChild","validHeadings","sortedHeadings","findSpanItem","targetSpan","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","childItem","cloneWOItems","objectWithoutProperties","allHeadings","validDivHeading","getValidHeadingForEmptySpans","forEach","key","found","heading","adjacentDiv","getWrapperDiv","currentParent","position","nestedHeadings","getNestedDivs","currentHeader","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_adjacentDiv","woItems","dropTarget","itemToMove","itemToMoveParent","itemToMoveItemIndex","dropTargetParent","dropTargetItemIndex","removeDropTargets","headingChildOf","headingTitle","timespanChildOf","spanObj","createSpanObject","insertIndex","childSpans","updatedData","removeActive","parent","active","removeFromTree","childTypeToRemove","strTime","moment","duration","asMilliseconds","secTime","sec_num","parseInt","hours","Math","floor","minutes","seconds","round","hourStr","minStr","secStr","toFixed","split","structuralMetadataUtils","getExistingFormValues","clonedSegment","segments","getSegment","getValidationBeginState","validFormat","validTimeFormat","validBeginTime","doesTimeOverlap","getValidationEndState","validEndTime","validOrdering","validateBeforeEndTimeOrder","doesTimespanOverlap","getValidationTitleState","title","isTitleValid","validTimespans","message","HeadingForm","childOfOptions","handleCancelClick","toggleHeading","handleChildOfChange","e","handleHeadingChange","_this$state","submitItem","clearFormValues","processOptions","prevProps","isEqual","header","getOptions","controlId","validationState","ControlLabel","Feedback","componentClass","cancelClick","disabled","formIsValid","buildSMUI","json","HeadingFormContainer","submit","values","updatedSmData","submittedItem","insertNewHeader","components_HeadingForm","smActions","TimespanForm","buildHeadingsOptions","getValidHeadings","clearHeadingOptions","handleInputChange","defineProperty","updateChildOfOptions","handleTimeChange","callback","isTyping","_this$props","initSegment","nextProps","timespanOpen","isInitializing","startTime","toHHmmss","updateInitialize","titleValid","childOfValid","timesValidResponse","localValidTimespans","_this$state2","_this$state3","sm","mapDispatchToProps","TimespanFormContainer","_structuralMetadataUt","insertNewTimespan","insertNewSegment","components_TimespanForm","assign","newspan","styles","section","margin","well","marginTop","ButtonSection","headingOpen","updateInitializeFlag","handleCancelHeadingClick","handleCancelTimespanClick","deleteTempSegment","handleHeadingClick","handleTimeSpanClick","createDefaultSegment","createTempSegment","tempSegment","timespanFormProps","style","block","Collapse","in","containers_HeadingFormContainer","containers_TimespanFormContainer","containers_AlertContainer","ItemTypes","tooltip","tip","Tooltip","ListItemInlineEditControls","OverlayTrigger","placement","overlay","handleSaveClick","index_es","icon","formControl","TimespanInlineForm","revertSegment","cancelFn","saveSegment","saveFn","tempSmData","_this$props2","deleteListItem","activateSegment","components_ListItemInlineEditControls","clone","width","HeadingInlineForm","ListItemEditForm","handleEditFormCancel","addUpdatedValues","components_TimespanInlineForm","components_HeadingInlineForm","itemType","handleShowDropTargetsClick","handleEditClick","handleDelete","ListItem","editing","deleteItem","deleteSegment","_this$props$item","addDropTargets","removeActiveDragSources","setActiveDragSource","connectDragSource","connectDropTarget","subMenu","components_List","components_ListItemEditForm","components_ListItemControls","DragConnected","DropTarget","canDrop","monitor","isOver","isOverCurrent","shallow","getItemType","ConnectedDropTarget","DragSource","beginDrag","isDragging","ConnectedDragSource","li","border","opacity","liHovered","PlaceholderItem","hover","component","drop","dragItem","getItem","handleListItemDrop","dropItem","List","components_PlaceholderItem","components_ListItem","GenerateStructureContainer","structureJS","addIds","structureWithIds","StructureOutputContainer","handleSaveItClick","postData","postRequest","then","statusText","catch","_this$props$smData","containers_GenerateStructureContainer","library","add","faDotCircle","faMinusCircle","faPen","faSave","faTrash","App","lib","backend","HTML5Backend","containers_WaveformContainer","components_ButtonSection","containers_StructureOutputContainer","initialState","action","blocking","stateClone","determineDropTargets","COLOR_PALETTE","WaveformDataUtils","initSegments","count","createSegment","labelText","color","rangeEndTime","currentTime","getCurrentTime","currentSegments","sortSegments","getSegments","editable","deleteChildren","removeById","clonedSegments","removeAll","index","isOdd","_peaksInstance$segmen","removedSegment","slicedToArray","seg","_peaksInstance$segmen3","currentState","beginSeconds","endSeconds","_peaksInstance$segmen5","removed","_peaksInstance$segmen7","num","_strTime$split","_strTime$split2","sortBy","sort","x","y","waveformUtils","newPeaks","Peaks","init","fromEvent","rebuildPeaks","deleteSegments","deactivateSegment","rebuiltPeaks","insertTempSegment","combineReducers","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8dddd555.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/utah_phillips_one.786f6474.mp3\";","import axios from 'axios';\n\n// Config flag to change the source of data retrieval endpoint\nconst useLocalData = false;\n\nexport const BASE_URL = useLocalData\n  ? 'http://localhost:3123/data/mock-response-'\n  : 'https://spruce.dlib.indiana.edu';\n\n// Masterfile ID on the server\nexport const masterFileID = 'd791sg30j';\n\n// Default headers for API calls\nexport const defaultHeaders = new Headers();\ndefaultHeaders.append('Content-Type', 'application/json');\n\nexport default class APIUtils {\n  /**\n   * Construct GET request with parameters,\n   * @param {String} urlEndPoint\n   * @param {Headers} headers\n   */\n  getRequest(urlEndPoint, headers = defaultHeaders) {\n    const url = useLocalData\n      ? `${BASE_URL}${urlEndPoint}`\n      : `${BASE_URL}/master_files/${masterFileID}/${urlEndPoint}`;\n    return axios.get(url, {\n      headers: headers\n    });\n  }\n\n  /**\n   * Construct POST request with parameters,\n   * @param {String} urlEndPoint\n   * @param {JSON} data - JSON data posting to the server\n   * @param {Headers} headers\n   */\n  postRequest(urlEndPoint, data, headers = defaultHeaders) {\n    const url = useLocalData\n      ? `${BASE_URL}${urlEndPoint}`\n      : `${BASE_URL}/master_files/${masterFileID}/${urlEndPoint}`;\n    return axios.post(url, data, {\n      headers: headers\n    });\n  }\n}\n","export const ADD_HEADING = 'ADD_HEADING';\nexport const EDIT_HEADING = 'EDIT_HEADING';\nexport const ADD_TIME_SPAN = 'ADD_TIME_SPAN';\nexport const EDIT_TIME_SPAN = 'EDIT_TIME_SPAN';\nexport const BUILD_SM_UI = 'BUILD_SM_UI';\n\nexport const DELETE_ITEM = 'DELETE_ITEM';\n\nexport const ADD_DROP_TARGETS = 'ADD_DROP_TARGETS';\nexport const REMOVE_DROP_TARGETS = 'REMOVE_DROP_TARGETS';\nexport const SET_ACTIVE_DRAG_SOURCE = 'SET_ACTIVE_DRAG_SOURCE';\nexport const REMOVE_ACTIVE_DRAG_SOURCES = 'REMOVE_ACTIVE_DRAG_SOURCES';\nexport const HANDLE_LIST_ITEM_DROP = 'HANDLE_LIST_ITEM_DROP';\n\nexport const API_RESPONSE = 'API_RESPONSE';\nexport const CLOSE_ALERT = 'CLOSE_ALERT';\nexport const IS_EDITING_TIMESPAN = 'IS_EDITING_TIMESPAN';\n\nexport const INIT_PEAKS = 'INIT_PEAKS';\nexport const INSERT_SEGMENT = 'INSERT_SEGMENT';\nexport const DELETE_SEGMENT = 'DELETE_SEGMENT';\nexport const ACTIVATE_SEGMENT = 'ACTIVATE_SEGMENT';\nexport const SAVE_SEGMENT = 'SAVE_SEGMENT';\nexport const REVERT_SEGMENT = 'REVERT_SEGMENT';\nexport const UPDATE_SEGMENT = 'UPDATE_SEGMENT';\nexport const DRAG_SEGMENT = 'DRAG_SEGMENT';\n\nexport const TEMP_INSERT_SEGMENT = 'TEMP_INSERT_SEGMENT';\nexport const TEMP_DELETE_SEGMENT = 'TEMP_DELETE_SEGMENT';\n","import * as types from './types';\n\nexport const initPeaksInstance = (smData, options) => {\n  return (dispatch, getState) => {\n    dispatch(initPeaks(smData, options));\n\n    const { peaksInstance } = getState();\n\n    if (peaksInstance.events !== undefined) {\n      peaksInstance.events.subscribe(segment => {\n        dispatch(changeSegment(segment));\n      });\n    }\n  };\n};\n\nexport function initPeaks(smData, options) {\n  return {\n    type: types.INIT_PEAKS,\n    smData,\n    options\n  };\n}\n\nexport function insertNewSegment(span) {\n  return {\n    type: types.INSERT_SEGMENT,\n    payload: span\n  };\n}\n\nexport function deleteSegment(item) {\n  return {\n    type: types.DELETE_SEGMENT,\n    payload: item\n  };\n}\n\nexport function activateSegment(id) {\n  return {\n    type: types.ACTIVATE_SEGMENT,\n    payload: id\n  };\n}\n\nexport function revertSegment(clone) {\n  return {\n    type: types.REVERT_SEGMENT,\n    payload: clone\n  };\n}\n\nexport function saveSegment(state) {\n  return {\n    type: types.SAVE_SEGMENT,\n    payload: state\n  };\n}\n\nexport function updateSegment(segment, state) {\n  return {\n    type: types.UPDATE_SEGMENT,\n    segment,\n    state\n  };\n}\n\nexport function changeSegment(segment) {\n  return {\n    type: types.DRAG_SEGMENT,\n    payload: segment\n  };\n}\n\nexport function insertTempSegment() {\n  return {\n    type: types.TEMP_INSERT_SEGMENT\n  };\n}\n\nexport function deleteTempSegment(id) {\n  return {\n    type: types.TEMP_DELETE_SEGMENT,\n    payload: id\n  };\n}\n","import * as types from './types';\n\nexport const handleResponse = code => ({\n  type: types.API_RESPONSE,\n  code\n});\n\nexport const closeAlert = () => ({\n  type: types.CLOSE_ALERT\n});\n\nexport const handleEditingTimespans = code => ({\n  type: types.IS_EDITING_TIMESPAN,\n  code\n});\n","import React, { Component } from 'react';\nimport {\n  Button,\n  ButtonToolbar,\n  FormControl,\n  FormGroup,\n  Form,\n  Row,\n  Col\n} from 'react-bootstrap';\nimport soundMP3 from '../data/utah_phillips_one.mp3';\nimport { connect } from 'react-redux';\n\nclass Waveform extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seekTime: ''\n    };\n\n    // Create `refs`\n    this.waveformContainer = React.createRef();\n    this.mediaPlayer = React.createRef();\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    // Grab the React `refs` now the component is mounted\n    this.props.waveformRef(this.waveformContainer.current);\n    this.props.mediaPlayerRef(this.mediaPlayer.current);\n  }\n\n  zoomIn = () => {\n    this.props.peaksInstance.peaks.zoom.zoomIn();\n  };\n\n  zoomOut = () => {\n    this.props.peaksInstance.peaks.zoom.zoomOut();\n  };\n\n  handleSubmit(event) {\n    this.seekTime();\n    event.preventDefault();\n  }\n\n  handleChange(event) {\n    this.setState({\n      seekTime: event.target.value\n    });\n  }\n\n  seekTime = () => {\n    const timeInSeconds = parseFloat(this.state.seekTime);\n    if (!Number.isNaN(timeInSeconds)) {\n      this.props.peaksInstance.peaks.player.seek(timeInSeconds);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"waveform-container\" ref={this.waveformContainer} />\n        <Row>\n          <Col xs={12} md={6}>\n            <audio\n              controls\n              ref={this.mediaPlayer}\n              src={soundMP3}\n              type=\"audio/mp3\"\n            >\n              Your browser does not support the audio element.\n            </audio>\n          </Col>\n          <Col xs={12} md={6} className=\"text-right\">\n            <Form inline onSubmit={this.handleSubmit}>\n              <FormGroup>\n                <ButtonToolbar>\n                  <Button\n                    className=\"glyphicon glyphicon-zoom-in\"\n                    onClick={this.zoomIn}\n                  />\n                  <Button\n                    className=\"glyphicon glyphicon-zoom-out\"\n                    onClick={this.zoomOut}\n                  />\n                </ButtonToolbar>\n              </FormGroup>{' '}\n              <FormControl\n                className=\"form-control\"\n                type=\"text\"\n                value={this.state.seekTime}\n                onChange={this.handleChange}\n                placeholder=\"0\"\n              />{' '}\n              <Button onClick={this.seekTime}>Seek</Button>\n            </Form>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\n// To use in tests as a disconnected component (to access state)\nexport { Waveform as PureWaveform };\n\nconst mapStateToProps = state => ({\n  peaksInstance: state.peaksInstance\n});\n// To use in the app\nexport default connect(mapStateToProps)(Waveform);\n","import React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\n\nclass WaveformErrorBoundary extends Component {\n  state = { error: '' };\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <Alert bsStyle=\"danger\">\n          <p>Error rendering Peak.js waveform</p>\n        </Alert>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default WaveformErrorBoundary;\n","import React, { Component } from 'react';\nimport APIUtils from '../api/Utils';\nimport { connect } from 'react-redux';\nimport * as peaksActions from '../actions/peaks-instance';\nimport * as actions from '../actions/show-forms';\nimport Waveform from '../components/Waveform';\nimport WaveformErrorBoundary from '../components/WaveformErrorBoundary';\n\nconst apiUtils = new APIUtils();\n\n// Peaks options\nconst peaksOptions = {\n  container: null,\n  mediaElement: null,\n  dataUri: null,\n  dataUriDefaultFormat: 'json',\n  keyboard: true,\n  pointMarkerColor: '#006eb0',\n  showPlayheadTime: true,\n  zoomWaveformColor: 'rgba(217, 217, 217, 1)'\n};\n\nclass WaveformContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.waveformContainer = null;\n    this.mediaPlayer = null;\n  }\n\n  componentDidMount() {\n    peaksOptions.container = this.waveformContainer;\n    peaksOptions.mediaElement = this.mediaPlayer;\n    this.initializePeaks();\n  }\n\n  async initializePeaks() {\n    try {\n      const response = await apiUtils.getRequest('waveform.json');\n      // Set the masterfile URL as the URI for the waveform data file\n      peaksOptions.dataUri = response.request.responseURL;\n      // Initialize Peaks\n      this.props.initPeaks(this.props.smData, peaksOptions);\n    } catch (error) {\n      if (error.response !== undefined) {\n        this.props.handleResponse(error.response.status);\n      } else if (error.request !== undefined) {\n        this.props.handleResponse(error.request.status);\n      } else {\n        this.props.handleResponse(-1);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"waveform-section\">\n        <WaveformErrorBoundary>\n          <Waveform\n            waveformRef={ref => (this.waveformContainer = ref)}\n            mediaPlayerRef={ref => (this.mediaPlayer = ref)}\n          />\n        </WaveformErrorBoundary>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nconst mapDispatchToProps = dispatch => ({\n  ...actions,\n  initPeaks: (smData, options) =>\n    dispatch(peaksActions.initPeaksInstance(smData, options))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WaveformContainer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Alert } from 'react-bootstrap';\nimport * as showFormActions from '../actions/show-forms';\n\nclass AlertDismissable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDismiss = this.handleDismiss.bind(this);\n  }\n\n  handleDismiss() {\n    this.props.closeAlert();\n  }\n\n  createAlert() {\n    const status = this.props.showForms.statusCode;\n    switch (true) {\n      case status === 401:\n        return (\n          <div>\n            <Alert bsStyle=\"danger\" onDismiss={this.handleDismiss}>\n              <p>Unauthorized to access the masterfile.</p>\n            </Alert>\n          </div>\n        );\n      case status === 404:\n        return (\n          <div>\n            <Alert bsStyle=\"danger\" onDismiss={this.handleDismiss}>\n              <p>Requested masterfile not found.</p>\n            </Alert>\n          </div>\n        );\n      case status >= 200 && status < 300:\n        return (\n          <div>\n            <Alert bsStyle=\"success\" onDismiss={this.handleDismiss}>\n              <p>Successfully saved to masterfile.</p>\n            </Alert>\n          </div>\n        );\n      default:\n        return (\n          <div>\n            <Alert bsStyle=\"danger\" onDismiss={this.handleDismiss}>\n              <p>Network error, please try again!</p>\n            </Alert>\n          </div>\n        );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <br />\n        {this.createAlert()}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  closeAlert: () => dispatch(showFormActions.closeAlert())\n});\n\nconst mapStateToProps = state => ({\n  showForms: state.showForms\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AlertDismissable);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport AlertDismissable from '../components/AlertDismissable';\n\nclass AlertContainer extends Component {\n  render() {\n    return <div>{this.props.showForms.alert && <AlertDismissable />}</div>;\n  }\n}\nconst mapStateToProps = state => ({\n  showForms: state.showForms\n});\n\nexport default connect(mapStateToProps)(AlertContainer);\n","import { findIndex, cloneDeep } from 'lodash';\nimport moment from 'moment';\nimport uuidv1 from 'uuid/v1';\n\n/**\n * Rules - https://github.com/avalonmediasystem/avalon/issues/3022\n *\n * a timespan does not allow overlap.\n * a timepan can not be out of order.\n * a timespan can not be demoted from a parent unless it is the last item in the relationship (last child), as it would create an out of order item.\n * Timespans can only be moved ONE parent- level up or down.\n * Use an arrow and handle click.\n * Only first and last time-spans can be moved. Middle Children are stuck.\n * Headings are ordered by the children they have.\n * If when creating a timespan, you butt against the start or end of another timespan, you have to change the other timepan first.\n * Labels can be edited at will.\n */\n\nexport default class StructuralMetadataUtils {\n  /**\n   * Helper function to create a dropZone object for drag and drop\n   * @returns {Object}\n   */\n  createDropZoneObject() {\n    return {\n      type: 'optional',\n      id: uuidv1()\n    };\n  }\n\n  /**\n   * Helper function which creates an object with the shape our data structure requires\n   * @param {Object} obj\n   * @return {Object}\n   */\n  createSpanObject(obj) {\n    return {\n      id: uuidv1(),\n      type: 'span',\n      label: obj.timespanTitle,\n      begin: obj.beginTime,\n      end: obj.endTime\n    };\n  }\n\n  /**\n   * Remove a targeted list item object from data structure\n   * @param {String} id - list item id\n   * @param {Array} allItems array of items, usually all current items in the data structure\n   * @return {Array}\n   */\n  deleteListItem(id, allItems) {\n    let clonedItems = cloneDeep(allItems);\n    let item = this.findItem(id, allItems);\n    let parentDiv = this.getParentDiv(item, clonedItems);\n    let indexToDelete = findIndex(parentDiv.items, { id: item.id });\n\n    parentDiv.items.splice(indexToDelete, 1);\n\n    return clonedItems;\n  }\n\n  /**\n   * Update the data structure to represent all possible dropTargets for the provided dragSource\n   * @param {Object} dragSource\n   * @param {Object} allItems\n   * @returns {Array} - new computed items\n   */\n  determineDropTargets(dragSource, allItems) {\n    const clonedItems = cloneDeep(allItems);\n\n    if (dragSource.type === 'span') {\n      let wrapperSpans = this.findWrapperSpans(\n        dragSource,\n        this.getItemsOfType('span', clonedItems)\n      );\n      let parentDiv = this.getParentDiv(dragSource, clonedItems);\n      let siblings = parentDiv ? parentDiv.items : [];\n      let spanIndex = siblings\n        .map(sibling => sibling.id)\n        .indexOf(dragSource.id);\n      let stuckInMiddle = this.dndHelper.stuckInMiddle(\n        spanIndex,\n        siblings,\n        parentDiv\n      );\n\n      // If span falls in the middle of other spans, it can't be moved\n      if (stuckInMiddle) {\n        return clonedItems;\n      }\n\n      // Sibling before is a div?\n      if (spanIndex !== 0 && siblings[spanIndex - 1].type === 'div') {\n        let sibling = siblings[spanIndex - 1];\n        if (sibling.items) {\n          sibling.items.push(this.createDropZoneObject());\n        } else {\n          sibling.items = [this.createDropZoneObject()];\n        }\n      }\n\n      // Sibling after is a div?\n      if (\n        spanIndex !== siblings.length - 1 &&\n        siblings[spanIndex + 1].type === 'div'\n      ) {\n        let sibling = siblings[spanIndex + 1];\n        if (sibling.items) {\n          sibling.items.unshift(this.createDropZoneObject());\n        } else {\n          sibling.items = [this.createDropZoneObject()];\n        }\n      }\n\n      let grandParentDiv = this.getParentDiv(parentDiv, clonedItems);\n      let parentIndex = grandParentDiv\n        ? grandParentDiv.items.map(item => item.id).indexOf(parentDiv.id)\n        : null;\n      // A first child of siblings, or an only child\n      if (spanIndex === 0) {\n        // Can't move up\n        if (parentIndex === null) {\n          return clonedItems;\n        }\n\n        if (grandParentDiv) {\n          // Insert directly before the parent div\n          grandParentDiv.items.splice(\n            parentIndex,\n            0,\n            this.createDropZoneObject()\n          );\n\n          // Insert after the \"before\" wrapper span (if one exists)\n          if (wrapperSpans.before) {\n            this.dndHelper.addSpanBefore(clonedItems, wrapperSpans.before);\n          }\n        }\n      }\n\n      // Insert relative to the span after the active span\n      if (wrapperSpans.after) {\n        this.dndHelper.addSpanAfter(clonedItems, wrapperSpans.after);\n      }\n      // Insert when there is no wrapper span after active span, but empty headers\n      if (!wrapperSpans.after) {\n        this.dndHelper.addSpanToEmptyHeader(parentDiv, clonedItems);\n      }\n    }\n\n    return clonedItems;\n  }\n\n  /**\n   * Helper object for drag and drop data structure manipulations\n   * This mutates the state of the data structure\n   */\n  dndHelper = {\n    addSpanBefore: (allItems, wrapperSpanBefore) => {\n      let beforeParent = this.getParentDiv(wrapperSpanBefore, allItems);\n      let beforeIndex = beforeParent.items\n        .map(item => item.id)\n        .indexOf(wrapperSpanBefore.id);\n      // Before the insert, check that the dropTarget index doesn't already exist\n      if (\n        beforeParent.items[beforeIndex + 1] &&\n        beforeParent.items[beforeIndex + 1].type !== 'optional'\n      ) {\n        beforeParent.items.splice(\n          beforeIndex + 1,\n          0,\n          this.createDropZoneObject()\n        );\n      }\n    },\n    addSpanAfter: (allItems, wrapperSpanAfter) => {\n      let afterParent = this.getParentDiv(wrapperSpanAfter, allItems);\n      let afterIndex = afterParent.items\n        .map(item => item.id)\n        .indexOf(wrapperSpanAfter.id);\n\n      afterParent.items.splice(afterIndex, 0, this.createDropZoneObject());\n    },\n    stuckInMiddle: (spanIndex, siblings, parentDiv) => {\n      return (\n        spanIndex !== 0 &&\n        spanIndex !== siblings.length - 1 &&\n        parentDiv.items[spanIndex - 1].type === 'span' &&\n        parentDiv.items[spanIndex + 1].type === 'span'\n      );\n    },\n    addSpanToEmptyHeader: (parentDiv, allItems) => {\n      let wrapperParents = this.findWrapperHeaders(parentDiv, allItems);\n      if (wrapperParents.after) {\n        wrapperParents.after.items.splice(0, 0, this.createDropZoneObject());\n      }\n    }\n  };\n\n  /**\n   * Determine whether a time overlaps (or falls between), an existing timespan's range\n   * @param {String} time - form input value\n   * @param {*} allSpans - all timespans in the data structure\n   * @return {Boolean}\n   */\n  doesTimeOverlap(time, allSpans) {\n    const { toMs } = this;\n    let valid = true;\n    time = toMs(time);\n\n    // Loop through all spans\n    for (let i in allSpans) {\n      let spanBegin = toMs(allSpans[i].begin);\n      let spanEnd = toMs(allSpans[i].end);\n\n      // Illegal time (falls between existing start/end times)\n      if (time >= spanBegin && time < spanEnd) {\n        valid = false;\n        break;\n      }\n    }\n    return valid;\n  }\n\n  doesTimespanOverlap(beginTime, endTime, allSpans) {\n    const { toMs } = this;\n    // Filter out only spans where new begin time is before an existing begin time\n    let filteredSpans = allSpans.filter(span => {\n      return toMs(beginTime) < toMs(span.begin);\n    });\n    // Return whether new end time overlaps the next begin time, if there are timespans after the current timespan\n    if (filteredSpans.length !== 0) {\n      return toMs(endTime) > toMs(filteredSpans[0].begin);\n    }\n    return false;\n  }\n\n  /**\n   * Find an item by it's id\n   * @param {String} id - string value to match against\n   * @param {Array} items - Array of nested structured metadata objects containing headings and time spans\n   * @return {Object} - Object found, or null if none\n   */\n  findItem(id, items) {\n    let foundItem = null;\n    let fn = items => {\n      for (let item of items) {\n        if (item.id === id) {\n          foundItem = item;\n        }\n        if (item.items && item.items.length > 0) {\n          fn(item.items);\n        }\n      }\n    };\n    fn(items);\n\n    return foundItem;\n  }\n\n  /**\n   * @param {String} label - string value to match against\n   * @param {Array} items - Array of nested structured metadata objects containing headings and time spans\n   * @return {Object} - Object found, or null if none\n   */\n  findItemByLabel(label, items) {\n    let foundItem = null;\n    let findItem = items => {\n      for (let item of items) {\n        if (item.label === label) {\n          foundItem = item;\n        }\n        if (item.items) {\n          findItem(item.items);\n        }\n      }\n    };\n    findItem(items);\n\n    return foundItem;\n  }\n\n  /**\n   * Find the <span>s which come before and after new span\n   * @param {Object} newSpan - new span object\n   * @param {Array} allSpans - all type <span> objects in current structured metadata\n   * @returns {Object} - wrapper <span>s object: { before: spanObject, after: spanObject }\n   */\n  findWrapperSpans(newSpan, allSpans) {\n    const { toMs } = this;\n    let wrapperSpans = {\n      before: null,\n      after: null\n    };\n    let spansBefore = allSpans.filter(\n      span => toMs(newSpan.begin) >= toMs(span.end)\n    );\n    let spansAfter = allSpans.filter(\n      span => toMs(newSpan.end) <= toMs(span.begin)\n    );\n\n    wrapperSpans.before =\n      spansBefore.length > 0 ? spansBefore[spansBefore.length - 1] : null;\n    wrapperSpans.after = spansAfter.length > 0 ? spansAfter[0] : null;\n\n    return wrapperSpans;\n  }\n\n  /**\n   * Find the <div>s wrapping the current active timespan (either in editing or in drag-n-drop)\n   * @param {Object} parentDiv - parent header of the active timespan\n   * @param {Array} allItems - all the items in the structured metadata\n   */\n  findWrapperHeaders(parentDiv, allItems) {\n    const wrapperHeadings = {\n      before: null,\n      after: null\n    };\n    let grandParentDiv = this.getParentDiv(parentDiv, allItems);\n    let parentIndex = grandParentDiv\n      ? grandParentDiv.items.map(item => item.label).indexOf(parentDiv.label)\n      : null;\n\n    wrapperHeadings.before =\n      grandParentDiv.items[parentIndex - 1] !== undefined\n        ? grandParentDiv.items[parentIndex - 1]\n        : null;\n    wrapperHeadings.after =\n      grandParentDiv.items[parentIndex + 1] !== undefined\n        ? grandParentDiv.items[parentIndex + 1]\n        : null;\n    return wrapperHeadings;\n  }\n\n  /**\n   * Get all items in data structure of type 'div' or 'span'\n   * @param {Array} json\n   * @returns {Array} - all stripped down objects of type in the entire structured metadata collection\n   */\n  getItemsOfType(type = 'div', items = []) {\n    let options = [];\n\n    // Recursive function to search the whole data structure\n    let getItems = items => {\n      for (let item of items) {\n        if (item.type === type) {\n          let currentObj = { ...item };\n          delete currentObj.items;\n          options.push(currentObj);\n        }\n        if (item.items) {\n          getItems(item.items);\n        }\n      }\n    };\n    getItems(items);\n\n    return options;\n  }\n\n  getParentDiv(child, allItems) {\n    let foundDiv = null;\n\n    let findItem = (child, items) => {\n      for (let item of items) {\n        if (item.items) {\n          let childItem = item.items.filter(\n            currentChild => child.id === currentChild.id\n          );\n          // Found it\n          if (childItem.length > 0) {\n            foundDiv = item;\n            break;\n          }\n          findItem(child, item.items);\n        }\n      }\n    };\n    findItem(child, allItems);\n    return foundDiv;\n  }\n\n  /**\n   * Overall logic is to find existing before and after spans for the new object (time flow), and then\n   * their parent 'divs' would be valid headings.\n   * @param {Object} wrapperSpans Object representing before and after spans of newSpan (if they exist)\n   * @param {Array} allItems - All structural metadata items in tree\n   * @return {Array} - of valid <div> objects in structural metadata tree\n   */\n  getValidHeadings(wrapperSpans, allItems) {\n    let validHeadings = [];\n    let sortedHeadings = [];\n\n    let findSpanItem = (targetSpan, items) => {\n      for (let item of items) {\n        // Children items exist\n        if (item.items) {\n          // Check for a target span match\n          let targetSpanMatch = item.items.filter(\n            childItem => childItem.id === targetSpan.id\n          );\n          // Match found\n          if (targetSpanMatch.length > 0) {\n            let { items, ...cloneWOItems } = item;\n            // Add parent div to valid array\n            validHeadings.push(cloneWOItems);\n          }\n          // Try deeper in list\n          findSpanItem(targetSpan, item.items);\n        }\n      }\n    };\n\n    // Get all headings in the metada structure\n    let allHeadings = this.getItemsOfType('div', allItems);\n\n    // There are currently no spans, ALL headings are valid\n    if (!wrapperSpans.before && !wrapperSpans.after) {\n      validHeadings = allHeadings;\n    }\n\n    if (wrapperSpans.before) {\n      findSpanItem(wrapperSpans.before, allItems);\n    }\n    if (wrapperSpans.after) {\n      findSpanItem(wrapperSpans.after, allItems);\n    }\n    // Get valid headings when either of wrapping timespan is null\n    if (\n      (!wrapperSpans.before && wrapperSpans.after) ||\n      (wrapperSpans.before && !wrapperSpans.after)\n    ) {\n      let validDivHeading = this.getValidHeadingForEmptySpans(\n        wrapperSpans,\n        allItems\n      );\n      validHeadings = validHeadings.concat(validDivHeading);\n    }\n\n    // Sort valid headings to comply with the order in the metadata structure\n    allHeadings.forEach(key => {\n      let found = false;\n      validHeadings = validHeadings.filter(heading => {\n        if (!found && heading.label === key.label) {\n          sortedHeadings.push(heading);\n          found = true;\n          return false;\n        } else {\n          return true;\n        }\n      });\n    });\n\n    return sortedHeadings;\n  }\n\n  /**\n   * Find valid headings when either wrapping timespan before or after is null\n   * @param {Object} wrapperSpans - spans wrapping the current active timespan\n   * @param {Array} allItems - all the items in structured metadata\n   */\n  getValidHeadingForEmptySpans(wrapperSpans, allItems) {\n    let adjacentDiv = null;\n\n    let getWrapperDiv = (currentParent, position) => {\n      let wrapperParents = this.findWrapperHeaders(currentParent, allItems);\n      switch (position) {\n        case 'before':\n          return !wrapperParents.before ? currentParent : wrapperParents.before;\n        case 'after':\n          return !wrapperParents.after ? currentParent : wrapperParents.after;\n        default:\n          return currentParent;\n      }\n    };\n\n    let nestedHeadings = [];\n    let getNestedDivs = (currentHeader, currentParent) => {\n      if (currentHeader !== currentParent) {\n        let items = currentHeader.items;\n        if (items) {\n          for (let item of items) {\n            if (item.type === 'div') {\n              let { items, ...cloneWOItems } = item;\n              nestedHeadings.push(cloneWOItems);\n            }\n            getNestedDivs(item, currentParent);\n          }\n        }\n      }\n    };\n    if (!wrapperSpans.after && wrapperSpans.before) {\n      let currentParent = this.getParentDiv(wrapperSpans.before, allItems);\n      adjacentDiv = getWrapperDiv(currentParent, 'after');\n      getNestedDivs(adjacentDiv, currentParent);\n    }\n    if (!wrapperSpans.before && wrapperSpans.after) {\n      let currentParent = this.getParentDiv(wrapperSpans.after, allItems);\n      adjacentDiv = getWrapperDiv(currentParent, 'before');\n      getNestedDivs(adjacentDiv, currentParent);\n    }\n    let { items, ...woItems } = adjacentDiv;\n    nestedHeadings.push(woItems);\n    return nestedHeadings;\n  }\n\n  /**\n   * Helper function which handles React Dnd's dropping of a dragSource onto a dropTarget\n   * It needs to re-arrange the data structure to reflect the new positions\n   * @param {Object} dragSource - a minimal object React DnD uses with only the id value\n   * @param {Object} dropTarget\n   * @param {Array} allItems\n   * @returns {Array}\n   */\n  handleListItemDrop(dragSource, dropTarget, allItems) {\n    let clonedItems = cloneDeep(allItems);\n    let itemToMove = this.findItem(dragSource.id, clonedItems);\n\n    // Slice out previous position of itemToMove\n    let itemToMoveParent = this.getParentDiv(itemToMove, clonedItems);\n    let itemToMoveItemIndex = itemToMoveParent.items\n      .map(item => item.id)\n      .indexOf(itemToMove.id);\n    itemToMoveParent.items.splice(itemToMoveItemIndex, 1);\n\n    // Place itemToMove right after the placeholder array position\n    let dropTargetParent = this.getParentDiv(dropTarget, clonedItems);\n    let dropTargetItemIndex = dropTargetParent.items\n      .map(item => item.id)\n      .indexOf(dropTarget.id);\n    dropTargetParent.items.splice(dropTargetItemIndex, 0, itemToMove);\n\n    // Get rid of all placeholder elements\n    return this.removeDropTargets(clonedItems);\n  }\n\n  /**\n   * Insert a new heading as child of an existing heading\n   * @param {Object} obj - new heading object to insert\n   * @param {Array} allItems - The entire structured metadata collection\n   * @returns {Array} - The updated structured metadata collection, with new object inserted\n   */\n  insertNewHeader(obj, allItems) {\n    let clonedItems = cloneDeep(allItems);\n    let foundDiv =\n      this.findItem(obj.headingChildOf, clonedItems) || clonedItems[0];\n\n    // If children exist, add to list\n    if (foundDiv) {\n      foundDiv.items.unshift({\n        id: uuidv1(),\n        type: 'div',\n        label: obj.headingTitle,\n        items: []\n      });\n    }\n\n    return clonedItems;\n  }\n\n  /**\n   * Insert a new timespan as child of an existing heading\n   * @param {Object} obj - object of form values submitted\n   * @param {Array} allItems - The entire structured metadata collection\n   * @returns ({Object}, {Array}) - (New span, The updated structured metadata collection, with new object inserted)\n   */\n  insertNewTimespan(obj, allItems) {\n    let clonedItems = cloneDeep(allItems);\n    let foundDiv = this.findItem(obj.timespanChildOf, clonedItems);\n    const spanObj = this.createSpanObject(obj);\n    let insertIndex = 0;\n\n    // If children exist, add to list\n    if (foundDiv) {\n      let childSpans = foundDiv.items.filter(item => item.type === 'span');\n\n      // Get before and after sibling spans\n      let wrapperSpans = this.findWrapperSpans(spanObj, childSpans);\n\n      if (wrapperSpans.before) {\n        insertIndex =\n          findIndex(foundDiv.items, { id: wrapperSpans.before.id }) + 1;\n      }\n      // Insert new span at appropriate index\n      foundDiv.items.splice(insertIndex, 0, spanObj);\n    }\n\n    return { newSpan: spanObj, updatedData: clonedItems };\n  }\n\n  /**\n   * Recursive function to clean out any 'active' drag item property in the data structure\n   * @param {Array} allItems\n   * @returns {Array}\n   */\n  removeActiveDragSources(allItems) {\n    let removeActive = parent => {\n      if (!parent.items) {\n        if (parent.active) {\n          parent.active = false;\n        }\n        return parent;\n      }\n      parent.items = parent.items.map(child => removeActive(child));\n\n      return parent;\n    };\n    let cleanItems = removeActive(allItems[0]);\n\n    return [cleanItems];\n  }\n\n  /**\n   * Recursive function to remove all temporary Drop Target objects from the structured metadata items\n   * @param {Array} allItems\n   */\n  removeDropTargets(allItems) {\n    const clonedItems = cloneDeep(allItems);\n    let removeFromTree = (parent, childTypeToRemove) => {\n      if (!parent.items) {\n        return parent;\n      }\n\n      parent.items = parent.items\n        .filter(child => child.type !== childTypeToRemove)\n        .map(child => removeFromTree(child, childTypeToRemove));\n\n      return parent;\n    };\n    let cleanItems = removeFromTree(clonedItems[0], 'optional');\n\n    return [cleanItems];\n  }\n\n  /**\n   * Moment.js helper millisecond converter to make calculations consistent\n   * @param {String} strTime form input value\n   */\n  toMs(strTime) {\n    return moment.duration(strTime).asMilliseconds();\n  }\n\n  /**\n   * Convert seconds to string format hh:mm:ss\n   * @param {Number} secTime - time in seconds\n   */\n  toHHmmss(secTime) {\n    let sec_num = parseInt('' + secTime * 100) / 100;\n    let hours = Math.floor(sec_num / 3600);\n    let minutes = Math.floor(sec_num / 60);\n    let seconds = Math.round((sec_num % 60) * 100) / 100;\n\n    let hourStr = hours < 10 ? `0${hours}` : `${hours}`;\n    let minStr = minutes < 10 ? `0${minutes}` : `${minutes}`;\n    let secStr = seconds.toFixed(2);\n    secStr = seconds < 10 ? `0${secStr}` : `${secStr}`;\n\n    return `${hourStr}:${minStr}:${secStr}`;\n  }\n\n  /**\n   * Update an existing heading object\n   * @param {Object} heading - updated form object\n   * @param {Array} allItems - the data structure\n   */\n  updateHeading(heading, allItems) {\n    const clonedItems = cloneDeep(allItems);\n    let item = this.findItem(heading.id, clonedItems);\n    item.label = heading.headingTitle;\n\n    // TODO: Figure out how to handle \"Child Of\" when this becomes inline.\n\n    return clonedItems;\n  }\n\n  /**\n   * Does 'before' time start prior to 'end' time?\n   * @param {String} begin form intput value\n   * @param {String} end form input value\n   * @return {Boolean}\n   */\n  validateBeforeEndTimeOrder(begin, end) {\n    if (!begin || !end) {\n      return true;\n    }\n    if (this.toMs(begin) >= this.toMs(end)) {\n      return false;\n    }\n    return true;\n  }\n\n  validTimeFormat(value) {\n    return value && value.split(':').length === 3;\n  }\n}\n","import StructuralMetadataUtils from './StructuralMetadataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\n/**\n * Load existing form values to state, if in 'EDIT' mode\n */\nexport function getExistingFormValues(id, smData, peaks = {}) {\n  let item = structuralMetadataUtils.findItem(id, smData);\n\n  // Heading\n  if (item.type === 'div') {\n    return {\n      headingTitle: item.label\n    };\n  }\n\n  // Timespan\n  if (item.type === 'span') {\n    let parentDiv = structuralMetadataUtils.getParentDiv(item, smData);\n\n    return {\n      beginTime: item.begin,\n      endTime: item.end,\n      timespanChildOf: parentDiv ? parentDiv.id : '',\n      timespanTitle: item.label,\n      clonedSegment: peaks.segments.getSegment(id)\n    };\n  }\n}\n\nexport function getValidationBeginState(beginTime, allSpans) {\n  if (!beginTime || beginTime.indexOf(':') === -1) {\n    return null;\n  }\n\n  const validFormat = structuralMetadataUtils.validTimeFormat(beginTime);\n  const validBeginTime = structuralMetadataUtils.doesTimeOverlap(\n    beginTime,\n    allSpans\n  );\n\n  if (validFormat && validBeginTime) {\n    return 'success';\n  }\n  if (!validFormat || !validBeginTime) {\n    return 'error';\n  }\n  return null;\n}\n\nexport function getValidationEndState(beginTime, endTime, allSpans) {\n  if (!endTime || endTime.indexOf(':') === -1) {\n    return null;\n  }\n\n  const validFormat = structuralMetadataUtils.validTimeFormat(endTime);\n  const validEndTime = structuralMetadataUtils.doesTimeOverlap(\n    endTime,\n    allSpans\n  );\n  const validOrdering = structuralMetadataUtils.validateBeforeEndTimeOrder(\n    beginTime,\n    endTime\n  );\n  const doesTimespanOverlap = structuralMetadataUtils.doesTimespanOverlap(\n    beginTime,\n    endTime,\n    allSpans\n  );\n\n  if (validFormat && validEndTime && validOrdering && !doesTimespanOverlap) {\n    return 'success';\n  }\n  if (!validFormat || !validEndTime || !validOrdering || doesTimespanOverlap) {\n    return 'error';\n  }\n  return null;\n}\n\nexport function getValidationTitleState(title) {\n  if (title.length > 2) {\n    return 'success';\n  }\n  if (title.length > 0) {\n    return 'error';\n  }\n  return null;\n}\n\n/**\n * Validation logic for a valid title here\n * @param {String} title\n */\nexport function isTitleValid(title) {\n  return title.length > 2;\n}\n\n/**\n * Validates that the begin and end time span values are valid separately, and together\n * in the region which they will create.\n *\n * This function also preps handy feedback messages we might want to display to the user\n */\nexport function validTimespans(beginTime, endTime, allSpans, smData) {\n  // Valid formats?\n  if (!structuralMetadataUtils.validTimeFormat(beginTime)) {\n    return {\n      valid: false,\n      message: 'Invalid begin time format'\n    };\n  }\n  if (!structuralMetadataUtils.validTimeFormat(endTime)) {\n    return {\n      valid: false,\n      message: 'Invalid end time format'\n    };\n  }\n  // Any individual overlapping?\n  if (!structuralMetadataUtils.doesTimeOverlap(beginTime, allSpans)) {\n    return {\n      valid: false,\n      message: 'Begin time overlaps an existing timespan region'\n    };\n  }\n  if (!structuralMetadataUtils.doesTimeOverlap(endTime, allSpans)) {\n    return {\n      valid: false,\n      message: 'End time overlaps an existing timespan region'\n    };\n  }\n  // Begin comes before end?\n  if (!structuralMetadataUtils.validateBeforeEndTimeOrder(beginTime, endTime)) {\n    return {\n      valid: false,\n      message: 'Begin time must start before end time'\n    };\n  }\n  // Timespan range overlaps an existing timespan?\n  if (\n    structuralMetadataUtils.doesTimespanOverlap(beginTime, endTime, allSpans)\n  ) {\n    return {\n      valid: false,\n      message: 'New timespan region overlaps an existing timespan region'\n    };\n  }\n\n  // Success!\n  return { valid: true };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport {\n  Button,\n  ButtonToolbar,\n  Col,\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  Row\n} from 'react-bootstrap';\nimport * as actions from '../actions/show-forms';\nimport PropTypes from 'prop-types';\nimport { isEqual } from 'lodash';\nimport { getValidationTitleState } from '../services/form-helper';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nclass HeadingForm extends Component {\n  state = {\n    headingTitle: '',\n    headingChildOf: '',\n    childOfOptions: []\n  };\n\n  componentDidMount() {\n    if (this.props.smData.length > 0) {\n      this.processOptions();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.smData, prevProps.smData)) {\n      this.processOptions();\n    }\n  }\n\n  clearFormValues() {\n    this.setState({\n      headingTitle: '',\n      headingChildOf: '',\n      childOfOptions: []\n    });\n  }\n\n  formIsValid() {\n    const { headingTitle } = this.state;\n    const titleValid = headingTitle && headingTitle.length > 0;\n\n    return titleValid;\n  }\n\n  getOptions() {\n    const allHeaders = structuralMetadataUtils.getItemsOfType(\n      'div',\n      this.props.smData\n    );\n    const options = allHeaders.map(header => (\n      <option value={header.id} key={header.id}>\n        {header.label}\n      </option>\n    ));\n\n    return options;\n  }\n\n  handleCancelClick = () => {\n    this.props.toggleHeading();\n  };\n\n  handleChildOfChange = e => {\n    this.setState({ headingChildOf: e.target.value });\n  };\n\n  handleHeadingChange = e => {\n    this.setState({ headingTitle: e.target.value });\n  };\n\n  handleSubmit = e => {\n    const { headingChildOf, headingTitle } = this.state;\n    let submitItem = { headingChildOf, headingTitle };\n\n    e.preventDefault();\n\n    this.props.onSubmit(submitItem);\n\n    // Clear form\n    this.clearFormValues();\n  };\n\n  processOptions() {\n    const options = this.getOptions();\n    this.setState({ childOfOptions: options });\n  }\n\n  render() {\n    const { headingTitle } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <FormGroup\n          controlId=\"headingTitle\"\n          validationState={getValidationTitleState(headingTitle)}\n        >\n          <ControlLabel>Title</ControlLabel>\n          <FormControl\n            type=\"text\"\n            value={headingTitle}\n            onChange={this.handleHeadingChange}\n          />\n          <FormControl.Feedback />\n        </FormGroup>\n\n        <FormGroup controlId=\"headingChildOf\">\n          <ControlLabel>Child Of</ControlLabel>\n          <FormControl\n            componentClass=\"select\"\n            placeholder=\"select\"\n            onChange={this.handleChildOfChange}\n            value={this.state.headingChildOf}\n          >\n            <option value=\"\">Select...</option>\n            {this.state.childOfOptions}\n          </FormControl>\n        </FormGroup>\n        <Row>\n          <Col xs={12}>\n            <ButtonToolbar className=\"pull-right\">\n              <Button onClick={this.props.cancelClick}>Cancel</Button>\n              <Button\n                bsStyle=\"primary\"\n                type=\"submit\"\n                disabled={!this.formIsValid()}\n              >\n                Save\n              </Button>\n            </ButtonToolbar>\n          </Col>\n        </Row>\n      </form>\n    );\n  }\n}\n\nHeadingForm.propTypes = {\n  cancelClick: PropTypes.func,\n  onSubmit: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(HeadingForm);\n","import * as types from './types';\n\nexport function addHeading(values) {\n  return {\n    type: types.ADD_HEADING,\n    payload: values\n  };\n}\n\nexport function buildSMUI(json) {\n  return {\n    type: types.BUILD_SM_UI,\n    payload: json\n  };\n}\n\nexport function deleteItem(id) {\n  return {\n    type: types.DELETE_ITEM,\n    id\n  };\n}\n\nexport function addDropTargets(item) {\n  return {\n    type: types.ADD_DROP_TARGETS,\n    payload: item\n  };\n}\n\nexport function removeDropTargets() {\n  return {\n    type: types.REMOVE_DROP_TARGETS\n  };\n}\n\nexport function setActiveDragSource(id) {\n  return {\n    type: types.SET_ACTIVE_DRAG_SOURCE,\n    id\n  };\n}\n\nexport function removeActiveDragSources() {\n  return {\n    type: types.REMOVE_ACTIVE_DRAG_SOURCES\n  };\n}\n\nexport function handleListItemDrop(dragSource, dropTarget) {\n  return {\n    type: types.HANDLE_LIST_ITEM_DROP,\n    dragSource,\n    dropTarget\n  };\n}\n","import React, { Component } from 'react';\nimport HeadingForm from '../components/HeadingForm';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\nclass HeadingFormContainer extends Component {\n  state = {\n    message: null\n  };\n\n  submit = values => {\n    const { smData } = this.props;\n    let submittedItem = {\n      headingChildOf: values.headingChildOf,\n      headingTitle: values.headingTitle\n    };\n    let updatedSmData = null;\n\n    // Update the data structure with new heading\n    updatedSmData = structuralMetadataUtils.insertNewHeader(\n      submittedItem,\n      smData\n    );\n\n    // Update redux store\n    this.props.buildSMUI(updatedSmData);\n\n    // Close the form\n    this.props.cancelClick();\n  };\n\n  render() {\n    return <HeadingForm onSubmit={this.submit} cancelClick={this.props.cancelClick} />;\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: data => dispatch(smActions.buildSMUI(data))\n});\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HeadingFormContainer);\n","import React, { Component } from 'react';\nimport {\n  Button,\n  ButtonToolbar,\n  Col,\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  Row\n} from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport {\n  getValidationBeginState,\n  getValidationEndState,\n  getValidationTitleState,\n  isTitleValid,\n  validTimespans\n} from '../services/form-helper';\nimport { isEqual } from 'lodash';\nimport * as peaksActions from '../actions/peaks-instance';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\nclass TimespanForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      beginTime: '',\n      endTime: '',\n      timespanChildOf: '',\n      timespanTitle: '',\n      validHeadings: [],\n      isTyping: false\n    };\n    this.allSpans = null;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { smData } = this.props;\n    if (!isEqual(smData, prevProps.smData)) {\n      this.allSpans = structuralMetadataUtils.getItemsOfType('span', smData);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.timespanOpen && !this.state.isTyping) {\n      const { initSegment, isInitializing, peaksInstance, segment } = nextProps;\n\n      // Set state to get initial begin and end times from temporary segment\n      if (initSegment !== this.props.initSegment && isInitializing) {\n        const { startTime, endTime } = initSegment;\n        this.setState({\n          beginTime: structuralMetadataUtils.toHHmmss(startTime),\n          endTime: structuralMetadataUtils.toHHmmss(endTime)\n        });\n        this.props.updateInitialize(false);\n      }\n\n      // Update state when segment handles are dragged in the waveform\n      if (this.props.peaksInstance !== peaksInstance && !isInitializing) {\n        const { startTime, endTime } = segment;\n        this.setState(\n          {\n            beginTime: structuralMetadataUtils.toHHmmss(startTime),\n            endTime: structuralMetadataUtils.toHHmmss(endTime)\n          },\n          this.updateChildOfOptions()\n        );\n      }\n    }\n  }\n\n  buildHeadingsOptions = () => {\n    const { smData } = this.props;\n    let newSpan = {\n      begin: this.state.beginTime,\n      end: this.state.endTime\n    };\n\n    // Get spans in overall span list which fall before and after the new span\n    let wrapperSpans = structuralMetadataUtils.findWrapperSpans(\n      newSpan,\n      this.allSpans\n    );\n\n    // Get all valid div headings\n    let validHeadings = structuralMetadataUtils.getValidHeadings(\n      wrapperSpans,\n      smData\n    );\n\n    // Update state with valid headings\n    this.setState({ validHeadings });\n  };\n\n  clearHeadingOptions = () => {\n    this.setState({\n      validHeadings: []\n    });\n  };\n\n  clearFormValues() {\n    this.setState({\n      beginTime: '',\n      endTime: '',\n      timespanChildOf: '',\n      timespanTitle: '',\n      validHeadings: [],\n      isTyping: false\n    });\n  }\n\n  formIsValid() {\n    const titleValid = isTitleValid(this.state.timespanTitle);\n    const childOfValid = this.state.timespanChildOf.length > 0;\n    const timesValidResponse = this.localValidTimespans();\n\n    return titleValid && childOfValid && timesValidResponse.valid;\n  }\n\n  handleInputChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n    this.updateChildOfOptions();\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { beginTime, endTime, timespanChildOf, timespanTitle } = this.state;\n\n    this.props.cancelClick();\n    this.props.onSubmit({\n      beginTime,\n      endTime,\n      timespanChildOf,\n      timespanTitle\n    });\n\n    // Clear form values\n    this.clearFormValues();\n  };\n\n  handleTimeChange = (e, callback) => {\n    // Update waveform segment with user inputs in the form\n    this.setState({ isTyping: true });\n\n    this.setState({ [e.target.id]: e.target.value }, () => {\n      callback();\n      this.updateChildOfOptions();\n      const { initSegment, peaksInstance } = this.props;\n      let segment = peaksInstance.peaks.segments.getSegment(initSegment.id);\n      this.props.updateSegment(segment, this.state);\n    });\n  };\n\n  handleCancelClick = () => {\n    this.props.cancelClick();\n  };\n\n  handleChildOfChange = e => {\n    this.setState({ timespanChildOf: e.target.value });\n  };\n\n  updateChildOfOptions() {\n    const timesValidResponse = this.localValidTimespans();\n\n    if (timesValidResponse.valid) {\n      this.buildHeadingsOptions();\n    } else {\n      this.clearHeadingOptions();\n    }\n  }\n\n  /**\n   * A local wrapper for the reusable function 'validTimespans'\n   */\n  localValidTimespans() {\n    const { beginTime, endTime } = this.state;\n    const { allSpans } = this;\n\n    return validTimespans(beginTime, endTime, allSpans, this.props.smData);\n  }\n\n  render() {\n    const { beginTime, endTime, timespanChildOf, timespanTitle } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <FormGroup\n          controlId=\"timespanTitle\"\n          validationState={getValidationTitleState(timespanTitle)}\n        >\n          <ControlLabel>Title</ControlLabel>\n          <FormControl\n            type=\"text\"\n            value={timespanTitle}\n            onChange={this.handleInputChange}\n          />\n          <FormControl.Feedback />\n        </FormGroup>\n\n        <Row>\n          <Col sm={6}>\n            <FormGroup\n              controlId=\"beginTime\"\n              validationState={getValidationBeginState(\n                beginTime,\n                this.allSpans\n              )}\n            >\n              <ControlLabel>Begin Time</ControlLabel>\n              <FormControl\n                type=\"text\"\n                value={beginTime}\n                placeholder=\"00:00:00\"\n                onChange={e => {\n                  this.handleTimeChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n              <FormControl.Feedback />\n            </FormGroup>\n          </Col>\n          <Col sm={6}>\n            <FormGroup\n              controlId=\"endTime\"\n              validationState={getValidationEndState(\n                beginTime,\n                endTime,\n                this.allSpans\n              )}\n            >\n              <ControlLabel>End Time</ControlLabel>\n              <FormControl\n                type=\"text\"\n                value={endTime}\n                placeholder=\"00:00:00\"\n                onChange={e => {\n                  this.handleTimeChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n              <FormControl.Feedback />\n            </FormGroup>\n          </Col>\n        </Row>\n\n        <FormGroup controlId=\"timespanChildOf\">\n          <ControlLabel>Child Of</ControlLabel>\n          <FormControl\n            componentClass=\"select\"\n            placeholder=\"select\"\n            onChange={this.handleChildOfChange}\n            value={timespanChildOf}\n          >\n            <option value=\"\">Select...</option>\n            {this.state.validHeadings.map(item => (\n              <option value={item.id} key={item.id}>\n                {item.label}\n              </option>\n            ))}\n          </FormControl>\n        </FormGroup>\n\n        <Row>\n          <Col xs={12}>\n            <ButtonToolbar className=\"pull-right\">\n              <Button onClick={this.handleCancelClick}>Cancel</Button>\n              <Button\n                bsStyle=\"primary\"\n                type=\"submit\"\n                disabled={!this.formIsValid()}\n              >\n                Save\n              </Button>\n            </ButtonToolbar>\n          </Col>\n        </Row>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData,\n  peaksInstance: state.peaksInstance,\n  segment: state.peaksInstance.segment\n});\n\nconst mapDispatchToProps = {\n  updateSegment: peaksActions.updateSegment\n};\n\nTimespanForm = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimespanForm);\n\nexport default TimespanForm;\n","import React, { Component } from 'react';\nimport TimespanForm from '../components/TimespanForm';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport * as smActions from '../actions/sm-data';\nimport * as peaksActions from '../actions/peaks-instance';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nclass TimespanFormContainer extends Component {\n  state = {\n    message: null\n  };\n\n  submit = values => {\n    // Update the data structure with new heading\n    const { newSpan, updatedData } = structuralMetadataUtils.insertNewTimespan(\n      values,\n      this.props.smData\n    );\n\n    // Update the waveform segments with new timespan\n    this.props.insertNewSegment(newSpan);\n\n    // Update redux store\n    this.props.buildSMUI(updatedData);\n\n    // Close the form\n    this.props.cancelClick();\n  };\n\n  render() {\n    return <TimespanForm {...this.props} onSubmit={this.submit} />;\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: data => dispatch(smActions.buildSMUI(data)),\n  insertNewSegment: newspan => dispatch(peaksActions.insertNewSegment(newspan))\n});\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimespanFormContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Collapse, Row } from 'react-bootstrap';\nimport AlertContainer from '../containers/AlertContainer';\nimport HeadingFormContainer from '../containers/HeadingFormContainer';\nimport TimespanFormContainer from '../containers/TimespanFormContainer';\nimport * as peaksActions from '../actions/peaks-instance';\n\nconst styles = {\n  section: {\n    margin: '4rem 0'\n  },\n  well: {\n    marginTop: '1rem'\n  }\n};\n\nclass ButtonSection extends Component {\n  state = {\n    headingOpen: false,\n    timespanOpen: false,\n    initSegment: null,\n    isInitializing: true\n  };\n\n  updateInitializeFlag = value => {\n    this.setState({\n      isInitializing: value\n    });\n  };\n  handleCancelHeadingClick = () => {\n    this.setState({ headingOpen: false });\n  };\n\n  handleCancelTimespanClick = () => {\n    this.props.deleteTempSegment(this.state.initSegment.id);\n    this.setState({ timespanOpen: false });\n  };\n\n  handleHeadingClick = () => {\n    if (this.state.initSegment !== null) {\n      this.props.deleteTempSegment(this.state.initSegment.id);\n    }\n    this.setState({\n      headingOpen: true,\n      timespanOpen: false\n    });\n  };\n\n  handleTimeSpanClick = () => {\n    this.createDefaultSegment();\n    this.setState({\n      headingOpen: false,\n      timespanOpen: true,\n      isInitializing: true\n    });\n  };\n\n  createDefaultSegment = () => {\n    if (!this.state.timespanOpen) {\n      this.props.createTempSegment();\n      const tempSegment = this.props.peaksInstance.peaks.segments.getSegment(\n        'temp-segment'\n      );\n      this.setState({ initSegment: tempSegment });\n    }\n  };\n\n  render() {\n    const timespanFormProps = {\n      cancelClick: this.handleCancelTimespanClick,\n      initSegment: this.state.initSegment,\n      isInitializing: this.state.isInitializing,\n      timespanOpen: this.state.timespanOpen,\n      updateInitialize: this.updateInitializeFlag\n    };\n    return (\n      <section style={styles.section}>\n        <Row>\n          <Col xs={6}>\n            <Button block onClick={this.handleHeadingClick}>\n              Add a Heading\n            </Button>\n          </Col>\n          <Col xs={6}>\n            <Button block onClick={this.handleTimeSpanClick}>\n              Add a Timespan\n            </Button>\n          </Col>\n        </Row>\n\n        <Collapse in={this.state.headingOpen}>\n          <div className=\"well\" style={styles.well}>\n            <HeadingFormContainer cancelClick={this.handleCancelHeadingClick} />\n          </div>\n        </Collapse>\n        <Collapse in={this.state.timespanOpen}>\n          <div className=\"well\" style={styles.well}>\n            <TimespanFormContainer {...timespanFormProps} />\n          </div>\n        </Collapse>\n        <AlertContainer />\n      </section>\n    );\n  }\n}\n\n// To use in tests as a disconnected component (to access state)\nexport { ButtonSection as PureButtonSection };\n\nconst mapStateToProps = state => ({\n  smData: state.smData,\n  peaksInstance: state.peaksInstance\n});\n\nconst mapDispatchToProps = {\n  createTempSegment: peaksActions.insertTempSegment,\n  deleteTempSegment: peaksActions.deleteTempSegment\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ButtonSection);\n","export const ItemTypes = {\n  SPAN: 'span'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst tooltip = tip => <Tooltip id=\"tooltip\">{tip}</Tooltip>;\n\nconst ListItemInlineEditControls = props => {\n  return (\n    <div className=\"edit-controls-wrapper\">\n      <OverlayTrigger placement=\"left\" overlay={tooltip('Save')}>\n        <Button\n          bsStyle=\"link\"\n          disabled={!props.formIsValid}\n          onClick={props.handleSaveClick}\n        >\n          <FontAwesomeIcon icon=\"save\" />\n        </Button>\n      </OverlayTrigger>\n      <OverlayTrigger\n        placement=\"right\"\n        overlay={tooltip('Cancel')}\n        onClick={props.handleCancelClick}\n      >\n        <Button bsStyle=\"link\">\n          <FontAwesomeIcon icon=\"minus-circle\" />\n        </Button>\n      </OverlayTrigger>\n    </div>\n  );\n};\n\nListItemInlineEditControls.propTypes = {\n  formIsValid: PropTypes.bool,\n  handleSaveClick: PropTypes.func,\n  handleCancelClick: PropTypes.func\n};\n\nexport default ListItemInlineEditControls;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ControlLabel, Form, FormControl, FormGroup } from 'react-bootstrap';\nimport {\n  getExistingFormValues,\n  getValidationBeginState,\n  getValidationEndState,\n  getValidationTitleState,\n  isTitleValid,\n  validTimespans\n} from '../services/form-helper';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport { cloneDeep } from 'lodash';\nimport ListItemInlineEditControls from './ListItemInlineEditControls';\nimport * as peaksActions from '../actions/peaks-instance';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\nconst styles = {\n  formControl: {\n    margin: '0 5px'\n  }\n};\n\nclass TimespanInlineForm extends Component {\n  constructor(props) {\n    super(props);\n\n    // To implement validation logic on begin and end times, we need to remove the current item\n    // from the stored data\n    this.tempSmData = undefined;\n  }\n\n  static propTypes = {\n    item: PropTypes.object,\n    cancelFn: PropTypes.func,\n    saveFn: PropTypes.func\n  };\n\n  state = {\n    beginTime: '',\n    endTime: '',\n    timespanTitle: '',\n    clonedSegment: {},\n    isTyping: false\n  };\n\n  componentDidMount() {\n    const { smData, item, peaksInstance } = this.props;\n\n    // Get a fresh copy of store data\n    this.tempSmData = cloneDeep(smData);\n\n    // Load existing form values\n    this.setState(\n      getExistingFormValues(item.id, this.tempSmData, peaksInstance.peaks)\n    );\n\n    // Remove current list item from the data we're doing validation against in this form\n    this.tempSmData = structuralMetadataUtils.deleteListItem(\n      item.id,\n      this.tempSmData\n    );\n\n    // Save a reference to all the spans for future calculations\n    this.allSpans = structuralMetadataUtils.getItemsOfType(\n      'span',\n      this.tempSmData\n    );\n\n    // Make segment related to timespan editable\n    this.props.activateSegment(item.id);\n\n    this.props.changeSegment();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.peaksInstance !== nextProps.peaksInstance) {\n      if (nextProps.segment && !this.state.isTyping) {\n        this.setState({\n          beginTime: structuralMetadataUtils.toHHmmss(\n            nextProps.segment.startTime\n          ),\n          endTime: structuralMetadataUtils.toHHmmss(nextProps.segment.endTime)\n        });\n      }\n    }\n  }\n\n  formIsValid() {\n    const { beginTime, endTime } = this.state;\n    const titleValid = isTitleValid(this.state.timespanTitle);\n    const timesValidResponse = validTimespans(\n      beginTime,\n      endTime,\n      this.allSpans,\n      this.tempSmData\n    );\n\n    return titleValid && timesValidResponse.valid;\n  }\n\n  handleCancelClick = () => {\n    // Revert to segment to the state before\n    this.props.revertSegment(this.state.clonedSegment);\n    this.props.cancelFn();\n  };\n\n  handleInputChange = (e, callback) => {\n    this.setState({ isTyping: true });\n    this.setState({ [e.target.id]: e.target.value }, () => {\n      callback();\n      const { item, peaksInstance } = this.props;\n      let segment = peaksInstance.peaks.segments.getSegment(item.id);\n      this.props.updateSegment(segment, this.state);\n    });\n  };\n\n  handleSaveClick = () => {\n    this.props.saveSegment(this.state);\n    const { beginTime, endTime, timespanTitle } = this.state;\n    this.props.saveFn(this.props.item.id, {\n      beginTime,\n      endTime,\n      timespanTitle\n    });\n  };\n\n  render() {\n    const { beginTime, endTime, timespanTitle } = this.state;\n\n    return (\n      <Form inline>\n        <div className=\"row-wrapper\">\n          <div>\n            <FormGroup\n              controlId=\"timespanTitle\"\n              validationState={getValidationTitleState(timespanTitle)}\n            >\n              <ControlLabel>Title</ControlLabel>\n              <FormControl\n                type=\"text\"\n                style={styles.formControl}\n                value={timespanTitle}\n                onChange={e => {\n                  this.handleInputChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n            </FormGroup>\n            <FormGroup\n              controlId=\"beginTime\"\n              validationState={getValidationBeginState(\n                beginTime,\n                this.allSpans\n              )}\n            >\n              <ControlLabel>Begin Time</ControlLabel>\n              <FormControl\n                type=\"text\"\n                style={styles.formControl}\n                value={beginTime}\n                onChange={e => {\n                  this.handleInputChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n            </FormGroup>\n            <FormGroup\n              controlId=\"endTime\"\n              validationState={getValidationEndState(\n                beginTime,\n                endTime,\n                this.allSpans\n              )}\n            >\n              <ControlLabel>End Time</ControlLabel>\n              <FormControl\n                type=\"text\"\n                style={styles.formControl}\n                value={endTime}\n                onChange={e => {\n                  this.handleInputChange(e, () => {\n                    this.setState({ isTyping: false });\n                  });\n                }}\n              />\n            </FormGroup>\n          </div>\n          <ListItemInlineEditControls\n            formIsValid={this.formIsValid()}\n            handleSaveClick={this.handleSaveClick}\n            handleCancelClick={this.handleCancelClick}\n          />\n        </div>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData,\n  peaksInstance: state.peaksInstance,\n  segment: state.peaksInstance.segment\n});\n\nconst mapDispatchToProps = {\n  activateSegment: peaksActions.activateSegment,\n  revertSegment: peaksActions.revertSegment,\n  saveSegment: peaksActions.saveSegment,\n  updateSegment: peaksActions.updateSegment,\n  changeSegment: peaksActions.changeSegment\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimespanInlineForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ControlLabel, Form, FormControl, FormGroup } from 'react-bootstrap';\nimport {\n  getExistingFormValues,\n  getValidationTitleState,\n  isTitleValid\n} from '../services/form-helper';\nimport { connect } from 'react-redux';\nimport { cloneDeep } from 'lodash';\nimport ListItemInlineEditControls from './ListItemInlineEditControls';\n\nconst styles = {\n  formControl: {\n    margin: '0 5px',\n    width: '300px'\n  }\n};\n\nclass HeadingInlineForm extends Component {\n  constructor(props) {\n    super(props);\n\n    // To implement validation logic on begin and end times, we need to remove the current item\n    // from the stored data\n    this.tempSmData = undefined;\n  }\n\n  static propTypes = {\n    item: PropTypes.object,\n    cancelFn: PropTypes.func,\n    saveFn: PropTypes.func\n  };\n\n  state = {\n    headingTitle: ''\n  };\n\n  componentDidMount() {\n    const { smData } = this.props;\n\n    // Get a fresh copy of store data\n    this.tempSmData = cloneDeep(smData);\n\n    // Load existing form values\n    this.setState(getExistingFormValues(this.props.item.id, this.tempSmData));\n  }\n\n  formIsValid() {\n    return isTitleValid(this.state.headingTitle);\n  }\n\n  handleCancelClick = () => {\n    this.props.cancelFn();\n  };\n\n  handleInputChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  handleSaveClick = () => {\n    const { headingTitle } = this.state;\n    this.props.saveFn(this.props.item.id, {\n      headingTitle\n    });\n  };\n\n  render() {\n    const { headingTitle } = this.state;\n\n    return (\n      <Form inline>\n        <div className=\"row-wrapper\">\n          <div>\n            <FormGroup\n              controlId=\"headingTitle\"\n              validationState={getValidationTitleState(headingTitle)}\n            >\n              <ControlLabel>Title</ControlLabel>\n              <FormControl\n                type=\"text\"\n                style={styles.formControl}\n                value={headingTitle}\n                onChange={this.handleInputChange}\n              />\n            </FormGroup>\n          </div>\n          <ListItemInlineEditControls\n            formIsValid={this.formIsValid()}\n            handleSaveClick={this.handleSaveClick}\n            handleCancelClick={this.handleCancelClick}\n          />\n        </div>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(mapStateToProps)(HeadingInlineForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TimespanInlineForm from './TimespanInlineForm';\nimport HeadingInlineForm from './HeadingInlineForm';\nimport { buildSMUI } from '../actions/sm-data';\nimport { cloneDeep } from 'lodash';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\nclass ListItemEditForm extends Component {\n  constructor(props) {\n    super(props);\n    this.type = this.props.item.type;\n    this.id = this.props.item.id;\n  }\n\n  static propTypes = {\n    handleEditFormCancel: PropTypes.func,\n    item: PropTypes.object.isRequired\n  };\n\n  addUpdatedValues(item, payload) {\n    if (item.type === 'div') {\n      item.label = payload.headingTitle;\n    } else if (item.type === 'span') {\n      item.label = payload.timespanTitle;\n      item.begin = payload.beginTime;\n      item.end = payload.endTime;\n    }\n\n    return item;\n  }\n\n  handleCancelClick = e => {\n    this.props.handleEditFormCancel();\n  };\n\n  handleSaveClick = (id, payload) => {\n    // Clone smData\n    let clonedItems = cloneDeep(this.props.smData);\n\n    // Get the original item\n    /* eslint-disable */\n    let item = structuralMetadataUtils.findItem(id, clonedItems);\n    /* eslint-enable */\n\n    // Update item values\n    item = this.addUpdatedValues(item, payload);\n\n    // Send updated smData back to redux\n    this.props.buildSMUI(clonedItems);\n\n    // Turn off editing state\n    this.props.handleEditFormCancel();\n  };\n\n  render() {\n    const { item } = this.props;\n\n    if (item.type === 'span') {\n      return (\n        <TimespanInlineForm\n          item={item}\n          cancelFn={this.handleCancelClick}\n          saveFn={this.handleSaveClick}\n        />\n      );\n    }\n\n    if (item.type === 'div') {\n      return (\n        <HeadingInlineForm\n          item={item}\n          cancelFn={this.handleCancelClick}\n          saveFn={this.handleSaveClick}\n        />\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nconst mapDispathToProps = dispatch => ({\n  buildSMUI: json => dispatch(buildSMUI(json))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispathToProps\n)(ListItemEditForm);\n","import React from 'react';\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { connect } from 'react-redux';\n\nconst tooltip = tip => <Tooltip id=\"tooltip\">{tip}</Tooltip>;\n\nconst ListItemControls = props => {\n  const {\n    itemType,\n    handleShowDropTargetsClick,\n    handleEditClick,\n    handleDelete,\n    showForms\n  } = props;\n\n  return (\n    <div className=\"edit-controls-wrapper\">\n      {itemType === 'span' && (\n        <OverlayTrigger placement=\"left\" overlay={tooltip('Show drop targets')}>\n          <Button\n            bsStyle=\"link\"\n            disabled={showForms.disabled}\n            onClick={handleShowDropTargetsClick}\n          >\n            <FontAwesomeIcon icon=\"dot-circle\" />\n          </Button>\n        </OverlayTrigger>\n      )}\n      <OverlayTrigger placement=\"top\" overlay={tooltip('Edit')}>\n        <Button\n          bsStyle=\"link\"\n          onClick={handleEditClick}\n          disabled={showForms.disabled}\n        >\n          <FontAwesomeIcon icon=\"pen\" />\n        </Button>\n      </OverlayTrigger>\n      <OverlayTrigger placement=\"right\" overlay={tooltip('Delete')}>\n        <Button\n          bsStyle=\"link\"\n          onClick={handleDelete}\n          disabled={showForms.disabled}\n        >\n          <FontAwesomeIcon icon=\"trash\" />\n        </Button>\n      </OverlayTrigger>\n    </div>\n  );\n};\n\nListItemControls.propTypes = {\n  handleShowDropTargetsClick: PropTypes.func,\n  handleEditClick: PropTypes.func,\n  handleDelete: PropTypes.func,\n  itemType: PropTypes.string\n};\n\nconst mapStateToProps = state => ({\n  showForms: state.showForms\n});\n\nexport default connect(mapStateToProps)(ListItemControls);\n","import React, { Component } from 'react';\nimport List from './List';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\nimport * as peaksActions from '../actions/peaks-instance';\nimport * as showForms from '../actions/show-forms';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../services/Constants';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport ListItemEditForm from './ListItemEditForm';\nimport ListItemControls from './ListItemControls';\n\nconst spanSource = {\n  beginDrag(props) {\n    return { id: props.item.id };\n  }\n};\n\nconst spanTarget = {\n  canDrop(props, monitor) {\n    // You can disallow drop based on props or item\n    return true;\n  }\n};\n\nfunction collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    // You can ask the monitor about the current drag state:\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({ shallow: true }),\n    canDrop: monitor.canDrop(),\n    itemType: monitor.getItemType()\n  };\n}\n\nclass ListItem extends Component {\n  static propTypes = {\n    item: PropTypes.shape({\n      active: PropTypes.bool,\n      begin: PropTypes.string,\n      end: PropTypes.string,\n      items: PropTypes.array,\n      id: PropTypes.string,\n      type: PropTypes.string,\n      editing: PropTypes.bool\n    })\n  };\n\n  state = {\n    editing: false\n  };\n\n  handleDelete = () => {\n    const { item } = this.props;\n    this.props.deleteItem(item.id);\n    this.props.deleteSegment(item);\n  };\n\n  handleEditClick = () => {\n    /* eslint-disable */\n    const { id, type } = this.props.item;\n    /* eslint-enable */\n\n    // Disable the edit buttons of other list items\n    this.props.handleEditingTimespans(0);\n\n    this.setState({ editing: true });\n  };\n\n  handleEditFormCancel = () => {\n    this.setState({ editing: false });\n\n    // Enable the edit buttons of other list items\n    this.props.handleEditingTimespans(1);\n  };\n\n  handleShowDropTargetsClick = () => {\n    const {\n      addDropTargets,\n      item,\n      removeActiveDragSources,\n      removeDropTargets,\n      setActiveDragSource\n    } = this.props;\n\n    // Clear out any current drop targets\n    removeDropTargets();\n\n    // Handle closing of current drag source drop targets, and exit with a clean UI.\n    if (item.active === true) {\n      // Clear out any active drag sources\n      removeActiveDragSources();\n      return;\n    }\n    // Clear out any active drag sources\n    removeActiveDragSources();\n\n    // Calculate possible drop targets\n    addDropTargets(item);\n\n    // Redux way of setting active drag list item\n    setActiveDragSource(item.id);\n  };\n\n  render() {\n    const {\n      item,\n      item: { begin },\n      item: { end },\n      item: { items },\n      item: { label },\n      item: { type },\n      item: { active },\n      connectDragSource,\n      connectDropTarget\n    } = this.props;\n\n    const subMenu = items && items.length > 0 ? <List items={items} /> : null;\n\n    return connectDragSource(\n      connectDropTarget(\n        <li className={active ? 'active' : ''}>\n          {this.state.editing && (\n            <ListItemEditForm\n              item={item}\n              handleEditFormCancel={this.handleEditFormCancel}\n            />\n          )}\n\n          {!this.state.editing && (\n            <div className=\"row-wrapper\">\n              {type === 'span' && (\n                <span className=\"structure-title\">\n                  {label} ({begin} - {end})\n                </span>\n              )}\n              {type === 'div' && (\n                <div className=\"structure-title heading\">{label}</div>\n              )}\n              <ListItemControls\n                handleDelete={this.handleDelete}\n                handleEditClick={this.handleEditClick}\n                itemType={type}\n                handleShowDropTargetsClick={this.handleShowDropTargetsClick}\n              />\n            </div>\n          )}\n\n          {subMenu}\n        </li>\n      )\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteItem: smActions.deleteItem,\n  addDropTargets: smActions.addDropTargets,\n  removeDropTargets: smActions.removeDropTargets,\n  removeActiveDragSources: smActions.removeActiveDragSources,\n  setActiveDragSource: smActions.setActiveDragSource,\n  deleteSegment: peaksActions.deleteSegment,\n  handleEditingTimespans: showForms.handleEditingTimespans\n};\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nconst ConnectedDropTarget = DropTarget(ItemTypes.SPAN, spanTarget, collectDrop);\nconst ConnectedDragSource = DragSource(ItemTypes.SPAN, spanSource, collectDrag);\nconst DragConnected = ConnectedDropTarget(ConnectedDragSource(ListItem));\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DragConnected);\n","import React, { Component } from 'react';\nimport { DropTarget } from 'react-dnd';\nimport { ItemTypes } from '../services/Constants';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\n\nconst styles = {\n  li: {\n    border: '2px #999 dashed',\n    opacity: 0.3\n  },\n  liHovered: {\n    border: '5px #999 dashed',\n    opacity: 0.5\n  }\n};\n\nconst optionalTarget = {\n  hover(props, monitor, component) {\n    //console.log('hover over drop target');\n  },\n\n  drop(props, monitor, component) {\n    let dragItem = monitor.getItem();\n\n    props.handleListItemDrop(dragItem, props.item);\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDropTarget: connect.dropTarget(),\n    // You can ask the monitor about the current drag state:\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({ shallow: true }),\n    canDrop: monitor.canDrop(),\n    itemType: monitor.getItemType()\n  };\n}\n\nclass PlaceholderItem extends Component {\n  render() {\n    const { isOver, connectDropTarget } = this.props;\n\n    return connectDropTarget(\n      <li className=\"row-wrapper\" style={isOver ? styles.liHovered : styles.li}>\n        Drop here\n      </li>\n    );\n  }\n}\n\nconst ConnectedDropTarget = DropTarget(ItemTypes.SPAN, optionalTarget, collect)(\n  PlaceholderItem\n);\n\nconst mapDispatchToProps = dispatch => ({\n  handleListItemDrop: (dragItem, dropItem) =>\n    dispatch(smActions.handleListItemDrop(dragItem, dropItem))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ConnectedDropTarget);\n","import React from 'react';\nimport ListItem from './ListItem';\nimport PlaceholderItem from './PlaceholderItem';\n\nconst List = props => {\n  return (\n    <ul className=\"structure-list\">\n      {props.items.map((item, i) => {\n        if (!item) {\n          return null;\n        }\n        if (item.type === 'optional') {\n          return <PlaceholderItem key={i} item={item} />;\n        }\n        return <ListItem key={item.id} item={item} />;\n      })}\n    </ul>\n  );\n};\n\nexport default List;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/sm-data';\nimport APIUtils from '../api/Utils';\nimport * as showFormActions from '../actions/show-forms';\nimport uuidv1 from 'uuid/v1';\nimport { cloneDeep } from 'lodash';\n\nconst apiUtils = new APIUtils();\n\nclass GenerateStructureContainer extends Component {\n  async componentDidMount() {\n    try {\n      const response = await apiUtils.getRequest('structure.json');\n      let structureJS = response.data;\n\n      // Add unique ids to every object\n      let smData = this.addIds([structureJS]);\n\n      // Update the redux store\n      this.props.buildSMUI(smData);\n    } catch (error) {\n      if (error.response !== undefined) {\n        this.props.handleResponse(error.response.status);\n      } else if (error.request !== undefined) {\n        this.props.handleResponse(error.request.status);\n      } else {\n        this.props.handleResponse(-1);\n      }\n    }\n  }\n\n  /**\n   * This function adds a unique, front-end only id, to every object in the data structure\n   * @param {Array} structureJS\n   * @returns {Array}\n   */\n  addIds(structureJS) {\n    let structureWithIds = cloneDeep(structureJS);\n\n    // Recursively loop through data structure\n    let fn = items => {\n      for (let item of items) {\n        // Create and add an id\n        item.id = uuidv1();\n\n        // Send child items back into the function\n        if (item.items && item.items.length > 0) {\n          fn(item.items);\n        }\n      }\n    };\n\n    fn(structureWithIds);\n\n    return structureWithIds;\n  }\n\n  render() {\n    return null;\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: smData => dispatch(actions.buildSMUI(smData)),\n  handleResponse: statusCode =>\n    dispatch(showFormActions.handleResponse(statusCode))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(GenerateStructureContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport List from '../components/List';\nimport GenerateStructureContainer from './GenerateStructureContainer';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport * as actions from '../actions/show-forms';\nimport APIUtils from '../api/Utils';\n\nconst apiUtils = new APIUtils();\n\nclass StructureOutputContainer extends Component {\n  handleSaveItClick = () => {\n    let postData = { json: this.props.smData[0] };\n    apiUtils\n      .postRequest('structure.json', postData)\n      .then(response => {\n        this.props.handleResponse(response.status, response.statusText);\n      })\n      .catch(error => {\n        if (error.response !== undefined) {\n          this.props.handleResponse(error.response.status);\n        } else {\n          this.props.handleResponse(error.request.status);\n        }\n      });\n  };\n\n  render() {\n    const { smData = [] } = this.props;\n    return (\n      <section>\n        <h3>HTML Structure Tree from a masterfile in server</h3>\n        <br />\n        <GenerateStructureContainer />\n        <List items={smData} />\n        <Row>\n          <Col xs={12} className=\"text-right\">\n            <Button bsStyle=\"primary\" onClick={this.handleSaveItClick}>\n              Save Structure\n            </Button>\n          </Col>\n        </Row>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(StructureOutputContainer);\n","import React, { Component } from 'react';\nimport './App.css';\nimport WaveformContainer from './containers/WaveformContainer';\nimport ButtonSection from './components/ButtonSection';\nimport StructureOutputContainer from './containers/StructureOutputContainer';\nimport { DragDropContextProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\n// Font Awesome Imports\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faDotCircle,\n  faMinusCircle,\n  faPen,\n  faSave,\n  faTrash\n} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faDotCircle, faMinusCircle, faPen, faSave, faTrash);\n\nclass App extends Component {\n  render() {\n    return (\n      <DragDropContextProvider backend={HTML5Backend}>\n        <div className=\"container\">\n          <h1>Test Structural Metadata Editor</h1>\n          <WaveformContainer />\n          <ButtonSection />\n          <StructureOutputContainer />\n        </div>\n      </DragDropContextProvider>\n    );\n  }\n}\n\nexport default App;\n","import * as types from '../actions/types';\n\nconst initialState = {\n  alert: false,\n  disabled: false\n};\n\nconst showForms = (state = initialState, action) => {\n  switch (action.type) {\n    case types.API_RESPONSE:\n      return Object.assign({}, state, {\n        statusCode: action.code,\n        alert: true\n      });\n\n    case types.CLOSE_ALERT:\n      return Object.assign({}, state, {\n        alert: false,\n        blocking: false\n      });\n\n    case types.IS_EDITING_TIMESPAN:\n      if (action.code === 0) {\n        return Object.assign({}, state, {\n          statusCode: action.code,\n          disabled: true\n        });\n      }\n\n      return Object.assign({}, state, {\n        statusCode: action.code,\n        disabled: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default showForms;\n","import * as types from '../actions/types';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport { cloneDeep } from 'lodash';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nconst initialState = [];\nlet stateClone = null;\nlet newState = null;\n\nconst smData = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_HEADING:\n      stateClone = cloneDeep(state);\n      stateClone.push(action.payload);\n      return stateClone;\n\n    case types.BUILD_SM_UI:\n      return action.payload;\n\n    case types.DELETE_ITEM:\n      return structuralMetadataUtils.deleteListItem(action.id, state);\n\n    case types.ADD_DROP_TARGETS:\n      newState = structuralMetadataUtils.determineDropTargets(\n        action.payload,\n        state\n      );\n      return newState;\n\n    case types.REMOVE_DROP_TARGETS:\n      let noDropTargetsState = structuralMetadataUtils.removeDropTargets(state);\n      return noDropTargetsState;\n\n    case types.SET_ACTIVE_DRAG_SOURCE:\n      stateClone = cloneDeep(state);\n      let target = structuralMetadataUtils.findItem(action.id, stateClone);\n      // Put an active flag on list item\n      target.active = true;\n      return stateClone;\n\n    case types.REMOVE_ACTIVE_DRAG_SOURCES:\n      let noActiveDragSourcesState = structuralMetadataUtils.removeActiveDragSources(\n        state\n      );\n      return noActiveDragSourcesState;\n\n    case types.HANDLE_LIST_ITEM_DROP:\n      newState = structuralMetadataUtils.handleListItemDrop(\n        action.dragSource,\n        action.dropTarget,\n        state\n      );\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default smData;\n","// Colors for segments from Avalon branding pallette\nconst COLOR_PALETTE = ['#80A590', '#2A5459', '#FBB040'];\n\nexport default class WaveformDataUtils {\n  /**\n   * Initialize Peaks instance for the app\n   * @param {Array} smData - current structured metadata from the server masterfile\n   */\n  initSegments(smData) {\n    let initSegments = [];\n    let count = 0;\n\n    // Recursively build segments for timespans in the structure\n    let createSegment = items => {\n      for (let item of items) {\n        if (item.type === 'span') {\n          count = count > 1 ? 0 : count;\n          const { begin, end, label, id } = item;\n          initSegments.push({\n            startTime: this.toMs(begin),\n            endTime: this.toMs(end),\n            labelText: label,\n            id: id,\n            color: COLOR_PALETTE[count]\n          });\n          count++;\n        }\n        if (item.items && item.items.length > 0) {\n          createSegment(item.items);\n        }\n      }\n    };\n\n    // Build segments from initial metadata structure\n    createSegment(smData);\n\n    return initSegments;\n  }\n\n  /**\n   * Add a new segment to Peaks when a new timespan is created\n   * @param {Object} newSpan - new span created for the user input\n   * @param {Object} peaksInstance - peaks instance for the waveform\n   */\n  insertNewSegment(newSpan, peaksInstance) {\n    const { begin, end, label, id } = newSpan;\n    peaksInstance.segments.add({\n      startTime: this.toMs(begin),\n      endTime: this.toMs(end),\n      labelText: label,\n      id: id\n    });\n\n    return peaksInstance;\n  }\n\n  /**\n   * Add a temporary segment to be edited when adding a new timespan to structure\n   * @param {Object} peaksInstance - peaks instance for the current waveform\n   */\n  insertTempSegment(peaksInstance) {\n    // Current time of the playhead\n    let currentTime = peaksInstance.player.getCurrentTime();\n    let rangeEndTime;\n\n    const currentSegments = this.sortSegments(\n      peaksInstance.segments.getSegments(),\n      'startTime'\n    );\n\n    // Get the start and end times for temporary segment without overlapping current segments\n    currentSegments.map(segment => {\n      if (currentTime >= segment.startTime && currentTime < segment.endTime) {\n        // adds 0.01 to check consecutive segments with only a 0.01s difference\n        currentTime = segment.endTime + 0.01;\n      }\n      return currentTime;\n    });\n\n    rangeEndTime = currentTime + 60;\n\n    currentSegments.map(segment => {\n      if (rangeEndTime >= segment.startTime && rangeEndTime < segment.endTime) {\n        rangeEndTime = segment.startTime - 0.01;\n      }\n      return rangeEndTime;\n    });\n\n    peaksInstance.player.seek(currentTime);\n    peaksInstance.segments.add({\n      startTime: currentTime,\n      endTime: rangeEndTime,\n      editable: true,\n      color: COLOR_PALETTE[2],\n      id: 'temp-segment'\n    });\n\n    return peaksInstance;\n  }\n\n  /**\n   * Delete the corresponding segment when a timespan is deleted\n   * @param {Object} item - item to be deleted\n   * @param {Object} peaksInstance - peaks instance for the current waveform\n   */\n  deleteSegments(item, peaksInstance) {\n    let deleteChildren = item => {\n      let children = item.items;\n      for (let child of children) {\n        if (child.type === 'span') {\n          peaksInstance.segments.removeById(child.id);\n        }\n        if (child.items && child.items.length > 0) {\n          deleteChildren(child);\n        }\n      }\n    };\n\n    if (item.type === 'div') {\n      deleteChildren(item);\n    }\n\n    peaksInstance.segments.removeById(item.id);\n    return peaksInstance;\n  }\n\n  /**\n   * Update the colors of the segment to alternate between colors in Avalon color pallette\n   * @param {Object} peaksInstance - current peaks instance for the waveform\n   */\n  rebuildPeaks(peaksInstance) {\n    let clonedSegments = this.sortSegments(\n      peaksInstance.segments.getSegments(),\n      'startTime'\n    );\n    peaksInstance.segments.removeAll();\n    clonedSegments.forEach((segment, index) => {\n      segment.color = this.isOdd(index) ? COLOR_PALETTE[1] : COLOR_PALETTE[0];\n      peaksInstance.segments.add(segment);\n    });\n\n    return peaksInstance;\n  }\n\n  /**\n   * Change color and add handles for editing the segment in the waveform\n   * @param {String} id - ID of the segment to be edited\n   * @param {Object} peaksInstance - current peaks instance for the waveform\n   */\n  activateSegment(id, peaksInstance) {\n    // Remove the current segment\n    const [removedSegment] = peaksInstance.segments.removeById(id);\n\n    // Create a new segment with the same properties and set editable to true\n    peaksInstance.segments.add({\n      ...removedSegment,\n      editable: true,\n      color: COLOR_PALETTE[2]\n    });\n\n    let startTime = peaksInstance.segments.getSegment(id).startTime;\n    // Move play head to the start time of the selected segment\n    peaksInstance.player.seek(startTime);\n\n    return peaksInstance;\n  }\n\n  /**\n   * Revert color and remove handles for editing of the segment\n   * @param {String} id - ID of the segment being saved\n   * @param {Object} peaksInstance - current peaks instance for the waveform\n   */\n  deactivateSegment(id, peaksInstance) {\n    // Sort segments by start time\n    let segments = this.sortSegments(\n      peaksInstance.segments.getSegments(),\n      'startTime'\n    );\n\n    let index = segments.map(seg => seg.id).indexOf(id);\n\n    // Remove the current segment\n    const [removedSegment] = peaksInstance.segments.removeById(id);\n\n    // Create a new segment and revert to its original color\n    peaksInstance.segments.add({\n      ...removedSegment,\n      editable: false,\n      color: this.isOdd(index) ? COLOR_PALETTE[1] : COLOR_PALETTE[0]\n    });\n\n    return peaksInstance;\n  }\n\n  /**\n   * Save the segment into the Peaks\n   * @param {Object} currentState - current values for the timespan to be saved\n   * @param {Object} peaksInstance - current peaks instance for waveform\n   */\n  saveSegment(currentState, peaksInstance) {\n    const { beginTime, endTime, clonedSegment } = currentState;\n    peaksInstance.segments.removeById(clonedSegment.id);\n    peaksInstance.segments.add({\n      ...clonedSegment,\n      startTime: this.toMs(beginTime),\n      endTime: this.toMs(endTime)\n    });\n    return peaksInstance;\n  }\n\n  /**\n   * Reverse the changes made in peaks waveform when changes are cancelled\n   * @param {Object} clonedSegment - cloned segment before changing peaks waveform\n   * @param {Object} peaksInstance - current peaks instance for wavefrom\n   */\n  revertSegment(clonedSegment, peaksInstance) {\n    peaksInstance.segments.removeById(clonedSegment.id);\n    peaksInstance.segments.add(clonedSegment);\n    return peaksInstance;\n  }\n\n  /**\n   * Update Peaks instance when user changes the start and end times from the edit forms\n   * @param {Object} segment - segment related to timespan\n   * @param {Object} currentState - current begin and end times from the input form\n   * @param {Object} peaksInstance - current peaks instance for waveform\n   */\n  updateSegment(segment, currentState, peaksInstance) {\n    const { beginTime, endTime } = currentState;\n    let beginSeconds = this.toMs(beginTime);\n    let endSeconds = this.toMs(endTime);\n    if (beginSeconds < segment.endTime && segment.startTime !== beginSeconds) {\n      let [removed] = peaksInstance.segments.removeById(segment.id);\n      peaksInstance.segments.add({\n        ...removed,\n        startTime: beginSeconds\n      });\n      return peaksInstance;\n    }\n    if (endSeconds > segment.startTime && segment.endTime !== endSeconds) {\n      let [removed] = peaksInstance.segments.removeById(segment.id);\n      peaksInstance.segments.add({\n        ...removed,\n        endTime: endSeconds\n      });\n      return peaksInstance;\n    }\n    return peaksInstance;\n  }\n\n  isOdd(num) {\n    return num % 2;\n  }\n\n  toMs(strTime) {\n    let [hours, minutes, seconds] = strTime.split(':');\n    let hoursAndMins = parseInt(hours) * 3600 + parseInt(minutes) * 60;\n    let secondsIn = seconds === '' ? 0.0 : parseFloat(seconds);\n    return hoursAndMins + secondsIn;\n  }\n\n  sortSegments(segments, sortBy) {\n    return segments.sort((x, y) => x[sortBy] - y[sortBy]);\n  }\n}\n","import * as types from '../actions/types';\nimport WaveformDataUtils from '../services/WaveformDataUtils';\nimport Peaks from 'peaks.js';\nimport { fromEvent } from 'rxjs';\n\nconst waveformUtils = new WaveformDataUtils();\nconst initialState = {\n  peaks: {},\n  events: null,\n  segment: null\n};\nlet newPeaks = null;\n\nconst peaksInstance = (state = initialState, action) => {\n  switch (action.type) {\n    case types.INIT_PEAKS:\n      let segments = waveformUtils.initSegments(action.smData);\n      let peaksInstance = Peaks.init({\n        ...action.options,\n        segments: segments\n      });\n      return {\n        peaks: peaksInstance,\n        events: fromEvent(peaksInstance, 'segments.dragged'),\n        segment: { ...state.segment }\n      };\n\n    case types.INSERT_SEGMENT:\n      newPeaks = waveformUtils.insertNewSegment(action.payload, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: waveformUtils.rebuildPeaks(newPeaks)\n      };\n\n    case types.DELETE_SEGMENT:\n      newPeaks = waveformUtils.deleteSegments(action.payload, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: waveformUtils.rebuildPeaks(newPeaks)\n      };\n\n    case types.ACTIVATE_SEGMENT:\n      newPeaks = waveformUtils.activateSegment(action.payload, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: newPeaks\n      };\n\n    case types.SAVE_SEGMENT:\n      newPeaks = waveformUtils.deactivateSegment(\n        action.payload.clonedSegment.id,\n        {\n          ...state.peaks\n        }\n      );\n      let rebuiltPeaks = waveformUtils.saveSegment(action.payload, {\n        ...newPeaks\n      });\n      return {\n        ...state,\n        peaks: rebuiltPeaks\n      };\n\n    case types.REVERT_SEGMENT:\n      newPeaks = waveformUtils.deactivateSegment(action.payload.id, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: waveformUtils.revertSegment(action.payload, {\n          ...newPeaks\n        })\n      };\n\n    case types.UPDATE_SEGMENT:\n      newPeaks = waveformUtils.updateSegment(action.segment, action.state, {\n        ...state.peaks\n      });\n      return {\n        ...state,\n        peaks: { ...newPeaks }\n      };\n\n    case types.DRAG_SEGMENT:\n      return {\n        ...state,\n        segment: action.payload\n      };\n\n    case types.TEMP_INSERT_SEGMENT:\n      newPeaks = waveformUtils.insertTempSegment({ ...state.peaks });\n      return {\n        ...state,\n        peaks: { ...newPeaks }\n      };\n\n    case types.TEMP_DELETE_SEGMENT:\n      state.peaks.segments.removeById(action.payload);\n      return { ...state };\n\n    default:\n      return state;\n  }\n};\n\nexport default peaksInstance;\n","import { combineReducers } from 'redux';\nimport showForms from './show-forms';\nimport smData from './sm-data';\nimport peaksInstance from './peaks-instance';\n\nexport default combineReducers({\n  showForms,\n  smData,\n  peaksInstance\n});\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport registerServiceWorker from './registerServiceWorker';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}