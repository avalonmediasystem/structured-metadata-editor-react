{"version":3,"sources":["components/Waveform.js","actions/types.js","actions/show-forms.js","components/ButtonSection.js","actions/sm-data.js","containers/SampleGenerateButtonContainer.js","services/Constants.js","components/ListItem.js","components/PlaceholderItem.js","components/List.js","services/StructuralMetadataUtils.js","components/HeadingForm.js","containers/HeadingFormContainer.js","components/TimespanForm.js","containers/TimespanFormContainer.js","containers/ModalContainer.js","containers/StructureOutputContainer.js","App.js","reducers/show-forms.js","reducers/sm-data.js","reducers/index.js","registerServiceWorker.js","index.js"],"names":["Waveform","react_default","a","createElement","className","ADD_HEADING","BUILD_SM_UI","DELETE_ITEM","ADD_DROP_TARGETS","REMOVE_DROP_TARGETS","SET_ACTIVE_DRAG_SOURCE","REMOVE_ACTIVE_DRAG_SOURCES","HANDLE_LIST_ITEM_DROP","toggleHeading","show","type","mode","arguments","length","undefined","label","toggleTimespan","showModal","listItemType","closeModal","ButtonSection","handleHeadingClick","_this","props","handleTimeSpanClick","ButtonToolbar","Button","onClick","this","Component","connect","state","showForms","actions","buildSMUI","json","types","payload","deleteItem","item","SampleGenerateButtonContainer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleBuildItClick","smData","structuralTree","href","target","dispatch","ItemTypes","spanSource","beginDrag","console","log","EditControls","itemType","index_es","icon","handleShowDropTargetsClick","handleEditClick","handleDelete","ListItem","_this$props$item","_this$props","addDropTargets","removeActiveDragSources","removeDropTargets","setActiveDragSource","active","_this$props2","begin","end","items","connectDragSource","connectDropTarget","subMenu","components_List","ListItem_EditControls","mapDispatchToProps","smActions","showFormActions","DragConnected","DropTarget","canDrop","monitor","hover","component","getItem","dropTarget","isOver","isOverCurrent","shallow","getItemType","ConnectedDropTarget","DragSource","dragSource","isDragging","ConnectedDragSource","styles","li","border","opacity","liHovered","PlaceholderItem","style","drop","dragItem","handleListItemDrop","dropItem","List","map","i","components_PlaceholderItem","key","components_ListItem","StructuralMetadataUtils","dndHelper","addSpanAfter","clonedItems","wrapperSpanAfter","afterParent","getParentDiv","afterIndex","indexOf","splice","createDropZoneObject","stuckInMiddle","spanIndex","siblings","parentDiv","uuidv1","obj","timespanTitle","beginTime","endTime","allItems","toConsumableArray","indexToDelete","_","findIndex","wrapperSpans","findWrapperSpans","getItemsOfType","sibling","push","unshift","grandParentDiv","parentIndex","before","beforeParent","beforeIndex","after","time","allSpans","toMs","valid","spanBegin","spanEnd","filteredSpans","filter","span","foundItem","findItem","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","err","return","newSpan","spansBefore","spansAfter","options","getItems","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","currentObj","objectSpread","child","foundDiv","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","currentChild","validHeadings","findSpanItem","targetSpan","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","childItem","itemToMove","findItemByLabel","itemToMoveParent","itemToMoveItemIndex","dropTargetParent","dropTargetItemIndex","targetLabel","headingChildOf","headingTitle","timespanChildOf","spanObj","createSpanObject","insertIndex","childSpans","removeActive","parent","removeFromTree","childTypeToRemove","strTime","moment","duration","asMilliseconds","structuralMetadataUtils","HeadingForm","childOfOptions","handleCancelClick","handleChildOfChange","e","setState","handleHeadingChange","handleSubmit","preventDefault","_this$state","onSubmit","unEditedItem","getOptions","loadExistingValues","header","Modal","Header","closeButton","Title","Body","FormGroup","controlId","validationState","getValidationTitleState","ControlLabel","FormControl","onChange","Feedback","componentClass","placeholder","Footer","bsStyle","disabled","formIsValid","HeadingFormContainer","message","submit","values","newItem","deleteListItem","updatedData","insertNewHeader","components_HeadingForm","data","showFormsActions","TimespanForm","buildHeadingsOptions","getValidHeadings","clearHeadingOptions","handleInputChange","defineProperty","id","handleTimeChange","updateChildOfOptions","unEdiunEditedFormItemtedItem","unEditedFormItem","smItem","titleValid","childOfValid","timesValidResponse","validTimespans","validFormat","validTimeFormat","validBeginTime","doesTimeOverlap","_this$state2","validEndTime","validOrdering","validateBeforeEndTimeOrder","doesTimespanOverlap","_this$state3","split","_this$state4","Row","Col","sm","getValidationBeginState","getValidationEndState","TimespanFormContainer","insertNewTimespan","components_TimespanForm","ModalContainer","modal","onHide","containers_HeadingFormContainer","containers_TimespanFormContainer","formActions","StructureOutputContainer","_this$props$smData","containers_ModalContainer","library","add","faDotCircle","faPen","faTrash","App","lib","backend","HTML5Backend","components_Waveform","containers_SampleGenerateButtonContainer","components_ButtonSection","containers_StructureOutputContainer","initialState","heading","timespan","action","assign","structrualMetadataUtils","stateClone","determineDropTargets","combineReducers","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","store","createStore","rootReducer","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3c74b931.chunk.js","sourcesContent":["import React from 'react';\n\nconst Waveform = () => (\n  <section className=\"waveform-section\">\n    <div className=\"waveform-holder\" />\n  </section>\n);\n\nexport default Waveform;\n","export const TOGGLE_HEADING_FORM = 'TOGGLE_HEADING_FORM';\nexport const TOGGLE_TIMESPAN_FORM = 'TOGGLE_TIMESPAN_FORM';\nexport const ADD_HEADING = 'ADD_HEADING';\nexport const EDIT_HEADING = 'EDIT_HEADING';\nexport const ADD_TIME_SPAN = 'ADD_TIME_SPAN';\nexport const EDIT_TIME_SPAN = 'EDIT_TIME_SPAN';\nexport const BUILD_SM_UI = 'BUILD_SM_UI';\n\nexport const DELETE_ITEM = 'DELETE_ITEM';\n\nexport const ADD_DROP_TARGETS = 'ADD_DROP_TARGETS';\nexport const REMOVE_DROP_TARGETS = 'REMOVE_DROP_TARGETS';\nexport const SET_ACTIVE_DRAG_SOURCE = \"SET_ACTIVE_DRAG_SOURCE\";\nexport const REMOVE_ACTIVE_DRAG_SOURCES = \"REMOVE_ACTIVE_DRAG_SOURCES\";\nexport const HANDLE_LIST_ITEM_DROP = \"HANDLE_LIST_ITEM_DROP\";\n\nexport const SHOW_MODAL = 'SHOW_MODAL';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\nexport const SAVE_MODAL_RECORD = 'SAVE_MODAL_RECORD';\n\n","import * as types from './types';\n\n/**\n * Redux action creator to toggleHeading\n * @param {Boolean} show show or hide the form\n * @param {*} mode 'ADD' or 'EDIT'\n * @param {*} label If 'EDIT', label is the key by which we'll retrieve the item from the data structure\n */\nexport const toggleHeading = (show, mode='ADD', label) => ({\n  type: types.TOGGLE_HEADING_FORM,\n  show,\n  mode,\n  label\n});\n\nexport const toggleTimespan = (show, mode='ADD') => ({\n  type: types.TOGGLE_TIMESPAN_FORM,\n  show,\n  mode\n});\n\n/**\n * Action creator to show a modal\n * @param {String} mode - 'EDIT' or 'ADD'\n * @param {String} listItemType - span or div\n * @param {String} label - list item label\n */\nexport const showModal = (mode = 'ADD', listItemType, label) => ({\n  type: types.SHOW_MODAL,\n  label,\n  listItemType,\n  mode\n});\n\nexport const closeModal = () => ({\n  type: types.CLOSE_MODAL\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/show-forms';\nimport { ButtonToolbar, Button } from 'react-bootstrap';\n\nclass ButtonSection extends Component {\n  handleHeadingClick = () => {\n    this.props.showModal('ADD', 'div');\n  }\n\n  handleTimeSpanClick = () => {\n    this.props.showModal('ADD', 'span');\n  }\n\n  render() {\n    return (\n      <section className=\"button-section\">\n        <hr />\n        <ButtonToolbar>\n          <Button onClick={this.handleHeadingClick}>Add a Heading</Button>\n          <Button onClick={this.handleTimeSpanClick}>Add a Timespan</Button>\n        </ButtonToolbar>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  showForms: state.showForms\n});\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(ButtonSection);\n","import * as types from './types';\n\nexport function addHeading(values) {\n  return {\n    type: types.ADD_HEADING,\n    payload: values\n  };\n}\n\nexport function buildSMUI(json) {\n  return {\n    type: types.BUILD_SM_UI,\n    payload: json\n  };\n}\n\nexport function deleteItem(item) {\n  return {\n    type: types.DELETE_ITEM,\n    payload: item\n  };\n}\n\nexport function addDropTargets(item) {\n  return {\n    type: types.ADD_DROP_TARGETS,\n    payload: item\n  };\n}\n\nexport function removeDropTargets() {\n  return {\n    type: types.REMOVE_DROP_TARGETS\n  };\n}\n\nexport function setActiveDragSource(label) {\n  return {\n    type: types.SET_ACTIVE_DRAG_SOURCE,\n    label\n  };\n}\n\nexport function removeActiveDragSources() {\n  return {\n    type: types.REMOVE_ACTIVE_DRAG_SOURCES\n  };\n}\n\nexport function handleListItemDrop(dragSource, dropTarget) {\n  return {\n    type: types.HANDLE_LIST_ITEM_DROP,\n    dragSource,\n    dropTarget\n  };\n}\n","import React, { Component} from 'react';\nimport structuralTree from '../data/sample-json3-edited.json';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/sm-data';\n\nclass SampleGenerateButtonContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.smData = structuralTree;\n  }\n\n  handleBuildItClick = () => {\n    this.props.buildSMUI(this.smData);\n  }\n\n  render() {\n    return (\n      <section className=\"demo-html-structure-tree\">\n        <hr />\n        <h4>HTML Structure Tree from hardcoded JSON</h4>\n        <p><a href=\"../data/sample-json3.json\" target=\"_blank\">Uses this JSON file</a></p>\n        <button onClick={this.handleBuildItClick} className=\"btn btn-default build-structure-button\">Build It</button>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: smData => dispatch(actions.buildSMUI(smData))\n})\n\nexport default connect(null, mapDispatchToProps)(SampleGenerateButtonContainer);\n","export const ItemTypes = {\n  SPAN: 'span'\n};\n","import React, { Component } from 'react';\nimport List from './List';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\nimport * as showFormActions from '../actions/show-forms';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../services/Constants';\nimport { DragSource, DropTarget } from 'react-dnd';\n\nconst spanSource = {\n  beginDrag(props) {\n    console.log('props', props);\n    return { label: props.item.label };\n  }\n};\n\nconst spanTarget = {\n  canDrop(props, monitor) {\n    // You can disallow drop based on props or item\n    return true;\n  },\n\n  hover(props, monitor, component) {\n    // This is fired very often and lets you perform side effects\n    // in response to the hover. You can't handle enter and leave\n    // here—if you need them, put monitor.isOver() into collect() so you\n    // can just use componentDidUpdate() to handle enter/leave.\n\n    const draggedLabel = monitor.getItem().label;\n\n    if (draggedLabel !== props.item.label) {\n    } else {\n    }\n\n    // You will receive hover() even for items for which canDrop() is false\n    //const canDrop = monitor.canDrop();\n  }\n};\n\nfunction collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    // You can ask the monitor about the current drag state:\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({ shallow: true }),\n    canDrop: monitor.canDrop(),\n    itemType: monitor.getItemType()\n  };\n}\n\nconst EditControls = props => {\n  return (\n    <div className=\"edit-controls-wrapper\">\n      {props.itemType === 'span' && (\n        <FontAwesomeIcon\n          icon=\"dot-circle\"\n          onClick={props.handleShowDropTargetsClick}\n        />\n      )}\n      <FontAwesomeIcon icon=\"pen\" onClick={props.handleEditClick} />\n      <FontAwesomeIcon icon=\"trash\" onClick={props.handleDelete} />\n    </div>\n  );\n};\n\nclass ListItem extends Component {\n  static propTypes = {\n    item: PropTypes.shape({\n      active: PropTypes.bool,\n      begin: PropTypes.string,\n      end: PropTypes.string,\n      items: PropTypes.array,\n      label: PropTypes.string,\n      type: PropTypes.string\n    })\n  };\n\n  handleDelete = () => {\n    this.props.deleteItem(this.props.item);\n  };\n\n  handleEditClick = () => {\n    const { label, type } = this.props.item;\n\n    this.props.showModal('EDIT', type, label);\n  };\n\n  handleShowDropTargetsClick = () => {\n    const {\n      addDropTargets,\n      item,\n      removeActiveDragSources,\n      removeDropTargets,\n      setActiveDragSource\n    } = this.props;\n\n    // Clear out any current drop targets\n    removeDropTargets();\n\n    // Handle closing of current drag source drop targets, and exit with a clean UI.\n    if (item.active === true) {\n      // Clear out any active drag sources\n      removeActiveDragSources();\n      return;\n    }\n    // Clear out any active drag sources\n    removeActiveDragSources();\n\n    // Calculate possible drop targets\n    addDropTargets(item);\n\n    // Redux way of setting active drag list item\n    setActiveDragSource(item.label);\n  };\n\n  render() {\n    const {\n      item: { begin },\n      item: { end },\n      item: { items },\n      item: { label },\n      item: { type },\n      item: { active },\n      connectDragSource,\n      connectDropTarget\n    } = this.props;\n\n    const subMenu = items && items.length > 0 ? <List items={items} /> : null;\n\n    return connectDragSource(\n      connectDropTarget(\n        <li className={active ? 'active' : ''}>\n          <div className=\"row-wrapper\">\n            {type === 'span' && (\n              <span className=\"structure-title\">\n                {label} ({begin} - {end})\n              </span>\n            )}\n            {type === 'div' && (\n              <div className=\"structure-title heading\">{label}</div>\n            )}\n            <EditControls\n              handleDelete={this.handleDelete}\n              handleEditClick={this.handleEditClick}\n              itemType={type}\n              handleShowDropTargetsClick={this.handleShowDropTargetsClick}\n            />\n          </div>\n          {subMenu}\n        </li>\n      )\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteItem: smActions.deleteItem,\n  toggleHeading: showFormActions.toggleHeading,\n  toggleTimespan: showFormActions.toggleTimespan,\n  addDropTargets: smActions.addDropTargets,\n  removeDropTargets: smActions.removeDropTargets,\n  removeActiveDragSources: smActions.removeActiveDragSources,\n  setActiveDragSource: smActions.setActiveDragSource,\n  showModal: showFormActions.showModal\n};\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nconst ConnectedDropTarget = DropTarget(ItemTypes.SPAN, spanTarget, collectDrop);\nconst ConnectedDragSource = DragSource(ItemTypes.SPAN, spanSource, collectDrag);\nconst DragConnected = ConnectedDropTarget(ConnectedDragSource(ListItem));\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DragConnected);\n","import React, { Component } from 'react';\nimport { DropTarget } from 'react-dnd';\nimport { ItemTypes } from '../services/Constants';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\n\nconst styles = {\n  li: {\n    border: '2px #999 dashed',\n    opacity: 0.3\n  },\n  liHovered: {\n    border: '5px #999 dashed',\n    opacity: 0.5\n  }\n};\n\nconst optionalTarget = {\n  hover(props, monitor, component) {\n    //console.log('hover over drop target');\n  },\n\n  drop(props, monitor, component) {\n    let dragItem = monitor.getItem();\n\n    props.handleListItemDrop(dragItem, props.item);\n  }\n};\n\nfunction collect(connect, monitor) {\n  return {\n    // Call this function inside render()\n    // to let React DnD handle the drag events:\n    connectDropTarget: connect.dropTarget(),\n    // You can ask the monitor about the current drag state:\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({ shallow: true }),\n    canDrop: monitor.canDrop(),\n    itemType: monitor.getItemType()\n  };\n}\n\nclass PlaceholderItem extends Component {\n  render() {\n    const { isOver, connectDropTarget } = this.props;\n\n    return connectDropTarget(\n      <li className=\"row-wrapper\" style={isOver ? styles.liHovered : styles.li}>\n        Drop here\n      </li>\n    );\n  }\n}\n\nconst ConnectedDropTarget = DropTarget(ItemTypes.SPAN, optionalTarget, collect)(\n  PlaceholderItem\n);\n\nconst mapDispatchToProps = dispatch => ({\n  handleListItemDrop: (dragItem, dropItem) =>\n    dispatch(smActions.handleListItemDrop(dragItem, dropItem))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ConnectedDropTarget);\n","import React from 'react';\nimport ListItem from './ListItem';\nimport PlaceholderItem from './PlaceholderItem';\n\nconst List = props => {\n  return (\n    <ul className=\"structure-list\">\n      {props.items.map((item, i) => {\n        if (!item) {\n          return null;\n        }\n        if (item.type === 'optional') {\n          return <PlaceholderItem key={i} item={item} />\n        }\n        return <ListItem key={item.label} item={item} />;\n      })}\n    </ul>\n  );\n}\n\nexport default List;\n","import _ from 'lodash';\nimport moment from 'moment';\nimport uuidv1 from 'uuid/v1';\n\n/**\n * Rules - https://github.com/avalonmediasystem/avalon/issues/3022\n *\n * a timespan does not allow overlap.\n * a timepan can not be out of order.\n * a timespan can not be demoted from a parent unless it is the last item in the relationship (last child), as it would create an out of order item.\n * Timespans can only be moved ONE parent- level up or down.\n * Use an arrow and handle click.\n * Only first and last time-spans can be moved. Middle Children are stuck.\n * Headings are ordered by the children they have.\n * If when creating a timespan, you butt against the start or end of another timespan, you have to change the other timepan first.\n * Labels can be edited at will.\n */\n\nexport default class StructuralMetadataUtils {\n  /**\n   * Helper function to create a dropZone object for drag and drop\n   * @returns {Object}\n   */\n  createDropZoneObject() {\n    return {\n      type: 'optional',\n      label: uuidv1()\n    };\n  }\n\n  /**\n   * Helper function which creates an object with the shape our data structure requires\n   * @param {Object} obj\n   * @return {Object}\n   */\n  createSpanObject(obj) {\n    return {\n      type: 'span',\n      label: obj.timespanTitle,\n      begin: obj.beginTime,\n      end: obj.endTime\n    };\n  }\n\n  /**\n   * Remove a targeted list item object from data structure\n   * @param {Object} item - span object\n   * @param {Array} allItems array of items, usually all current items in the data structure\n   * @return {Array}\n   */\n  deleteListItem(item, allItems) {\n    let clonedItems = [...allItems];\n    let parentDiv = this.getParentDiv(item, clonedItems);\n    let indexToDelete = _.findIndex(parentDiv.items, { label: item.label });\n\n    parentDiv.items.splice(indexToDelete, 1);\n\n    return clonedItems;\n  }\n\n  /**\n   * Update the data structure to represent all possible dropTargets for the provided dragSource\n   * @param {Object} dragSource\n   * @param {Object} allItems\n   * @returns {Array} - new computed items\n   */\n  determineDropTargets(dragSource, allItems) {\n    const clonedItems = [...allItems];\n\n    if (dragSource.type === 'span') {\n      let wrapperSpans = this.findWrapperSpans(\n        dragSource,\n        this.getItemsOfType('span', clonedItems)\n      );\n      let parentDiv = this.getParentDiv(dragSource, clonedItems);\n      let siblings = parentDiv ? parentDiv.items : [];\n      let spanIndex = siblings\n        .map(sibling => sibling.label)\n        .indexOf(dragSource.label);\n      let stuckInMiddle = this.dndHelper.stuckInMiddle(spanIndex, siblings, parentDiv);\n\n      // If span falls in the middle of other spans, it can't be moved\n      if (stuckInMiddle) {\n        return clonedItems;\n      }\n\n      // Sibling before is a div?\n      if (spanIndex !== 0 && siblings[spanIndex - 1].type === 'div') {\n        let sibling = siblings[spanIndex - 1];\n        if (sibling.items) {\n          sibling.items.push(this.createDropZoneObject());\n        } else {\n          sibling.items = [this.createDropZoneObject()];\n        }\n      }\n\n      // Sibling after is a div?\n      if (\n        spanIndex !== siblings.length - 1 &&\n        siblings[spanIndex + 1].type === 'div'\n      ) {\n        let sibling = siblings[spanIndex + 1];\n        if (sibling.items) {\n          sibling.items.unshift(this.createDropZoneObject());\n        } else {\n          sibling.items = [this.createDropZoneObject()];\n        }\n      }\n\n      let grandParentDiv = this.getParentDiv(parentDiv, clonedItems);\n      let parentIndex = grandParentDiv\n        ? grandParentDiv.items.map(item => item.label).indexOf(parentDiv.label)\n        : null;\n\n      // A first child of siblings, or an only child\n      if (spanIndex === 0) {\n        // Can't move up\n        if (parentIndex === null) {\n          return clonedItems;\n        }\n\n        if (grandParentDiv) {\n          // Insert directly before the parent div\n          grandParentDiv.items.splice(\n            parentIndex,\n            0,\n            this.createDropZoneObject()\n          );\n\n          // Insert after the \"before\" wrapper span (if one exists)\n          if (wrapperSpans.before) {\n            let beforeParent = this.getParentDiv(\n              wrapperSpans.before,\n              clonedItems\n            );\n            let beforeIndex = beforeParent.items\n              .map(item => item.label)\n              .indexOf(wrapperSpans.before.label);\n\n            // Before the insert, check that the dropTarget index doesn't already exist\n            if (\n              beforeParent.items[beforeIndex + 1] &&\n              beforeParent.items[beforeIndex + 1].type !== 'optional'\n            ) {\n              beforeParent.items.splice(\n                beforeIndex + 1,\n                0,\n                this.createDropZoneObject()\n              );\n            }\n          }\n\n          // Insert before the \"after\" wrapper span (if one exists)\n          if (wrapperSpans.after) {\n            this.dndHelper.addSpanAfter(clonedItems, wrapperSpans.after);\n          }\n        }\n      }\n\n      // Last child of siblings\n      if (spanIndex === siblings.length - 1 && spanIndex !== 0) {\n        if (wrapperSpans.after) {\n          this.dndHelper.addSpanAfter(clonedItems, wrapperSpans.after);\n        }\n      }\n    }\n\n    return clonedItems;\n  }\n\n  /**\n   * Helper object for drag and drop data structure manipulations\n   * This mutates the state of the data structure\n   */\n  dndHelper = {\n    addSpanAfter: (clonedItems, wrapperSpanAfter) => {\n      let afterParent = this.getParentDiv(wrapperSpanAfter, clonedItems);\n      let afterIndex = afterParent.items\n        .map(item => item.label)\n        .indexOf(wrapperSpanAfter.label);\n\n      afterParent.items.splice(afterIndex, 0, this.createDropZoneObject());\n    },\n    stuckInMiddle: (spanIndex, siblings, parentDiv) => {\n      return (\n        spanIndex !== 0 &&\n        spanIndex !== siblings.length - 1 &&\n        parentDiv.items[spanIndex - 1].type === 'span' &&\n        parentDiv.items[spanIndex + 1].type === 'span'\n      );\n    }\n  };\n\n  /**\n   * Determine whether a time overlaps (or falls between), an existing timespan's range\n   * @param {String} time - form input value\n   * @param {*} allSpans - all timespans in the data structure\n   * @return {Boolean}\n   */\n  doesTimeOverlap(time, allSpans) {\n    const { toMs } = this;\n    let valid = true;\n    time = toMs(time);\n\n    // Loop through all spans\n    for (let i in allSpans) {\n      let spanBegin = toMs(allSpans[i].begin);\n      let spanEnd = toMs(allSpans[i].end);\n\n      // Illegal time (falls between existing start/end times)\n      if (time >= spanBegin && time < spanEnd) {\n        valid = false;\n        break;\n      }\n    }\n    return valid;\n  }\n\n  doesTimespanOverlap(beginTime, endTime, allSpans) {\n    const { toMs } = this;\n    // Filter out only spans where new begin time is before an existing begin time\n    let filteredSpans = allSpans.filter(span => {\n      return toMs(beginTime) < toMs(span.begin);\n    });\n    // Return whether new end time overlaps the next begin time\n    return toMs(endTime) > toMs(filteredSpans[0].begin);\n  }\n\n  /**\n   * @param {String} label - string value to match against\n   * @param {Array} items - Array of nested structured metadata objects containing headings and time spans\n   * @return {Object} - Object found, or null if none\n   */\n  findItemByLabel(label, items) {\n    let foundItem = null;\n    let findItem = items => {\n      for (let item of items) {\n        if (item.label === label) {\n          foundItem = item;\n        }\n        if (item.items) {\n          findItem(item.items);\n        }\n      }\n    };\n    findItem(items);\n\n    return foundItem;\n  }\n\n  /**\n   * Find the <span>s which come before and after new span\n   * @param {Object} newSpan - new span object\n   * @param {Array} allSpans - all type <span> objects in current structured metadata\n   * @returns {Object} - wrapper <span>s object: { before: spanObject, after: spanObject }\n   */\n  findWrapperSpans(newSpan, allSpans) {\n    const { toMs } = this;\n    let wrapperSpans = {\n      before: null,\n      after: null\n    };\n    let spansBefore = allSpans.filter(\n      span => toMs(newSpan.begin) >= toMs(span.end)\n    );\n    let spansAfter = allSpans.filter(\n      span => toMs(newSpan.end) <= toMs(span.begin)\n    );\n\n    wrapperSpans.before =\n      spansBefore.length > 0 ? spansBefore[spansBefore.length - 1] : null;\n    wrapperSpans.after = spansAfter.length > 0 ? spansAfter[0] : null;\n\n    return wrapperSpans;\n  }\n\n  /**\n   * Get all items in data structure of type 'div' or 'span'\n   * @param {Array} json\n   * @returns {Array} - all stripped down objects of type in the entire structured metadata collection\n   */\n  getItemsOfType(type = 'div', items = []) {\n    let options = [];\n\n    // Recursive function to search the whole data structure\n    let getItems = items => {\n      for (let item of items) {\n        if (item.type === type) {\n          let currentObj = { ...item };\n          delete currentObj.items;\n          options.push(currentObj);\n        }\n        if (item.items) {\n          getItems(item.items);\n        }\n      }\n    };\n    getItems(items);\n\n    return options;\n  }\n\n  getParentDiv(child, allItems) {\n    let foundDiv = null;\n\n    let findItem = (child, items) => {\n      for (let item of items) {\n        if (item.items) {\n          let childItem = item.items.filter(\n            currentChild => child.label === currentChild.label\n          );\n          // Found it\n          if (childItem.length > 0) {\n            foundDiv = item;\n            break;\n          }\n          findItem(child, item.items);\n        }\n      }\n    };\n    findItem(child, allItems);\n    return foundDiv;\n  }\n\n  /**\n   * Overall logic is to find existing before and after spans for the new object (time flow), and then\n   * their parent 'divs' would be valid headings.\n   * @param {Object} newSpan - Object which has (at the least) { begin: '00:10:20.33', end: '00:15:88' } properties\n   * @param {Object} wrapperSpans Object representing before and after spans of newSpan (if they exist)\n   * @param {Array} allItems - All structural metadata items in tree\n   * @return {Array} - of valid <div> objects in structural metadata tree\n   */\n  getValidHeadings(newSpan, wrapperSpans, allItems) {\n    let validHeadings = [];\n\n    let findSpanItem = (targetSpan, items) => {\n      for (let item of items) {\n        // Children items exist\n        if (item.items) {\n          // Check for a target span match\n          let targetSpanMatch = item.items.filter(\n            childItem => childItem.label === targetSpan.label\n          );\n          // Match found\n          if (targetSpanMatch.length > 0) {\n            // Add parent div to valid array\n            validHeadings.push(item);\n          }\n          // Try deeper in list\n          findSpanItem(targetSpan, item.items);\n        }\n      }\n    };\n\n    // There are currently no spans, ALL headings are valid\n    if (!wrapperSpans.before && !wrapperSpans.after) {\n      // Get all headings and return them\n      validHeadings = this.getItemsOfType('div', allItems);\n    }\n\n    if (wrapperSpans.before) {\n      findSpanItem(wrapperSpans.before, allItems);\n    }\n    if (wrapperSpans.after) {\n      findSpanItem(wrapperSpans.after, allItems);\n    }\n\n    return validHeadings;\n  }\n\n  /**\n   * Helper function which handles React Dnd's dropping of a dragSource onto a dropTarget\n   * It needs to re-arrange the data structure to reflect the new positions\n   * @param {Object} dragSource - a minimal object React DnD uses with only the label value\n   * @param {Object} dropTarget\n   * @param {Array} allItems\n   * @returns {Array}\n   */\n  handleListItemDrop(dragSource, dropTarget, allItems) {\n    let clonedItems = [...allItems];\n    let itemToMove = this.findItemByLabel(dragSource.label, clonedItems);\n\n    // Slice out previous position of itemToMove\n    let itemToMoveParent = this.getParentDiv(itemToMove, clonedItems);\n    let itemToMoveItemIndex = itemToMoveParent.items\n      .map(item => item.label)\n      .indexOf(itemToMove.label);\n    itemToMoveParent.items.splice(itemToMoveItemIndex, 1);\n\n    // Place itemToMove right after the placeholder array position\n    let dropTargetParent = this.getParentDiv(dropTarget, clonedItems);\n    let dropTargetItemIndex = dropTargetParent.items\n      .map(item => item.label)\n      .indexOf(dropTarget.label);\n    dropTargetParent.items.splice(dropTargetItemIndex, 0, itemToMove);\n\n    // Get rid of all placeholder elements\n    return this.removeDropTargets(clonedItems);\n  }\n\n  /**\n   * Insert a new heading as child of an existing heading\n   * @param {Object} obj - new heading object to insert\n   * @param {Array} allItems - The entire structured metadata collection\n   * @returns {Array} - The updated structured metadata collection, with new object inserted\n   */\n  insertNewHeader(obj, allItems) {\n    let clonedItems = [...allItems];\n    const targetLabel = obj.headingChildOf;\n    let foundDiv =\n      this.findItemByLabel(targetLabel, clonedItems) || clonedItems[0];\n\n    // If children exist, add to list\n    if (foundDiv) {\n      foundDiv.items.unshift({\n        type: 'div',\n        label: obj.headingTitle,\n        items: []\n      });\n    }\n\n    return clonedItems;\n  }\n\n  /**\n   * Insert a new timespan as child of an existing heading\n   * @param {Object} obj - object of form values submitted\n   * @param {Array} allItems - The entire structured metadata collection\n   * @returns {Array} - The updated structured metadata collection, with new object inserted\n   */\n  insertNewTimespan(obj, allItems) {\n    let clonedItems = [...allItems];\n    let foundDiv = this.findItemByLabel(obj.timespanChildOf, clonedItems);\n    const spanObj = this.createSpanObject(obj);\n    let insertIndex = 0;\n\n    // If children exist, add to list\n    if (foundDiv) {\n      let childSpans = foundDiv.items.filter(item => item.type === 'span');\n\n      // Get before and after sibling spans\n      let wrapperSpans = this.findWrapperSpans(spanObj, childSpans);\n\n      if (wrapperSpans.before) {\n        insertIndex =\n          _.findIndex(foundDiv.items, { label: wrapperSpans.before.label }) + 1;\n      }\n      // Insert new span at appropriate index\n      foundDiv.items.splice(insertIndex, 0, spanObj);\n    }\n\n    return clonedItems;\n  }\n\n  /**\n   * Recursive function to clean out any 'active' drag item property in the data structure\n   * @param {Array} allItems\n   * @returns {Array}\n   */\n  removeActiveDragSources(allItems) {\n    let removeActive = parent => {\n      if (!parent.items) {\n        if (parent.active) {\n          parent.active = false;\n        }\n        return parent;\n      }\n      parent.items = parent.items.map(child => removeActive(child));\n\n      return parent;\n    };\n    let cleanItems = removeActive(allItems[0]);\n\n    return [cleanItems];\n  }\n\n  /**\n   * Recursive function to remove all temporary Drop Target objects from the structured metadata items\n   * @param {Array} allItems\n   */\n  removeDropTargets(allItems) {\n    let removeFromTree = (parent, childTypeToRemove) => {\n      if (!parent.items) {\n        return parent;\n      }\n\n      parent.items = parent.items\n        .filter(child => child.type !== childTypeToRemove)\n        .map(child => removeFromTree(child, childTypeToRemove));\n\n      return parent;\n    };\n    let cleanItems = removeFromTree(allItems[0], 'optional');\n\n    return [cleanItems];\n  }\n\n  /**\n   * Moment.js helper millisecond converter to make calculations consistent\n   * @param {String} strTime form input value\n   */\n  toMs(strTime) {\n    return moment.duration(strTime).asMilliseconds();\n  }\n\n  /**\n   * Does 'before' time start prior to 'end' time?\n   * @param {String} begin form intput value\n   * @param {String} end form input value\n   * @return {Boolean}\n   */\n  validateBeforeEndTimeOrder(begin, end) {\n    if (!begin || !end) {\n      return true;\n    }\n    if (this.toMs(begin) >= this.toMs(end)) {\n      return false;\n    }\n    return true;\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport {\n  Button,\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  Modal\n} from 'react-bootstrap';\nimport * as actions from '../actions/show-forms';\nimport PropTypes from 'prop-types';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nclass HeadingForm extends Component {\n  constructor(props) {\n    super(props);\n    this.unEditedItem = null;\n  }\n\n  state = {\n    headingTitle: '',\n    headingChildOf: '',\n    childOfOptions: []\n  };\n\n  componentDidMount() {\n    const { showForms } = this.props;\n\n    // Save the unedited version of item so we can find it later\n    if (this.props.showForms.mode === 'EDIT') {\n      this.unEditedItem = structuralMetadataUtils.findItemByLabel(\n        this.props.showForms.label,\n        this.props.smData\n      );\n    }\n\n    // Get select dropdown options\n    let obj = {\n      childOfOptions: this.getOptions()\n    };\n\n    // Edit mode: Load existing form values\n    if (showForms.mode === 'EDIT') {\n      obj = { ...obj, ...this.loadExistingValues() };\n    }\n    this.setState(obj);\n  }\n\n  formIsValid() {\n    const { headingTitle } = this.state;\n    const titleValid = headingTitle && headingTitle.length > 0;\n\n    return titleValid;\n  }\n\n  getOptions() {\n    let allHeaders = structuralMetadataUtils.getItemsOfType(\n      'div',\n      this.props.smData\n    );\n    let options = allHeaders.map(header => (\n      <option value={header.label} key={header.label}>\n        {header.label}\n      </option>\n    ));\n\n    return options;\n  }\n\n  getValidationTitleState() {\n    if (this.state.headingTitle.length > 2) {\n      return 'success';\n    }\n    if (this.state.headingTitle.length > 0) {\n      return 'error';\n    }\n    return null;\n  }\n\n  handleCancelClick = () => {\n    this.props.toggleHeading();\n  };\n\n  handleChildOfChange = e => {\n    this.setState({ headingChildOf: e.target.value });\n  };\n\n  handleHeadingChange = e => {\n    this.setState({ headingTitle: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { headingChildOf, headingTitle } = this.state;\n\n    this.props.onSubmit({\n      headingChildOf,\n      headingTitle,\n      unEditedItem: this.unEditedItem\n    });\n  };\n\n  loadExistingValues() {\n    const { showForms, smData } = this.props;\n    let item = structuralMetadataUtils.findItemByLabel(showForms.label, smData);\n    let parentDiv = structuralMetadataUtils.getParentDiv(item, smData);\n\n    if (parentDiv) {\n      parentDiv = parentDiv.label;\n    }\n\n    return {\n      headingTitle: showForms.label,\n      headingChildOf: parentDiv || ''\n    };\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Modal.Header closeButton>\n          <Modal.Title>{this.props.showForms.mode === 'ADD' ? 'Add' : 'Edit'} Heading</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <FormGroup\n            controlId=\"headingTitle\"\n            validationState={this.getValidationTitleState()}\n          >\n            <ControlLabel>Title</ControlLabel>\n            <FormControl\n              type=\"text\"\n              value={this.state.headingTitle}\n              onChange={this.handleHeadingChange}\n            />\n            <FormControl.Feedback />\n          </FormGroup>\n\n          <FormGroup controlId=\"headingChildOf\">\n            <ControlLabel>Child Of</ControlLabel>\n            <FormControl\n              componentClass=\"select\"\n              placeholder=\"select\"\n              onChange={this.handleChildOfChange}\n              value={this.state.headingChildOf}\n            >\n              <option value=\"\">Select...</option>\n              {this.state.childOfOptions}\n            </FormControl>\n          </FormGroup>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button\n            bsStyle=\"primary\"\n            type=\"submit\"\n            disabled={!this.formIsValid()}\n          >\n            Save\n          </Button>\n          <Button onClick={this.props.closeModal}>Cancel</Button>\n        </Modal.Footer>\n      </form>\n    );\n  }\n}\n\nHeadingForm.propTypes = {\n  onSubmit: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  showForms: state.showForms,\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  actions\n)(HeadingForm);\n","import React, { Component } from 'react';\nimport HeadingForm from '../components/HeadingForm';\nimport { connect } from 'react-redux';\nimport * as smActions from '../actions/sm-data';\nimport * as showFormsActions from '../actions/show-forms';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\nclass HeadingFormContainer extends Component {\n  state = {\n    message: null\n  };\n\n  submit = values => {\n    const { mode } = this.props.showForms;\n\n    let newItem = {\n      headingChildOf: values.headingChildOf,\n      headingTitle: values.headingTitle\n    };\n\n    // Delete the original heading item first, if editing\n    let smData =\n      mode === 'EDIT'\n        ? structuralMetadataUtils.deleteListItem(\n            values.unEditedItem,\n            this.props.smData\n          )\n        : this.props.smData;\n\n    // Update the data structure with new heading\n    const updatedData = structuralMetadataUtils.insertNewHeader(\n      newItem,\n      smData\n    );\n\n    // Update redux store\n    this.props.buildSMUI(updatedData);\n\n    // Close the form\n    this.props.closeModal();\n  };\n\n  render() {\n    return <HeadingForm onSubmit={this.submit} />;\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: data => dispatch(smActions.buildSMUI(data)),\n  closeModal: () => dispatch(showFormsActions.closeModal())\n});\n\nconst mapStateToProps = state => ({\n  showForms: state.showForms,\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HeadingFormContainer);\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Col,\n  ControlLabel,\n  FormControl,\n  FormGroup,\n  Modal,\n  Row\n} from 'react-bootstrap';\nimport * as showFormActions from '../actions/show-forms';\nimport * as smActions from '../actions/sm-data';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\n\nclass TimespanForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      beginTime: '',\n      endTime: '',\n      timespanChildOf: '',\n      timespanTitle: '',\n      validHeadings: []\n    };\n    this.unEditedItem = null;\n  }\n\n  componentDidMount() {\n    if (this.props.showForms.mode === 'EDIT') {\n      // Grab the currently edited item from the data structure\n      let smItem = structuralMetadataUtils.findItemByLabel(\n        this.props.showForms.label,\n        this.props.smData\n      );\n\n      // Save the unedited, Form version of the item, so we can use it later\n      this.unEditedFormItem = this.loadExistingValues();\n\n      // Load existing form values\n      this.setState(this.unEditedFormItem);\n\n      // Remove the timespan from data structure to make room for the saved edited version\n      this.props.deleteItem(smItem);\n    }\n\n    // Save a reference to all the spans for future calculations\n    this.allSpans = structuralMetadataUtils.getItemsOfType(\n      'span',\n      this.props.smData\n    );\n  }\n\n  buildHeadingsOptions = () => {\n    let newSpan = {\n      begin: this.state.beginTime,\n      end: this.state.endTime\n    };\n    // Get spans in overall span list which fall before and after the new span\n    let wrapperSpans = structuralMetadataUtils.findWrapperSpans(\n      newSpan,\n      this.allSpans\n    );\n\n    // Get all valid div headings\n    let validHeadings = structuralMetadataUtils.getValidHeadings(\n      newSpan,\n      wrapperSpans,\n      this.props.smData\n    );\n\n    // Update state with valid headings\n    this.setState({ validHeadings });\n  };\n\n  clearHeadingOptions = () => {\n    this.setState({\n      validHeadings: []\n    });\n  };\n\n  formIsValid() {\n    const titleValid = this.state.timespanTitle.length > 0;\n    const childOfValid = this.state.timespanChildOf.length > 0;\n    const timesValidResponse = this.validTimespans();\n\n    return titleValid && childOfValid && timesValidResponse.valid;\n  }\n\n  getValidationBeginState() {\n    const { beginTime } = this.state;\n\n    if (!beginTime || beginTime.indexOf(':') === -1) {\n      return null;\n    }\n\n    const validFormat = this.validTimeFormat(beginTime);\n    const validBeginTime = structuralMetadataUtils.doesTimeOverlap(\n      beginTime,\n      this.allSpans\n    );\n\n    if (validFormat && validBeginTime) {\n      return 'success';\n    }\n    if (!validFormat || !validBeginTime) {\n      return 'error';\n    }\n    return null;\n  }\n\n  getValidationEndState() {\n    const { beginTime, endTime } = this.state;\n\n    if (!endTime || endTime.indexOf(':') === -1) {\n      return null;\n    }\n\n    const validFormat = this.validTimeFormat(endTime);\n    const validEndTime = structuralMetadataUtils.doesTimeOverlap(\n      endTime,\n      this.allSpans\n    );\n    const validOrdering = structuralMetadataUtils.validateBeforeEndTimeOrder(\n      beginTime,\n      endTime\n    );\n    const doesTimespanOverlap = structuralMetadataUtils.doesTimespanOverlap(\n      beginTime,\n      endTime,\n      this.allSpans\n    );\n\n    if (validFormat && validEndTime && validOrdering && !doesTimespanOverlap) {\n      return 'success';\n    }\n    if (\n      !validFormat ||\n      !validEndTime ||\n      !validOrdering ||\n      doesTimespanOverlap\n    ) {\n      return 'error';\n    }\n    return null;\n  }\n\n  getValidationTitleState() {\n    const { timespanTitle } = this.state;\n\n    if (timespanTitle.length > 2) {\n      return 'success';\n    }\n    if (timespanTitle.length > 0) {\n      return 'error';\n    }\n    return null;\n  }\n\n  handleInputChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { beginTime, endTime, timespanChildOf, timespanTitle } = this.state;\n\n    this.props.onSubmit({\n      beginTime,\n      endTime,\n      timespanChildOf,\n      timespanTitle\n    });\n  };\n\n  handleTimeChange = e => {\n    this.setState({ [e.target.id]: e.target.value }, this.updateChildOfOptions);\n  };\n\n  handleCancelClick = () => {\n    // Add the edited item back to data structure\n    console.log('unEditedFormItem', this.unEdiunEditedFormItemtedItem);\n    this.props.onSubmit(this.unEditedFormItem);\n\n    this.props.closeModal();\n  };\n\n  handleChildOfChange = e => {\n    this.setState({ timespanChildOf: e.target.value });\n  };\n\n  /**\n   * Load existing form values to state, if in 'EDIT' mode\n   */\n  loadExistingValues() {\n    const { showForms, smData } = this.props;\n    let item = structuralMetadataUtils.findItemByLabel(showForms.label, smData);\n    let parentDiv = structuralMetadataUtils.getParentDiv(item, smData);\n\n    if (parentDiv) {\n      parentDiv = parentDiv.label;\n    }\n\n    return {\n      beginTime: item.begin,\n      endTime: item.end,\n      timespanChildOf: parentDiv || '',\n      timespanTitle: item.label\n    };\n  }\n\n  updateChildOfOptions() {\n    let timesValidResponse = this.validTimespans();\n\n    if (timesValidResponse.valid) {\n      this.buildHeadingsOptions();\n    } else {\n      this.clearHeadingOptions();\n    }\n  }\n\n  /**\n   * Validates that the begin and end time span values are valid separately, and together\n   * in the region which they will create.\n   *\n   * This function also preps handy feedback messages we might want to display to the user\n   */\n  validTimespans() {\n    const { beginTime, endTime } = this.state;\n    const { allSpans } = this;\n\n    // Valid formats?\n    if (!this.validTimeFormat(beginTime)) {\n      return {\n        valid: false,\n        message: 'Invalid begin time format'\n      };\n    }\n    if (!this.validTimeFormat(endTime)) {\n      return {\n        valid: false,\n        message: 'Invalid end time format'\n      };\n    }\n    // Any individual overlapping?\n    if (!structuralMetadataUtils.doesTimeOverlap(beginTime, allSpans)) {\n      return {\n        valid: false,\n        message: 'Begin time overlaps an existing timespan region'\n      };\n    }\n    if (!structuralMetadataUtils.doesTimeOverlap(endTime, allSpans)) {\n      return {\n        valid: false,\n        message: 'End time overlaps an existing timespan region'\n      };\n    }\n    // Begin comes before end?\n    if (\n      !structuralMetadataUtils.validateBeforeEndTimeOrder(beginTime, endTime)\n    ) {\n      return {\n        valid: false,\n        message: 'Begin time must start before end time'\n      };\n    }\n    // Timespan range overlaps an existing timespan?\n    if (\n      structuralMetadataUtils.doesTimespanOverlap(beginTime, endTime, allSpans)\n    ) {\n      return {\n        valid: false,\n        message: 'New timespan region overlaps an existing timespan region'\n      };\n    }\n\n    // Success!\n    return { valid: true };\n  }\n\n  validTimeFormat(value) {\n    return value && value.split(':').length === 3;\n  }\n\n  render() {\n    const { beginTime, endTime, timespanChildOf, timespanTitle } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            {this.props.showForms.mode === 'ADD' ? 'Add' : 'Edit'} Timespan\n          </Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <FormGroup\n            controlId=\"timespanTitle\"\n            validationState={this.getValidationTitleState()}\n          >\n            <ControlLabel>Title</ControlLabel>\n            <FormControl\n              type=\"text\"\n              value={timespanTitle}\n              onChange={this.handleInputChange}\n            />\n            <FormControl.Feedback />\n          </FormGroup>\n\n          <Row>\n            <Col sm={6}>\n              <FormGroup\n                controlId=\"beginTime\"\n                validationState={this.getValidationBeginState()}\n              >\n                <ControlLabel>Begin Time</ControlLabel>\n                <FormControl\n                  type=\"text\"\n                  value={beginTime}\n                  placeholder=\"00:00:00\"\n                  onChange={this.handleTimeChange}\n                />\n                <FormControl.Feedback />\n              </FormGroup>\n            </Col>\n            <Col sm={6}>\n              <FormGroup\n                controlId=\"endTime\"\n                validationState={this.getValidationEndState()}\n              >\n                <ControlLabel>End Time</ControlLabel>\n                <FormControl\n                  type=\"text\"\n                  value={endTime}\n                  placeholder=\"00:00:00\"\n                  onChange={this.handleTimeChange}\n                />\n                <FormControl.Feedback />\n              </FormGroup>\n            </Col>\n          </Row>\n\n          <FormGroup controlId=\"timespanChildOf\">\n            <ControlLabel>Child Of</ControlLabel>\n            <FormControl\n              componentClass=\"select\"\n              placeholder=\"select\"\n              onChange={this.handleChildOfChange}\n              value={timespanChildOf}\n            >\n              <option value=\"\">Select...</option>\n              {this.state.validHeadings.map(item => (\n                <option value={item.label} key={item.label}>\n                  {item.label}\n                </option>\n              ))}\n            </FormControl>\n          </FormGroup>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button\n            bsStyle=\"primary\"\n            type=\"submit\"\n            disabled={!this.formIsValid()}\n          >\n            Add\n          </Button>\n          <Button onClick={this.handleCancelClick}>Cancel</Button>\n        </Modal.Footer>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  showForms: state.showForms,\n  smData: state.smData\n});\n\nconst mapDispatchToProps = dispatch => ({\n  closeModal: () => dispatch(showFormActions.closeModal()),\n  deleteItem: item => dispatch(smActions.deleteItem(item))\n});\n\nTimespanForm = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimespanForm);\n\nexport default TimespanForm;\n","import React, { Component } from 'react';\nimport TimespanForm from '../components/TimespanForm';\nimport { connect } from 'react-redux';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\nimport * as smActions from '../actions/sm-data';\nimport * as showFormsActions from '../actions/show-forms';\n\nconst structuralMetadataUtils = new StructuralMetadataUtils();\nclass TimespanFormContainer extends Component {\n  state = {\n    message: null\n  };\n\n  submit = values => {\n    // Update the data structure with new heading\n    const updatedData = structuralMetadataUtils.insertNewTimespan(\n      values,\n      this.props.smData\n    );\n\n    // Update redux store\n    this.props.buildSMUI(updatedData);\n\n    // Close the form\n    this.props.closeModal();\n  };\n\n  render() {\n    return (\n      <TimespanForm onSubmit={this.submit} />\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  buildSMUI: data => dispatch(smActions.buildSMUI(data)),\n  closeModal: () => dispatch(showFormsActions.closeModal())\n});\n\nconst mapStateToProps = state => ({\n  showForms: state.showForms,\n  smData: state.smData\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimespanFormContainer);\n","import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport * as formActions from '../actions/show-forms';\nimport HeadingFormContainer from './HeadingFormContainer';\nimport TimespanFormContainer from './TimespanFormContainer';\n\nclass ModalContainer extends Component {\n  render() {\n    const { listItemType } = this.props.showForms;\n\n    return (\n      <Modal show={this.props.showForms.modal} onHide={this.props.closeModal}>\n        {listItemType === 'div' && <HeadingFormContainer />}\n        {listItemType === 'span' && <TimespanFormContainer />}\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  showForms: state.showForms\n});\n\nexport default connect(\n  mapStateToProps,\n  formActions\n)(ModalContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport List from '../components/List';\nimport ModalContainer from './ModalContainer';\n\nclass StructureOutputContainer extends Component {\n  render() {\n    const { smData = [] } = this.props;\n\n    return (\n      <section>\n        <hr />\n        <h2>Output</h2>\n        <List items={smData} />\n        <ModalContainer />\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  smData: state.smData\n});\n\nexport default connect(mapStateToProps)(StructureOutputContainer);\n","import React, { Component } from 'react';\nimport './App.css';\nimport Waveform from './components/Waveform';\nimport ButtonSection from './components/ButtonSection';\nimport SampleGenerateButtonContainer from './containers/SampleGenerateButtonContainer';\nimport StructureOutputContainer from './containers/StructureOutputContainer';\nimport { DragDropContextProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\n// Font Awesome Imports\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faDotCircle, faPen, faTrash } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faDotCircle, faPen, faTrash);\n\nclass App extends Component {\n  render() {\n    return (\n      <DragDropContextProvider backend={HTML5Backend}>\n        <div className=\"container\">\n          <h1>Test Structural Metadata Editor</h1>\n          <Waveform />\n          <SampleGenerateButtonContainer />\n          <ButtonSection />\n          <StructureOutputContainer />\n        </div>\n      </DragDropContextProvider>\n    );\n  }\n}\n\nexport default App;\n","import * as types from '../actions/types';\n\nconst initialState = {\n  heading: false,\n  timespan: false,\n  modal: false\n};\n\nconst showForms = (state = initialState, action) => {\n  switch (action.type) {\n    case types.TOGGLE_HEADING_FORM:\n      return Object.assign({}, state, {\n        heading: action.show,\n        mode: action.mode,\n        label: action.label\n      });\n    case types.TOGGLE_TIMESPAN_FORM:\n      return Object.assign({}, state, {\n        timespan: action.show,\n        mode: action.mode\n      });\n    case types.SHOW_MODAL:\n      return Object.assign({}, state, {\n        modal: true,\n        mode: action.mode,\n        listItemType: action.listItemType,\n        label: action.label\n      });\n    case types.CLOSE_MODAL:\n      return Object.assign({}, state, {\n        modal: false\n      });\n    default:\n      return state;\n  }\n};\n\nexport default showForms;\n","import * as types from '../actions/types';\nimport StructuralMetadataUtils from '../services/StructuralMetadataUtils';\n\nconst structrualMetadataUtils = new StructuralMetadataUtils();\nconst initialState = [];\nlet stateClone = null;\nlet newState = null;\n\nconst smData = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_HEADING:\n      stateClone = [...state];\n      stateClone.push(action.payload);\n      return stateClone;\n\n    case types.BUILD_SM_UI:\n      return action.payload;\n\n    case types.DELETE_ITEM:\n      return structrualMetadataUtils.deleteListItem(action.payload, [...state]);\n\n    case types.ADD_DROP_TARGETS:\n      newState = structrualMetadataUtils.determineDropTargets(action.payload, [...state]);\n      return newState;\n\n    case types.REMOVE_DROP_TARGETS:\n      let noDropTargetsState = structrualMetadataUtils.removeDropTargets([...state]);\n      return noDropTargetsState;\n\n    case types.SET_ACTIVE_DRAG_SOURCE:\n      stateClone = [...state];\n      let target = structrualMetadataUtils.findItemByLabel(\n        action.label,\n        stateClone\n      );\n      // Put an active flag on list item\n      target.active = true;\n      return stateClone;\n\n    case types.REMOVE_ACTIVE_DRAG_SOURCES:\n      let noActiveDragSourcesState = structrualMetadataUtils.removeActiveDragSources(\n        state\n      );\n      return noActiveDragSourcesState;\n\n    case types.HANDLE_LIST_ITEM_DROP:\n      newState = structrualMetadataUtils.handleListItemDrop(\n        action.dragSource,\n        action.dropTarget,\n        state\n      );\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default smData;\n","import { combineReducers } from 'redux';\nimport showForms from './show-forms';\nimport smData from './sm-data';\n\nexport default combineReducers({\n  showForms,\n  smData\n});\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}