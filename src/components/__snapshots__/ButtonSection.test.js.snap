// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ButtonSection component component renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ButtonSection
    createTempSegment={[MockFunction]}
    handleEditingTimespans={[MockFunction]}
    peaksInstance={
      Object {
        "peaks": Object {
          "options": Object {
            "_zoomLevelIndex": 0,
            "_zoomLevels": Array [
              512,
              1024,
              2048,
              4096,
            ],
            "container": null,
            "dataUri": null,
            "dataUriDefaultFormat": "json",
            "keyboard": true,
            "mediaElement": null,
          },
          "player": Object {
            "_mediaElement": Object {
              "currentTime": 0,
              "duration": 1738.945306,
            },
            "getCurrentTime": [MockFunction],
            "getDuration": [MockFunction],
            "seek": [MockFunction],
          },
          "segments": Object {
            "_peaks": [Circular],
            "_segments": Array [
              Object {
                "color": "#80A590",
                "endTime": 10.32,
                "id": "123a-456b-789c-3d",
                "labelText": "Segment 1.1",
                "startTime": 3.32,
              },
              Object {
                "color": "#2A5459",
                "endTime": 480,
                "id": "123a-456b-789c-4d",
                "labelText": "Segment 1.2",
                "startTime": 11.23,
              },
              Object {
                "color": "#80A590",
                "endTime": 900,
                "id": "123a-456b-789c-8d",
                "labelText": "Segment 2.1",
                "startTime": 543.24,
              },
            ],
            "add": [MockFunction],
            "getSegment": [MockFunction],
            "getSegments": [MockFunction],
            "removeAll": [MockFunction],
            "removeById": [MockFunction],
          },
          "zoom": Object {
            "_peaks": [Circular],
            "_zoomLevelIndex": 2,
            "_zoomLevels": Array [
              512,
              1024,
              2048,
              4096,
            ],
            "zoomIn": [MockFunction],
            "zoomOut": [MockFunction],
          },
        },
      }
    }
    showForms={
      Object {
        "disabled": false,
      }
    }
    smData={
      Array [
        Object {
          "id": "123a-456b-789c-0d",
          "items": Array [
            Object {
              "id": "123a-456b-789c-1d",
              "items": Array [
                Object {
                  "id": "123a-456b-789c-2d",
                  "items": Array [],
                  "label": "Sub-Segment 1.1",
                  "type": "div",
                },
                Object {
                  "begin": "00:00:03.32",
                  "end": "00:00:10.32",
                  "id": "123a-456b-789c-3d",
                  "label": "Segment 1.1",
                  "type": "span",
                },
                Object {
                  "begin": "00:00:11.23",
                  "end": "00:08:00.00",
                  "id": "123a-456b-789c-4d",
                  "label": "Segment 1.2",
                  "type": "span",
                },
              ],
              "label": "First segment",
              "type": "div",
            },
            Object {
              "id": "123a-456b-789c-5d",
              "items": Array [
                Object {
                  "id": "123a-456b-789c-6d",
                  "items": Array [
                    Object {
                      "id": "123a-456b-789c-7d",
                      "items": Array [],
                      "label": "Sub-Segment 2.1.1",
                      "type": "div",
                    },
                    Object {
                      "begin": "00:09:03.24",
                      "end": "00:15:00.00",
                      "id": "123a-456b-789c-8d",
                      "label": "Segment 2.1",
                      "type": "span",
                    },
                  ],
                  "label": "Sub-Segment 2.1",
                  "type": "div",
                },
              ],
              "label": "Second segment",
              "type": "div",
            },
          ],
          "label": "Title",
          "type": "div",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <AlertContainer />,
        <Row
          bsClass="row"
          componentClass="div"
        >
          <Col
            bsClass="col"
            componentClass="div"
            xs={6}
          >
            <Button
              active={false}
              block={true}
              bsClass="btn"
              bsStyle="default"
              disabled={false}
              onClick={[Function]}
            >
              Add a Heading
            </Button>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            xs={6}
          >
            <Button
              active={false}
              block={true}
              bsClass="btn"
              bsStyle="default"
              disabled={false}
              onClick={[Function]}
            >
              Add a Timespan
            </Button>
          </Col>
        </Row>,
        <Collapse
          appear={false}
          dimension="height"
          getDimensionValue={[Function]}
          in={false}
          mountOnEnter={false}
          timeout={300}
          unmountOnExit={false}
        >
          <div
            className="well"
            style={
              Object {
                "marginTop": "1rem",
              }
            }
          >
            <Connect(HeadingFormContainer)
              cancelClick={[Function]}
            />
          </div>
        </Collapse>,
        <Collapse
          appear={false}
          dimension="height"
          getDimensionValue={[Function]}
          in={false}
          mountOnEnter={false}
          timeout={300}
          unmountOnExit={false}
        >
          <div
            className="well"
            style={
              Object {
                "marginTop": "1rem",
              }
            }
          >
            <Connect(TimespanFormContainer)
              cancelClick={[Function]}
              initSegment={null}
              isInitializing={true}
              timespanOpen={false}
              updateInitialize={[Function]}
            />
          </div>
        </Collapse>,
      ],
      "style": Object {
        "margin": "4rem 0",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "bsClass": "row",
          "children": Array [
            <Col
              bsClass="col"
              componentClass="div"
              xs={6}
            >
              <Button
                active={false}
                block={true}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Add a Heading
              </Button>
            </Col>,
            <Col
              bsClass="col"
              componentClass="div"
              xs={6}
            >
              <Button
                active={false}
                block={true}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Add a Timespan
              </Button>
            </Col>,
          ],
          "componentClass": "div",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "col",
              "children": <Button
                active={false}
                block={true}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Add a Heading
              </Button>,
              "componentClass": "div",
              "xs": 6,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "block": true,
                "bsClass": "btn",
                "bsStyle": "default",
                "children": "Add a Heading",
                "disabled": false,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Add a Heading",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "col",
              "children": <Button
                active={false}
                block={true}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Add a Timespan
              </Button>,
              "componentClass": "div",
              "xs": 6,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "block": true,
                "bsClass": "btn",
                "bsStyle": "default",
                "children": "Add a Timespan",
                "disabled": false,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Add a Timespan",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "appear": false,
          "children": <div
            className="well"
            style={
              Object {
                "marginTop": "1rem",
              }
            }
          >
            <Connect(HeadingFormContainer)
              cancelClick={[Function]}
            />
          </div>,
          "dimension": "height",
          "getDimensionValue": [Function],
          "in": false,
          "mountOnEnter": false,
          "timeout": 300,
          "unmountOnExit": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Connect(HeadingFormContainer)
              cancelClick={[Function]}
            />,
            "className": "well",
            "style": Object {
              "marginTop": "1rem",
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "cancelClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "appear": false,
          "children": <div
            className="well"
            style={
              Object {
                "marginTop": "1rem",
              }
            }
          >
            <Connect(TimespanFormContainer)
              cancelClick={[Function]}
              initSegment={null}
              isInitializing={true}
              timespanOpen={false}
              updateInitialize={[Function]}
            />
          </div>,
          "dimension": "height",
          "getDimensionValue": [Function],
          "in": false,
          "mountOnEnter": false,
          "timeout": 300,
          "unmountOnExit": false,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Connect(TimespanFormContainer)
              cancelClick={[Function]}
              initSegment={null}
              isInitializing={true}
              timespanOpen={false}
              updateInitialize={[Function]}
            />,
            "className": "well",
            "style": Object {
              "marginTop": "1rem",
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "cancelClick": [Function],
              "initSegment": null,
              "isInitializing": true,
              "timespanOpen": false,
              "updateInitialize": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <AlertContainer />,
          <Row
            bsClass="row"
            componentClass="div"
          >
            <Col
              bsClass="col"
              componentClass="div"
              xs={6}
            >
              <Button
                active={false}
                block={true}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Add a Heading
              </Button>
            </Col>
            <Col
              bsClass="col"
              componentClass="div"
              xs={6}
            >
              <Button
                active={false}
                block={true}
                bsClass="btn"
                bsStyle="default"
                disabled={false}
                onClick={[Function]}
              >
                Add a Timespan
              </Button>
            </Col>
          </Row>,
          <Collapse
            appear={false}
            dimension="height"
            getDimensionValue={[Function]}
            in={false}
            mountOnEnter={false}
            timeout={300}
            unmountOnExit={false}
          >
            <div
              className="well"
              style={
                Object {
                  "marginTop": "1rem",
                }
              }
            >
              <Connect(HeadingFormContainer)
                cancelClick={[Function]}
              />
            </div>
          </Collapse>,
          <Collapse
            appear={false}
            dimension="height"
            getDimensionValue={[Function]}
            in={false}
            mountOnEnter={false}
            timeout={300}
            unmountOnExit={false}
          >
            <div
              className="well"
              style={
                Object {
                  "marginTop": "1rem",
                }
              }
            >
              <Connect(TimespanFormContainer)
                cancelClick={[Function]}
                initSegment={null}
                isInitializing={true}
                timespanOpen={false}
                updateInitialize={[Function]}
              />
            </div>
          </Collapse>,
        ],
        "style": Object {
          "margin": "4rem 0",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "row",
            "children": Array [
              <Col
                bsClass="col"
                componentClass="div"
                xs={6}
              >
                <Button
                  active={false}
                  block={true}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                >
                  Add a Heading
                </Button>
              </Col>,
              <Col
                bsClass="col"
                componentClass="div"
                xs={6}
              >
                <Button
                  active={false}
                  block={true}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                >
                  Add a Timespan
                </Button>
              </Col>,
            ],
            "componentClass": "div",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "col",
                "children": <Button
                  active={false}
                  block={true}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                >
                  Add a Heading
                </Button>,
                "componentClass": "div",
                "xs": 6,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "active": false,
                  "block": true,
                  "bsClass": "btn",
                  "bsStyle": "default",
                  "children": "Add a Heading",
                  "disabled": false,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Add a Heading",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "col",
                "children": <Button
                  active={false}
                  block={true}
                  bsClass="btn"
                  bsStyle="default"
                  disabled={false}
                  onClick={[Function]}
                >
                  Add a Timespan
                </Button>,
                "componentClass": "div",
                "xs": 6,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "active": false,
                  "block": true,
                  "bsClass": "btn",
                  "bsStyle": "default",
                  "children": "Add a Timespan",
                  "disabled": false,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Add a Timespan",
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "appear": false,
            "children": <div
              className="well"
              style={
                Object {
                  "marginTop": "1rem",
                }
              }
            >
              <Connect(HeadingFormContainer)
                cancelClick={[Function]}
              />
            </div>,
            "dimension": "height",
            "getDimensionValue": [Function],
            "in": false,
            "mountOnEnter": false,
            "timeout": 300,
            "unmountOnExit": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Connect(HeadingFormContainer)
                cancelClick={[Function]}
              />,
              "className": "well",
              "style": Object {
                "marginTop": "1rem",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "cancelClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "appear": false,
            "children": <div
              className="well"
              style={
                Object {
                  "marginTop": "1rem",
                }
              }
            >
              <Connect(TimespanFormContainer)
                cancelClick={[Function]}
                initSegment={null}
                isInitializing={true}
                timespanOpen={false}
                updateInitialize={[Function]}
              />
            </div>,
            "dimension": "height",
            "getDimensionValue": [Function],
            "in": false,
            "mountOnEnter": false,
            "timeout": 300,
            "unmountOnExit": false,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Connect(TimespanFormContainer)
                cancelClick={[Function]}
                initSegment={null}
                isInitializing={true}
                timespanOpen={false}
                updateInitialize={[Function]}
              />,
              "className": "well",
              "style": Object {
                "marginTop": "1rem",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "cancelClick": [Function],
                "initSegment": null,
                "isInitializing": true,
                "timespanOpen": false,
                "updateInitialize": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
